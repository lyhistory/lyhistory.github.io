(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{459:function(e,n,t){"use strict";t.r(n);var a=t(65),i=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"airdrop"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#airdrop"}},[e._v("#")]),e._v(" Airdrop")]),e._v(" "),t("h3",{attrs:{id:"free-nft-claim"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#free-nft-claim"}},[e._v("#")]),e._v(" Free NFT Claim")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://bricksmint.com/bera-faucet?r=0x93b4eC8eD7F1FAD2107CDAd30fd9ECEC3f7975fE",target:"_blank",rel:"noopener noreferrer"}},[e._v("BERA FAUCET x BRICKS MINT"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"memecoin-sniper"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#memecoin-sniper"}},[e._v("#")]),e._v(" Memecoin Sniper")]),e._v(" "),t("ol",[t("li",[e._v("build a sniper bot\nWrite a python script to snipe memecoin launches on the Solana network for building a sniper bot")]),e._v(" "),t("li",[e._v("analyze the coin\nUpgrade this code to verify the token contract via rugcheck.xyz and analyze the coin before buying,based on this analysis, the bot will determine if it's a rug pull")])]),e._v(" "),t("p",[e._v("some other metrics/criteria:")]),e._v(" "),t("ul",[t("li",[e._v("FDV")]),e._v(" "),t("li",[e._v("liquidity")]),e._v(" "),t("li",[e._v("Volume")]),e._v(" "),t("li",[e._v("social metrics")]),e._v(" "),t("li",[e._v("number of holders")]),e._v(" "),t("li",[e._v("number of tokens launched by the dev")])]),e._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[e._v("set buy/sell conditions")])]),e._v(" "),t("p",[e._v('Define the "Slippage" and "Price Impact" parameters in the code, recommended settings:')]),e._v(" "),t("ul",[t("li",[e._v("Max Slippage: 5-10%")]),e._v(" "),t("li",[e._v("Max Price Impact: 5%")])]),e._v(" "),t("p",[e._v("set by/sell conditions and set max slippage at 5-10% and max price impact at 5%")]),e._v(" "),t("ol",{attrs:{start:"4"}},[t("li",[e._v("Improve your bot adapt to your needs")])]),e._v(" "),t("p",[e._v("for example: add standard buy/sell amounts to perform these actions even faster")]),e._v(" "),t("h2",{attrs:{id:"telegram-minigame-hamster-kombat-done"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#telegram-minigame-hamster-kombat-done"}},[e._v("#")]),e._v(" Telegram minigame->Hamster Kombat(done)")]),e._v(" "),t("p",[e._v('手机检测：\nweb.telegram => UI显示 Play on your mobile\n=> source js:\n["android", "android_x", "ios"].indexOf((Kt = (Jt = window')]),e._v(" "),t("p",[e._v("绕过：\nchrome extension: Resource Override => Add Rule->Select Inject File->Edit File, then paste the code:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('if (location.hostname === "hamsterkombatgame.io") {\n    const original_indexOf = Array.prototype.indexOf;\n    Array.prototype.indexOf = function(...args) {\n        if (JSON.stringify(this) === JSON.stringify(["android", "android_x", "ios"])) {\n            setTimeout(() => {\n                Array.prototype.indexOf = original_indexOf;\n            });\n            return 0;\n        }\n        return original_indexOf.apply(this, args);\n    }\n}\n\n')])])]),t("p",[e._v("login Telegram Web, go to Hamster Kombat https://t.me/haMster_kombat_bot/start?startapp=kentId7352585642, start the game, open devleoper tool, go to Console tab, select clicker(hamsterkombatgame.io) and then paste the code:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("(function() {\n    const evt1 = new PointerEvent('pointerdown', {\n        clientX: 150,\n        clientY: 300\n    });\n    const evt2 = new PointerEvent('pointerup', {\n        clientX: 150,\n        clientY: 300\n    });\n    setInterval((function fn() {\n        const energy = parseInt(document.getElementsByClassName(\"user-tap-energy\")[0].getElementsByTagName(\"p\")[0].textContent.split(\" / \")[0]);\n        if (energy > 25) {\n            document.getElementsByClassName('user-tap-button')[0].dispatchEvent(evt1);\n            document.getElementsByClassName('user-tap-button')[0].dispatchEvent(evt2);\n        }\n        return fn;\n    })(), 300);\n})();\n")])])]),t("h2",{attrs:{id:"telegram-minigame-blumbot"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#telegram-minigame-blumbot"}},[e._v("#")]),e._v(" Telegram minigame->Blumbot")]),e._v(" "),t("p",[e._v("https://web.telegram.org/k/#@BlumCryptoBot")]),e._v(" "),t("ol",[t("li",[t("p",[e._v('fix "refused connection"\ninstall Ignore X-Frame headers\nhttps://chromewebstore.google.com/detail/ignore-x-frame-headers/gleekbfjekiniecknbkamfmkohkpodhe')])]),e._v(" "),t("li")]),e._v(" "),t("p",[e._v("Violentmonkey https://chromewebstore.google.com/detail/violentmonkey/jinjaccalgkegednnccohejagnlnfdag")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// ==UserScript==\n// @name         BlumBot\n// @version      2.2\n// @namespace    Violentmonkey Scripts\n// @match        https://telegram.blum.codes/*\n// @grant        none\n// @icon         https://cdn.prod.website-files.com/65b6a1a4a0e2af577bccce96/65ba99c1616e21b24009b86c_blum-256.png\n// ==/UserScript==\n\nlet GAME_SETTINGS = {\n    minBombHits: Math.floor(Math.random() * 2),\n    minIceHits: Math.floor(Math.random() * 2) + 2,\n    flowerSkipPercentage: Math.floor(Math.random() * 11) + 15,\n    minDelayMs: 2000,\n    maxDelayMs: 5000,\n    autoClickPlay: false\n};\n\nlet isGamePaused = false;\n\ntry {\n    let gameStats = {\n        score: 0,\n        bombHits: 0,\n        iceHits: 0,\n        flowersSkipped: 0,\n        isGameOver: false,\n    };\n\n    const originalPush = Array.prototype.push;\n    Array.prototype.push = function (...items) {\n        if (!isGamePaused) {\n            items.forEach(item => handleGameElement(item));\n        }\n        return originalPush.apply(this, items);\n    };\n\n    function handleGameElement(element) {\n        if (!element || !element.item) return;\n\n        const { type } = element.item;\n        switch (type) {\n            case \"CLOVER\":\n                processFlower(element);\n                break;\n            case \"BOMB\":\n                processBomb(element);\n                break;\n            case \"FREEZE\":\n                processIce(element);\n                break;\n        }\n    }\n\n    function processFlower(element) {\n        const shouldSkip = Math.random() < (GAME_SETTINGS.flowerSkipPercentage / 100);\n        if (shouldSkip) {\n            gameStats.flowersSkipped++;\n        } else {\n            gameStats.score++;\n            clickElement(element);\n        }\n    }\n\n    function processBomb(element) {\n        if (gameStats.bombHits < GAME_SETTINGS.minBombHits) {\n            gameStats.score = 0;\n            clickElement(element);\n            gameStats.bombHits++;\n        }\n    }\n\n    function processIce(element) {\n        if (gameStats.iceHits < GAME_SETTINGS.minIceHits) {\n            clickElement(element);\n            gameStats.iceHits++;\n        }\n    }\n\n    function clickElement(element) {\n        element.onClick(element);\n        element.isExplosion = true;\n        element.addedAt = performance.now();\n    }\n\n    function checkGameCompletion() {\n        const rewardElement = document.querySelector('#app > div > div > div.content > div.reward');\n        if (rewardElement && !gameStats.isGameOver) {\n            gameStats.isGameOver = true;\n            resetGameStats();\n        }\n    }\n\n    function resetGameStats() {\n        gameStats = {\n            score: 0,\n            bombHits: 0,\n            iceHits: 0,\n            flowersSkipped: 0,\n            isGameOver: false,\n        };\n    }\n\n    function getNewGameDelay() {\n        return Math.floor(Math.random() * (GAME_SETTINGS.maxDelayMs - GAME_SETTINGS.minDelayMs + 1) + GAME_SETTINGS.minDelayMs);\n    }\n\n    function checkAndClickPlayButton() {\n        const playButtons = document.querySelectorAll('button.kit-button.is-large.is-primary, a.play-btn[href=\"/game\"], button.kit-button.is-large.is-primary');\n\n        playButtons.forEach(button => {\n            if (!isGamePaused && GAME_SETTINGS.autoClickPlay && (/Play/.test(button.textContent) || /Continue/.test(button.textContent))) {\n                setTimeout(() => {\n                    button.click();\n                    gameStats.isGameOver = false;\n                }, getNewGameDelay());\n            }\n        });\n    }\n\n    function continuousPlayButtonCheck() {\n        checkAndClickPlayButton();\n        setTimeout(continuousPlayButtonCheck, 1000);\n    }\n\n    const observer = new MutationObserver(mutations => {\n        for (const mutation of mutations) {\n            if (mutation.type === 'childList') {\n                checkGameCompletion();\n            }\n        }\n    });\n\n    const appElement = document.querySelector('#app');\n    if (appElement) {\n        observer.observe(appElement, { childList: true, subtree: true });\n    }\n\n    continuousPlayButtonCheck();\n\n    const settingsMenu = document.createElement('div');\n    settingsMenu.className = 'settings-menu';\n    settingsMenu.style.display = 'none';\n\n    const menuTitle = document.createElement('h3');\n    menuTitle.className = 'settings-title';\n    menuTitle.textContent = 'BlumBot by @DefiWimar';\n\n    const closeButton = document.createElement('button');\n    closeButton.className = 'settings-close-button';\n    closeButton.textContent = '×';\n    closeButton.onclick = () => {\n        settingsMenu.style.display = 'none';\n    };\n\n    menuTitle.appendChild(closeButton);\n    settingsMenu.appendChild(menuTitle);\n\n    function updateSettingsMenu() {\n        document.getElementById('flowerSkipPercentage').value = GAME_SETTINGS.flowerSkipPercentage;\n        document.getElementById('flowerSkipPercentageDisplay').textContent = GAME_SETTINGS.flowerSkipPercentage;\n        document.getElementById('minIceHits').value = GAME_SETTINGS.minIceHits;\n        document.getElementById('minIceHitsDisplay').textContent = GAME_SETTINGS.minIceHits;\n        document.getElementById('minBombHits').value = GAME_SETTINGS.minBombHits;\n        document.getElementById('minBombHitsDisplay').textContent = GAME_SETTINGS.minBombHits;\n        document.getElementById('minDelayMs').value = GAME_SETTINGS.minDelayMs;\n        document.getElementById('minDelayMsDisplay').textContent = GAME_SETTINGS.minDelayMs;\n        document.getElementById('maxDelayMs').value = GAME_SETTINGS.maxDelayMs;\n        document.getElementById('maxDelayMsDisplay').textContent = GAME_SETTINGS.maxDelayMs;\n        document.getElementById('autoClickPlay').checked = GAME_SETTINGS.autoClickPlay;\n    }\n\n    settingsMenu.appendChild(createSettingElement('Flower Skip (%)', 'flowerSkipPercentage', 'range', 0, 100, 1, ''));\n    settingsMenu.appendChild(createSettingElement('Min Freeze Hits', 'minIceHits', 'range', 1, 10, 1, ''));\n    settingsMenu.appendChild(createSettingElement('Min Bomb Hits', 'minBombHits', 'range', 0, 10, 1, ''));\n    settingsMenu.appendChild(createSettingElement('Min Delay (ms)', 'minDelayMs', 'range', 10, 10000, 10, ''));\n    settingsMenu.appendChild(createSettingElement('Max Delay (ms)', 'maxDelayMs', 'range', 10, 10000, 10, ''));\n    settingsMenu.appendChild(createSettingElement('Auto Click Play', 'autoClickPlay', 'checkbox', null, null, null, ''));\n\n    const pauseResumeButton = document.createElement('button');\n    pauseResumeButton.textContent = 'Pause';\n    pauseResumeButton.className = 'pause-resume-btn';\n    pauseResumeButton.onclick = toggleGamePause;\n    settingsMenu.appendChild(pauseResumeButton);\n\n    document.body.appendChild(settingsMenu);\n\n    const settingsButton = document.createElement('button');\n    settingsButton.className = 'settings-button';\n    settingsButton.textContent = '⚙️';\n    settingsButton.onclick = () => {\n        settingsMenu.style.display = settingsMenu.style.display === 'block' ? 'none' : 'block';\n    };\n    document.body.appendChild(settingsButton);\n\n    const style = document.createElement('style');\n    style.textContent = `\n        .settings-menu {\n          position: fixed;\n          top: 50%;\n          left: 50%;\n          transform: translate(-50%, -50%);\n          background-color: rgba(40, 44, 52, 0.95);\n          border-radius: 8px;\n          box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);\n          color: #abb2bf;\n          font-family: 'Arial', sans-serif;\n          z-index: 10000;\n          padding: 20px;\n          width: 300px;\n        }\n        .settings-title {\n          color: #61afef;\n          font-size: 18px;\n          font-weight: bold;\n          margin-bottom: 15px;\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n        }\n        .settings-close-button {\n          background: none;\n          border: none;\n          color: #e06c75;\n          font-size: 20px;\n          cursor: pointer;\n          padding: 0;\n        }\n        .setting-item {\n          margin-bottom: 12px;\n        }\n        .setting-label {\n          display: flex;\n          align-items: center;\n          margin-bottom: 4px;\n        }\n        .setting-label-text {\n          color: #e5c07b;\n          margin-right: 5px;\n        }\n        .setting-input {\n          display: flex;\n          align-items: center;\n        }\n        .setting-slider {\n          flex-grow: 1;\n          margin-right: 8px;\n        }\n        .setting-value {\n          min-width: 30px;\n          text-align: right;\n          font-size: 11px;\n        }\n        .pause-resume-btn {\n          display: block;\n          width: calc(100% - 10px);\n          padding: 8px;\n          margin: 15px 5px;\n          background-color: #98c379;\n          color: #282c34;\n          border: none;\n          border-radius: 4px;\n          cursor: pointer;\n          font-weight: bold;\n          font-size: 14px;\n          transition: background-color 0.3s;\n        }\n        .pause-resume-btn:hover {\n          background-color: #7cb668;\n        }\n        .social-buttons {\n          margin-top: 15px;\n          display: flex;\n          justify-content: center;\n          flex-wrap: wrap;\n        }\n        .social-button {\n          display: inline-flex;\n          align-items: center;\n          padding: 5px 8px;\n          margin: 2px;\n          border-radius: 4px;\n          background-color: #282c34;\n          color: #abb2bf;\n          text-decoration: none;\n          font-size: 12px;\n          transition: background-color 0.3s;\n          flex: 1 1 auto;\n          min-width: 100px;\n          max-width: 150px;\n          box-sizing: border-box;\n        }\n        .social-button:hover {\n          background-color: #4b5263;\n        }\n        .social-button img {\n          width: 16px;\n          height: 16px;\n          margin-right: 5px;\n        }\n        .settings-button {\n          position: fixed;\n          bottom: 20px;\n          right: 20px;\n          background-color: rgba(36, 146, 255, 0.8);\n          color: #fff;\n          border: none;\n          border-radius: 50%;\n          width: 40px;\n          height: 40px;\n          font-size: 18px;\n          cursor: pointer;\n          box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n          z-index: 9999;\n        }\n      `;\n    document.head.appendChild(style);\n\n    function createSettingElement(label, id, type, min, max, step, tooltipText) {\n        const container = document.createElement('div');\n        container.className = 'setting-item';\n\n        const labelContainer = document.createElement('div');\n        labelContainer.className = 'setting-label';\n\n        const labelElement = document.createElement('span');\n        labelElement.className = 'setting-label-text';\n        labelElement.textContent = label;\n\n        labelContainer.appendChild(labelElement);\n\n        const inputContainer = document.createElement('div');\n        inputContainer.className = 'setting-input';\n\n        let input;\n        if (type === 'checkbox') {\n            input = document.createElement('input');\n            input.type = 'checkbox';\n            input.id = id;\n            input.checked = GAME_SETTINGS[id];\n            input.addEventListener('change', (e) => {\n                GAME_SETTINGS[id] = e.target.checked;\n                saveSettings();\n            });\n            inputContainer.appendChild(input);\n        } else {\n            input = document.createElement('input');\n            input.type = type;\n            input.id = id;\n            input.min = min;\n            input.max = max;\n            input.step = step;\n            input.value = GAME_SETTINGS[id];\n            input.className = 'setting-slider';\n\n            const valueDisplay = document.createElement('span');\n            valueDisplay.id = `${id}Display`;\n            valueDisplay.textContent = GAME_SETTINGS[id];\n            valueDisplay.className = 'setting-value';\n\n            input.addEventListener('input', (e) => {\n                GAME_SETTINGS[id] = parseFloat(e.target.value);\n                valueDisplay.textContent = e.target.value;\n                saveSettings();\n            });\n\n            inputContainer.appendChild(input);\n            inputContainer.appendChild(valueDisplay);\n        }\n\n        container.appendChild(labelContainer);\n        container.appendChild(inputContainer);\n        return container;\n    }\n\n    function saveSettings() {\n        localStorage.setItem('BlumAutoclickerSettings', JSON.stringify(GAME_SETTINGS));\n    }\n\n    function loadSettings() {\n        const savedSettings = localStorage.getItem('BlumAutoclickerSettings');\n        if (savedSettings) {\n            const parsedSettings = JSON.parse(savedSettings);\n            GAME_SETTINGS = {\n                ...GAME_SETTINGS,\n                ...parsedSettings\n            };\n        }\n    }\n\n    loadSettings();\n    updateSettingsMenu();\n\n    function toggleGamePause() {\n        isGamePaused = !isGamePaused;\n        pauseResumeButton.textContent = isGamePaused ? 'Resume' : 'Pause';\n        pauseResumeButton.style.backgroundColor = isGamePaused ? '#e5c07b' : '#98c379';\n    }\n} catch (e) {\n    console.error(\"Blum Autoclicker error:\", e);\n}\n")])])]),t("p",[e._v("升级代码")]),e._v(" "),t("p",[e._v('1). re-launch the app every 8 hours(window reload) and click on the "Claim" button with class "kit-button is-large is-primary is-fill button" and it has a child span with text "Claim"')]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// Reload the window every 8 hours\nsetInterval(() => {\n    window.location.reload();\n}, 8 * 60 * 60 * 1000); // 8 hours in milliseconds\n\n// After the page reloads, try to find and click the \"Claim\" button\nfunction checkAndClickClaimButton() {\n    const claimButtons = document.querySelectorAll('button.kit-button.is-large.is-drop.is-fill.button.is-done');\n    \n    Array.from(claimButtons).forEach(button => {\n        // Find all descendant div elements inside the button\n        const divs = Array.from(button.getElementsByTagName('div'));\n        \n        // Loop through divs to find the one with the text \"Claim\"\n        divs.forEach(div => {\n            if (div.textContent.trim() === 'Claim') {\n                setTimeout(() => {\n                    button.click();  // Click the button if the \"Claim\" div is found\n                }, getNewGameDelay());  // Adjust delay function as needed\n            }\n        });\n    });\n}\n\n// Add event listener to run the claim check when the page loads\nwindow.addEventListener('load', () => {\n    checkAndClickClaimButton();\n});\n\n")])])]),t("p",[e._v('2). click the button with class "kit-button is-large is-primary is-fill button" and it has a child span with text "Start farming" when the playButtons empty')]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function checkAndClickPlayButton() {\n        const playButtons = document.querySelectorAll('button.kit-button.is-large.is-primary, a.play-btn[href=\"/game\"], button.kit-button.is-large.is-primary');\n\n        playButtons.forEach(button => {\n            if (!isGamePaused && GAME_SETTINGS.autoClickPlay && (/Play/.test(button.textContent) || /Continue/.test(button.textContent))) {\n                setTimeout(() => {\n                    button.click();\n                    gameStats.isGameOver = false;\n                }, getNewGameDelay());\n            }else if(/Start farming/.test(button.textContent)){\n                setTimeout(() => {\n                    button.click();\n                    gameStats.isGameOver = false;\n                }, getNewGameDelay());\n            }\n        });\n\n        checkAndClickClaimButton();\n    }\n\n")])])]),t("ol",{attrs:{start:"3"}},[t("li",[e._v("Open BlumBot in the browser\nmake sure the Violentmonkey enabled the scripts, reload Blumbot if necessary until you see a gadget setting symbol over the game")])]),e._v(" "),t("p",[e._v("gpt prompt:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('Create a bot to play BlumCryptoBot, a Telegram mini-game\n\nWhen the Bot open the app, it click on the Play button. Then we will only click on the green snowflakes until the timer on the top left expires.\n\nImprove the code, when 5 mini games are completed, the bot will click on the "Start Farming" button on the homepage. After that, the bot should re-launch the app every 8 hours and click on the "Claim" button, re-click on "Start Farming" and repeat these actions\n\nAdd anti-detection measures for this bot and security\n\nAdd to the code the ability to perform all these actions from multitude of telegram accounts\n\nHow do l run a bot if i don\'t understand programming, tell me a step by step guide how do i run this bot\n')])])]),t("h2",{attrs:{id:"telegram-minigame-binance-moonbix"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#telegram-minigame-binance-moonbix"}},[e._v("#")]),e._v(" Telegram minigame->Binance Moonbix")]),e._v(" "),t("p",[e._v("promot:\nenvision yourself as a seasoned programmer with a decade of experience, Develop a bot designed to engage with the Moonbix mini-app, a Telegram mini-game")]),e._v(" "),t("p",[e._v('promot:\nWhen the Bot open the app, it click on the "Play Game" button, after that the screen will show another button "Play Again(Left x)", x means how many times left, note there is a emoj between Left and x,\nclick on the button if left more than 0 times, when the game start, capture all the Boxes And Coins within the game.')]),e._v(" "),t("p",[e._v("gpt implement it using selenium")]),e._v(" "),t("p",[e._v("promot:")]),e._v(" "),t("p",[e._v("your implementation using selenium won't work because moonbix blocking access from telegram web, now we can only play it using desktop, so we have no idea of the elements, change to use pyautogui lib to implement")]),e._v(" "),t("p",[e._v('Summary of Key Steps:\nFind Coordinates: Use pyautogui.position() to get the exact screen coordinates for the "Play Game" and "Play Again" buttons.\nImage Recognition: Save images of boxes and coins and use pyautogui.locateCenterOnScreen() to detect and click them.\nAutomation Loop: Continuously loop to click buttons and capture items')]),e._v(" "),t("p",[e._v("promot:\nwhat do you mean by Find Coordinates Use pyautogui.position(), i don't see it in the code, and for Image Recognition,do you mean I have to Save images of boxes and coins manually?\nwhat else should I do or How do l run a bot or fine-tune it step by step")]),e._v(" "),t("p",[e._v('How to Find Coordinates,Run this simple Python script to display the current mouse position in real-time, Move your mouse over the desired location (like the "Play Game" button), and note down the coordinates printed in the terminal.Once you have the coordinates, you can use them in your bot for clicking:')]),e._v(" "),t("ul",[t("li",[e._v("METHOD 1:"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import pyautogui\npyautogui.mouseInfo()\n")])])])]),e._v(" "),t("li",[e._v("METHOD 2:"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('\nimport pyautogui\nimport time\n\n# Continuously print the current mouse position every second\nwhile True:\n    x, y = pyautogui.position()\n    print(f"Mouse position: {x}, {y}")\n    time.sleep(1)\n\n')])])])])]),e._v(" "),t("p",[e._v("for image recognition, you need to manually capture images (screenshots) of the objects you want the bot to interact with—like the boxes and coins.")]),e._v(" "),t("p",[e._v("RUN BOT:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("pip install pyautogui\npip install pillow\n\n")])])]),t("p",[e._v("more promot:\nAdd anti-detection measures for this bot and security")]),e._v(" "),t("p",[e._v("import pyautogui\npyautogui.mouseInfo()")])])}),[],!1,null,null,null);n.default=i.exports}}]);