(window.webpackJsonp=window.webpackJsonp||[]).push([[221],{649:function(e,t,n){"use strict";n.r(t);var s=n(65),i=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[n("a",{attrs:{href:"https://github.com/DFRobot/SportsButtonESP32C3",target:"_blank",rel:"noopener noreferrer"}},[n("OutboundLink")],1)]),e._v(" "),n("h2",{attrs:{id:"setup"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#setup"}},[e._v("#")]),e._v(" Setup")]),e._v(" "),n("h3",{attrs:{id:"arduino-ide"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#arduino-ide"}},[e._v("#")]),e._v(" Arduino IDE")]),e._v(" "),n("p",[e._v("Installing ESP32 Add-on in Arduino IDE\nTo add ESP32 Board in your Arduino IDE, follow these instructions :")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("Open your Arduino IDE, go to File>Preferences")])]),e._v(" "),n("li",[n("p",[e._v("Put https://dl.espressif.com/dl/package_esp32_index.json into the ‚ÄúAdditional Board Manager URLs‚Äù field as shown in the figure below. Then, click the ‚ÄúOK‚Äù button")])])]),e._v(" "),n("p",[e._v("Note: if you already have another boards (i.e ESP8266 boards URL), you can separate the URLs with a comma like this:")]),e._v(" "),n("p",[e._v("https://dl.espressif.com/dl/package_esp32_index.json, http://arduino.esp8266.com/stable/package_esp8266com_index.json")]),e._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[e._v("Then go to the Boards Manager. Go to Tools > Board > Boards Manager")]),e._v(" "),n("li",[e._v("Go to the search bar and type ESP32 then install ESP32 by Espressif Systems")]),e._v(" "),n("li")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://docs.espressif.com/projects/arduino-esp32/en/latest/installing.html?highlight=update#how-to-update-to-the-latest-code",target:"_blank",rel:"noopener noreferrer"}},[e._v("install"),n("OutboundLink")],1)]),e._v(" "),n("h3",{attrs:{id:"esp-idf"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#esp-idf"}},[e._v("#")]),e._v(" ESP-IDF")]),e._v(" "),n("p",[e._v("https://www.electronics-lab.com/deep-dive-on-controlling-led-with-esp32-c3-devkitm-1-development-board-using-esp-idf/")]),e._v(" "),n("h2",{attrs:{id:"esp32-products"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#esp32-products"}},[e._v("#")]),e._v(" ESP32 Products")]),e._v(" "),n("h3",{attrs:{id:"esp32-c3-devkitm-1-esp32-c3-mini-1"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#esp32-c3-devkitm-1-esp32-c3-mini-1"}},[e._v("#")]),e._v(" ESP32-C3-DevKitM-1 (ESP32-C3-MINI-1)")]),e._v(" "),n("p",[e._v("ESP32-C3-DevKitM-1 is an entry-level development board based on ESP32-C3-MINI-1, a module named for its small size. This board integrates complete Wi-Fi and Bluetooth LE functions.")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://docs.espressif.com/projects/esp-idf/en/v5.0/esp32c3/hw-reference/esp32c3/user-guide-devkitm-1.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("EN-pinout"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32c3/hw-reference/esp32c3/user-guide-devkitm-1.html?highlight=esp32%20c3%20devkitm%201%20v1%20pinout",target:"_blank",rel:"noopener noreferrer"}},[e._v("‰∏≠Êñá-ÁÆ°ËÑö"),n("OutboundLink")],1)]),e._v(" "),n("h3",{attrs:{id:"esp32-c3-devkitc-02-esp32-c3-wroom-02"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#esp32-c3-devkitc-02-esp32-c3-wroom-02"}},[e._v("#")]),e._v(" ESP32-C3-DevKitC-02 (ESP32-C3-WROOM-02)")]),e._v(" "),n("p",[e._v("ESP32-C3-DevKitC-02 is an entry-level development board based on ESP32-C3-WROOM-02, a general-purpose module with 4 MB SPI flash. This board integrates complete Wi-Fi and Bluetooth LE functions.")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://docs.espressif.com/projects/esp-idf/en/v5.0/esp32c3/hw-reference/esp32c3/user-guide-devkitc-02.html?highlight=esp32%20c3%20wroom",target:"_blank",rel:"noopener noreferrer"}},[e._v("pinout"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("ESP32 With Integrated OLED (WEMOS/Lolin)\nhttps://www.instructables.com/ESP32-With-Integrated-OLED-WEMOSLolin-Getting-Star/")]),e._v(" "),n("h2",{attrs:{id:"power-options"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#power-options"}},[e._v("#")]),e._v(" Power Options")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://mp.weixin.qq.com/s/JOmDmY3TJXq7wD9f76UtPw",target:"_blank",rel:"noopener noreferrer"}},[e._v("Â¶Ç‰ΩïÁªôESP32‰æõÁîµ"),n("OutboundLink")],1),e._v("\nTo power your ESP32 dev kit, you have three options:")]),e._v(" "),n("ul",[n("li",[e._v("Via the USB port.")]),e._v(" "),n("li",[e._v("Using unregulated voltage between 5V and 12V, connected to the 5V and GND pins. This voltage is regulated on-board.")]),e._v(" "),n("li",[e._v("Using regulated 3.3V voltage, connected to the 3.3V and GND pins. Be very careful with that: do not exceed the 3.3V limit, or your ESP32 module will be damaged.")])]),e._v(" "),n("p",[e._v("Attention: be very, very careful to only use one of those options at the same time.")]),e._v(" "),n("p",[e._v("For example, do not power your ESP32 dev kit via the 5V pin using a 10V input while at the same time you have the module connected to your computer via USB. This will surely damage your module, and perhaps even your computer.")]),e._v(" "),n("p",[e._v("With this, you should have a good understanding of what the ESP32 is, and you must be eager to get hands-on with it. I totally understand üòÉ. Let‚Äôs proceed with the next lesson, where I‚Äôll show you how to set up the ESP32-Arduino Core on the Arduino IDE.")]),e._v(" "),n("h2",{attrs:{id:"example"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[e._v("#")]),e._v(" Example")]),e._v(" "),n("h3",{attrs:{id:"addressable-rgb-led"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#addressable-rgb-led"}},[e._v("#")]),e._v(" ‚Äúaddressable‚Äù RGB LED,")]),e._v(" "),n("p",[e._v("ESP32-C3 Blink Test with Arduino IDE and DumbDisplay\nhttps://www.youtube.com/watch?v=BAnvHOs5Fks")]),e._v(" "),n("p",[e._v("Guide for WS2812B Addressable RGB LED Strip with Arduino https://randomnerdtutorials.com/guide-for-ws2812b-addressable-rgb-led-strip-with-arduino/")]),e._v(" "),n("p",[e._v("https://www.electronics-lab.com/deep-dive-on-controlling-led-with-esp32-c3-devkitm-1-development-board-using-esp-idf/")]),e._v(" "),n("p",[e._v("https://espressif-docs.readthedocs-hosted.com/projects/arduino-esp32/en/latest/api/ledc.html")]),e._v(" "),n("h2",{attrs:{id:"esp32-12v-solenoid-lock"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#esp32-12v-solenoid-lock"}},[e._v("#")]),e._v(" esp32 12v solenoid lock")]),e._v(" "),n("p",[e._v("Ê∏ÖÂçïÔºö")]),e._v(" "),n("ul",[n("li",[e._v("5v1a ÂæÆÂûãÁîµÁ£ÅÈîÅ ph2.0ÂÖ¨Â§¥")]),e._v(" "),n("li",[e._v("5v RelayÂºÄÂÖ≥")]),e._v(" "),n("li",[e._v("5v1a ÁîµÊ∫êÈÄÇÈÖçÂô®")]),e._v(" "),n("li",[e._v("ph2.0ÊØçÂ§¥ËΩ¨dcÊØçÂ§¥")])]),e._v(" "),n("p",[e._v("https://www.circuito.io/app?components=9442,360217,842876")]),e._v(" "),n("p",[e._v("https://www.youtube.com/watch?v=kGkyvVwwuL8")]),e._v(" "),n("p",[e._v("https://esp32io.com/tutorials/esp32-solenoid-lock")]),e._v(" "),n("p",[e._v("https://creativepradeepthehomeofelectronics.blogspot.com/2021/07/smart-wifi-controlled-door-lock-system.html")]),e._v(" "),n("p",[e._v("https://esp32io.com/tutorials/esp32-door-lock-system-using-password")]),e._v(" "),n("p",[e._v("https://www.hackster.io/robocircuits/iot-door-lock-project-0601f5")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('//CreativePradeep//\n#include <WiFi.h>\n#include <WiFiClient.h>\n#include <BlynkSimpleEsp32.h>\n\n\nBlynkTimer timer;\n\n\nint toggleState_1 = 1;\nint pushButton1State = HIGH;\n\n\nint toggleState_2 = 1;\nint pushButton2State = HIGH;\n\n\nint wifiFlag = 0;\n\n\n#define AUTH "AUTH TOKEN"                 // You should get Auth Token in the Blynk App.  \n#define WIFI_SSID "WIFI NAME"             //Enter Wifi Name\n#define WIFI_PASS "WIFI PASSWORD"         //Enter wifi Password\n\n\n#define RELAY_PIN_1      26   //D26\n#define RELAY_PIN_2      27   //D27\n#define WIFI_LED         25   //D25\n\n\n#define PUSH_BUTTON_1    32   //D32\n#define PUSH_BUTTON_2    33   //D33\n\n\n#define VPIN_BUTTON_1    V1 \n#define VPIN_BUTTON_2    V2\n\n\nvoid relayOnOff(int relay){\n\n\n    switch(relay){\n      case 1: \n             if(toggleState_1 == 0){\n              digitalWrite(RELAY_PIN_1, HIGH); // turn on relay 1\n              toggleState_1 = 1;\n              }\n             else{\n              digitalWrite(RELAY_PIN_1, LOW); // turn off relay 1\n              toggleState_1 = 0;\n              }\n             delay(200);\n      break;\n      case 2: \n             if(toggleState_2 == 0){\n              digitalWrite(RELAY_PIN_2, HIGH); // turn on relay 2\n              toggleState_2 = 1;\n              }\n             else{\n              digitalWrite(RELAY_PIN_2, LOW); // turn off relay 2\n              toggleState_2 = 0;\n              }\n             delay(200);\n      break;\n      default : break;      \n      } \n}\n\n\nBLYNK_CONNECTED() {\n  // Request the latest state from the server\n  Blynk.syncVirtual(VPIN_BUTTON_1);\n  Blynk.syncVirtual(VPIN_BUTTON_2);\n}\n\n\n// When App button is pushed - switch the state\n\n\nBLYNK_WRITE(VPIN_BUTTON_1) {\n  toggleState_1 = param.asInt();\n  digitalWrite(RELAY_PIN_1, toggleState_1);\n}\n\n\nBLYNK_WRITE(VPIN_BUTTON_2) {\n  toggleState_2 = param.asInt();\n  digitalWrite(RELAY_PIN_2, toggleState_2);\n}\n\n\nvoid with_internet(){\n  if (digitalRead(PUSH_BUTTON_1) == LOW) {\n      relayOnOff(1);\n      // Update Button Widget\n      Blynk.virtualWrite(VPIN_BUTTON_1, toggleState_1);\n    }\n  if (digitalRead(PUSH_BUTTON_2) == LOW) {\n      relayOnOff(2);\n      // Update Button Widget\n      Blynk.virtualWrite(VPIN_BUTTON_2, toggleState_2);\n    }\n}\nvoid without_internet(){\n  if (digitalRead(PUSH_BUTTON_1) == LOW) {\n      relayOnOff(1);\n    }\n  if (digitalRead(PUSH_BUTTON_2) == LOW) {\n      relayOnOff(2);\n    }\n}\n\n\nvoid checkBlynkStatus() { // called every 3 seconds by SimpleTimer\n\n\n  bool isconnected = Blynk.connected();\n  if (isconnected == false) {\n    wifiFlag = 1;\n    digitalWrite(WIFI_LED, LOW);\n  }\n  if (isconnected == true) {\n    wifiFlag = 0;\n    digitalWrite(WIFI_LED, HIGH);\n  }\n}\n\n\nvoid setup()\n{\n  Serial.begin(9600);\n\n\n  pinMode(RELAY_PIN_1, OUTPUT);\n  pinMode(PUSH_BUTTON_1, INPUT_PULLUP);\n  digitalWrite(RELAY_PIN_1, toggleState_1);\n\n\n  pinMode(RELAY_PIN_2, OUTPUT);\n  pinMode(PUSH_BUTTON_2, INPUT_PULLUP);\n  digitalWrite(RELAY_PIN_2, toggleState_2);\n\n\n  pinMode(WIFI_LED, OUTPUT);\n\n\n  WiFi.begin(WIFI_SSID, WIFI_PASS);\n  timer.setInterval(3000L, checkBlynkStatus); // check if Blynk server is connected every 3 seconds\n  Blynk.config(AUTH);\n}\n\n\nvoid loop()\n{  \n  if (WiFi.status() != WL_CONNECTED)\n  {\n    Serial.println("Not Connected");\n  }\n  else\n  {\n    Serial.println(" Connected");\n    Blynk.run();\n  }\n\n\n  timer.run(); // Initiates SimpleTimer\n  if (wifiFlag == 0)\n    with_internet();\n  else\n    without_internet();\n}\n')])])]),n("h2",{attrs:{id:"esp32-mini-smart-farm"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#esp32-mini-smart-farm"}},[e._v("#")]),e._v(" ESP32 Mini Smart Farm")]),e._v(" "),n("p",[e._v("https://www.elec-cafe.com/esp32-mini-smart-farm-micropython/")]),e._v(" "),n("h2",{attrs:{id:"esp32-ÈÅ•ÊéßÂô®"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#esp32-ÈÅ•ÊéßÂô®"}},[e._v("#")]),e._v(" ESP32 ÈÅ•ÊéßÂô®")]),e._v(" "),n("p",[e._v("https://www.youtube.com/watch?v=SVlm7QU5Nkk\nhttps://www.seeedstudio.com/blog/2023/04/13/ble-wifi-remote-using-seeed-studio-xiao-esp32c3/")]),e._v(" "),n("p",[e._v("https://www.e-tinkers.com/2019/11/build-an-esp32-web-server-and-ir-remote/")]),e._v(" "),n("p",[e._v("https://oshwhub.com/satun/c3mini-yao-kong-qi_copy\nhttps://www.youtube.com/watch?v=SVlm7QU5Nkk\nhttps://www.hackster.io/techstudycell/esp32-bluetooth-home-automation-with-ir-remote-control-relay-10d4e8?f=1\nhttps://www.youtube.com/watch?v=dODmsoAu0D4")]),e._v(" "),n("h2",{attrs:{id:"troubleshooting"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#troubleshooting"}},[e._v("#")]),e._v(" troubleshooting")]),e._v(" "),n("p",[e._v("?# class WiFiClientSecure' has no member named 'setInsecure'")]),e._v(" "),n("p",[e._v("upgrade to latest:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("[env:esp32dev]\nplatform = espressif32\nboard = esp32dev\nframework = arduino\nmonitor_speed = 115200\nboard_build.partitions = no_ota.csv\nlib_deps = h2zero/NimBLE-Arduino@^1.3.1\n\t   AugustESP32\n")])])]),n("p",[e._v("=> upgrade to latest")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("[env:esp32dev]\nplatform = https://github.com/platformio/platform-espressif32.git\nboard = esp32dev\nframework = arduino\nplatform_packages =\n    framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32#master\nmonitor_speed = 115200\nboard_build.partitions = no_ota.csv\nlib_deps = h2zero/NimBLE-Arduino@^1.3.1\n    AugustESP32\n")])])])])}),[],!1,null,null,null);t.default=i.exports}}]);