(window.webpackJsonp=window.webpackJsonp||[]).push([[116],{317:function(e,t,n){"use strict";n.r(t);var a=n(0),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("整理 google doc：Basics: Linux Basic")]),e._v(" "),n("h2",{attrs:{id:"命令执行本质"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#命令执行本质"}},[e._v("#")]),e._v(" 命令执行本质")]),e._v(" "),n("p",[e._v("一个命令行终端是一个shell进程，在这个终端里执行的程序都是作为该shell进程的子进程。\n如果子进程命令阻塞终端shell进程，shell进程就会等待子进程退出才能接收其他命令；\n如果关掉了shell终端，，依附的所有子进程都会退出；\n加上&号可以避免这种情况，原理是将命令挂在systemd系统守护进程名下，其他办法还有nohup或者开tmux或者screen，并且加&可以让shell进程不再阻塞，从而继续响应新命令；")]),e._v(" "),n("p",[e._v("set -x 可以显示shell在执行什么程序")]),e._v(" "),n("p",[e._v("当使用 sudo 时，系统会使用 /etc/sudoers 这个文件中规定的该用户的权限和环境变量")]),e._v(" "),n("h2",{attrs:{id:"重定向-管道"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#重定向-管道"}},[e._v("#")]),e._v(" 重定向/管道")]),e._v(" "),n("p",[n("img",{attrs:{src:"/docs/docs_image/software/linux/linux_redirect01.png",alt:""}})]),e._v(" "),n("ul",[n("li",[n("p",[e._v("重定向")]),e._v(" "),n("p",[e._v("输入<+输出流>")]),e._v(" "),n("p",[n("code",[e._v("exec 8<> /dev/tcp/www.baidu.com/80")])]),e._v(" "),n("p",[e._v("重定向到文件："),n("code",[e._v("> file")])]),e._v(" "),n("p",[e._v("重定向到文件描述符要加&"),n("code",[e._v(">& fd")])]),e._v(" "),n("p",[n("code",[e._v('echo -e "GET / HTTP/1.0\\n" 1>& 8')]),e._v(" "),n("code",[e._v("cat 0<& 8 或 cat<&8")])])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("标准输出重定向：")])]),e._v(" "),n("p",[e._v("比如标准输出重定向 java -jar **.jar > log.txt")]),e._v(" "),n("p",[e._v("2>&1 标准错误输出重定向到标准输出")]),e._v(" "),n("p",[e._v("如果需要sudo权限，可以用tee：sudo tee")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("cat shopee.sg.domain.uniq | filter-resolved > shopee.sg.domain.uniq.resolved\ncat shopee.sg.domain.uniq | filter-resolved | sudo tee shopee.sg.domain.uniq.resolved\n")])])])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("标准输入重定向：管道|和<<< 以及命令替换$()：")])]),e._v(" "),n("p",[e._v("首先$()主要则是command substitution，比如\nrm $(where connect.sh)")]),e._v(" "),n("p",[e._v("dos2unix $(find . -type f)")]),e._v(" "),n("p",[e._v('echo $(cmd) 和 echo "$(cmd)"，结果差不多，但是仍然有区别。注意观察，双引号转义完成的结果会自动增加单引号，而前者不会， 如果 $ 读取出的参数字符串包含空格，应该用双引号括起来，否则就会出错。')]),e._v(" "),n("p",[e._v("管道：")]),e._v(" "),n("p",[e._v("ps -aef | grep -v grep | grep \"java -server -jar\" | awk '{print $2}'\n$(2)获取管道前面等输出结果第二列,此时可以用$2替代；")]),e._v(" "),n("p",[e._v("标准输入重定向符：")]),e._v(" "),n("p",[e._v("<<< String 比如脚本中读取第一个参数并取分隔''的第一个值 "),n("code",[e._v("IFS='/' read -ra target_arr <<< \"$1\"")])])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("位置参数${}：")])]),e._v(" "),n("p",[e._v("${}主要是作为positional parameter，")]),e._v(" "),n("p",[e._v("$｛2｝还可以表示获取脚本输入参数等第二个，此时也可以用$2替代，$#是输入参数个数；")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ animal=cat\n$ echo $animals\n# No such variable as “animals”.\n$ echo ${animal}s\ncats\n")])])]),n("p",[e._v("{}https://askubuntu.com/questions/339015/what-does-mean-in-the-find-command")]),e._v(" "),n("p",[e._v("https://labuladong.gitbook.io/algo/di-wu-zhang-ji-suan-ji-ji-shu/linux-jin-cheng https://labuladong.gitbook.io/algo/di-wu-zhang-ji-suan-ji-ji-shu/linuxshell")]),e._v(" "),n("p",[e._v("difference between ${} and $() in shell script https://superuser.com/questions/935374/difference-between-and-in-shell-scriptcd /proc/$$/fd $$代表当前解释程序")])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("哪些命令接受标准输入")])]),e._v(" "),n("p",[e._v('命令默认都接受参数 -argument，有些命令还接受标准输入（可以使用管道符|和重定向符< <<<）,\n简单判别方式：命令是否可以阻塞终端（如cat不加任何命令会阻塞终端）\n如 echo"trade:trade"|chpasswd')])])]),e._v(" "),n("h2",{attrs:{id:"用户身份和权限"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#用户身份和权限"}},[e._v("#")]),e._v(" 用户身份和权限")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('su _gvm\nThis account is currently not available.\n\nsudo -u _gvm gvmd --migrate\nsudo su -l _gvm -s /bin/bash\n\nsudo sh -c "cmds"\n\n\n')])])]),n("p",[e._v("Permissions take a different meaning for directories. Here's what they mean:")]),e._v(" "),n("ul",[n("li",[n("strong",[e._v("r")]),e._v("ead determines if a user can view the directory's contents, i.e. do ls in it.")]),e._v(" "),n("li",[n("strong",[e._v("w")]),e._v("rite determines if a user can create new files or delete file in the directory. (Note here that this essentially means that a user with write access toa directory can delete files in the directory "),n("em",[e._v("even")]),e._v(" if he/she doesn't have write permissions for the file! So be careful with this.)")]),e._v(" "),n("li",[e._v("e"),n("strong",[e._v("x")]),e._v("ecute determines if the user can cd into the directory.")])]),e._v(" "),n("h2",{attrs:{id:"安装包管理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装包管理"}},[e._v("#")]),e._v(" 安装包管理")]),e._v(" "),n("h3",{attrs:{id:"不同发行版选择"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#不同发行版选择"}},[e._v("#")]),e._v(" 不同发行版选择")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("Ubuntu / kali / parrotOS")]),e._v(" "),n("p",[e._v("based on debian,")])]),e._v(" "),n("li",[n("p",[e._v("Centos")]),e._v(" "),n("p",[e._v("for bigdata")])]),e._v(" "),n("li",[n("p",[e._v("Redhat")]),e._v(" "),n("p",[e._v("for databases(because those database companies use redhat, it’s tested)")])])]),e._v(" "),n("h3",{attrs:{id:"基本安装方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本安装方法"}},[e._v("#")]),e._v(" 基本安装方法")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("apt或yum安装")]),e._v(" "),n("p",[e._v("add to apt/yum repository, and then apt-get/yum install ***")]),e._v(" "),n("p",[e._v("Normally will be put in "),n("strong",[e._v("/usr/bin/")])]),e._v(" "),n("p",[e._v("Additionally, you can use "),n("code",[e._v("yum localinstall <packagename>")]),e._v(" to intelligently install dependencies as needed.")]),e._v(" "),n("p",[e._v("Know the version before installing:")]),e._v(" "),n("p",[n("code",[e._v("apt policy <packagename>")])]),e._v(" "),n("p",[n("code",[e._v("yum info/search <packagename>")])])]),e._v(" "),n("li",[n("p",[e._v("deb或rpm安装")]),e._v(" "),n("p",[e._v("download deb for ubuntu or rpm for centos, and install it, it will help you install all related dependencies")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("版本")]),e._v(" "),n("p",[e._v("amd64, i386,x64"),n("a",{attrs:{href:"https://askubuntu.com/questions/32402/amd64-i386-32bit-64bit-which-version-to-choose",target:"_blank",rel:"noopener noreferrer"}},[e._v(" https://askubuntu.com/questions/32402/amd64-i386-32bit-64bit-which-version-to-choose"),n("OutboundLink")],1)])]),e._v(" "),n("li",[n("p",[e._v("包类型：dpkg(Ubuntu) , rpm(centos)")]),e._v(" "),n("p",[e._v("http://linuxintro.org/index.php?title=Dpkg-rpm_equivalent_commands&redirect=no")]),e._v(" "),n("p",[e._v("deb for debian")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("dpkg -i google-chrome-stable_current_amd64.deb\napt install ./google-chrome-stable_current_amd64.deb\n")])])]),n("p",[e._v("rpm for # CentOS/RHEL")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("rpm -Uvh gitlab-ce-<version>.rpm\n如果是第一次安装可以用rpm -ivh gitlab-ce-<version>.rpm\nyum localinstall gitlab-ce-<version>.rpm\n")])])])])])]),e._v(" "),n("li",[n("p",[e._v("解压直接使用 download tar file, and extract, then:")]),e._v(" "),n("ol",[n("li",[e._v("set env variable or persist it in:")])]),e._v(" "),n("p",[e._v("​\te.g. export PATH=$PATH:/usr/local/go/bin")]),e._v(" "),n("p",[e._v("​\ti) 特定用户的PATH  ~/bashrc  ~/bash_profile")]),e._v(" "),n("p",[e._v("​\tii) system wide全局PATH /etc/profile或/root/.bashrc")]),e._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[n("p",[e._v("or just mv it into /usr/local/bin/")])]),e._v(" "),n("li",[n("p",[e._v("or link")])])]),e._v(" "),n("p",[e._v("​\t"),n("code",[e._v("cd /usr/bin sudo ln -s /home/lyhistory/.local/bin/tldr tldr")]),e._v(" OR")]),e._v(" "),n("p",[e._v("​\t"),n("code",[e._v("sudo ln -sf /usr/local/share/$PHANTOM_JS/bin/phantomjs /usr/local/bin")])]),e._v(" "),n("p",[e._v("缺点: if there is dependencies, you have to manually install them")])]),e._v(" "),n("li",[n("p",[e._v("源码编译安装")]),e._v(" "),n("p",[e._v("configuration或cmake之后make install，通常安装的路径在 install_manifest.txt，所以删除方式："),n("code",[e._v("cat install_manifest.txt | xargs echo sudo rm | sh")])])])]),e._v(" "),n("p",[e._v("常见问题：")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("前面几种安装方法的比较：rpm -ivh -uvh VS yum install vs yum localinstall")]),e._v(" "),n("p",[e._v("[https://serverfault.com/questions/825320/difference-between-rpm-ivh-package-and-yum-install-package#:~:text=there%20is%20no%20difference%20if,works%20with%20file(s).](https://serverfault.com/questions/825320/difference-between-rpm-ivh-package-and-yum-install-package#:~:text=there is no difference if,works with file(s).)")])]),e._v(" "),n("li",[n("p",[e._v("安装后管理")]),e._v(" "),n("ul",[n("li",[e._v('rpm包安装的，可以用rpm -qa | grep "软件或者包的名字"。')]),e._v(" "),n("li",[e._v('deb包安装的，可以用dpkg -l | grep "软件或者包的名字"；')]),e._v(" "),n("li",[e._v('yum方法安装的，可以用yum list installed | grep "软件名或者包名"；')]),e._v(" "),n("li",[e._v('apt方法安装的，apt list --installed|grep "TEXT"')]),e._v(" "),n("li",[e._v("如果是以源码包自己编译安装的，例如.tar.gz或者tar.bz2形式的，这个只能看可执行文件是否存在了，如果是以root用户安装的，可执行程序通常都在/sbin:/usr/bin目录下。")])])]),e._v(" "),n("li",[n("p",[e._v("安装后找不到命令，因为安装的位置不在系统path上，可以参考上面的“解压后使用”的方式中的，link或设置环境变量方式来搞；")])])]),e._v(" "),n("h3",{attrs:{id:"apt"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#apt"}},[e._v("#")]),e._v(" apt")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('apt vs apt-get\napt update\napt upgrade / apt full-upgrade\napt search "PKG"\napt list --installed | grep "PKG"\n\n')])])]),n("h3",{attrs:{id:"yum"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#yum"}},[e._v("#")]),e._v(" yum")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("yum history\nyum history info 21\n")])])]),n("h2",{attrs:{id:"基础服务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基础服务"}},[e._v("#")]),e._v(" 基础服务")]),e._v(" "),n("h3",{attrs:{id:"网络"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#网络"}},[e._v("#")]),e._v(" 网络")]),e._v(" "),n("p",[n("strong",[e._v("Ubuntu")])]),e._v(" "),n("p",[e._v("注意,对于Ubuntu 17.10 switched from ifupdown (which uses the /etc/network/interfaces file) to netplan,")]),e._v(" "),n("p",[e._v("所以新版本已经找不到 /etc/network/interfaces")]),e._v(" "),n("p",[e._v("netplan貌似只是个接口: https://netplan.io/examples/")]),e._v(" "),n("p",[e._v("具体的控制还是: NetworkManager 和 networkd, 其中desktop版本默认是 NetworkManager，而对于无UI的server版本只能用networkd\nhttps://askubuntu.com/questions/1031439/am-i-running-networkmanager-or-networkd")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("To configure netplan, save configuration files under /etc/netplan/ with a .yaml extension (e.g. /etc/netplan/config.yaml), then run sudo netplan apply. This command parses and applies the configuration to the system. Configuration written to disk under /etc/netplan/ will persist between reboots.\n\n---------------------------------------------------------\n对于NetworkManager:\n---------------------------------------------------------\nFirst any interfaces defined in /etc/network/interfaces are ignored by network-manager. (man 5 NetworkManager)\nsystemctl status network-manager\n\nvim /etc/netplan/01-network-manager-all.yaml\n# Let NetworkManager manage all devices on this system\nnetwork:\n  version: 2\n  renderer: NetworkManager       \n\nUI是使用NetworkManager,所以直接打开控制面板来设置静态IP和DNS即可\naddress 192.168.0.109\nnetmask 255.255.255.0\ngateway 192.168.0.1\nDNS: 8.8.8.8\n设置完等一会即可    \n\n---------------------------------------------------------\n对于Networkd：\n---------------------------------------------------------\nsystemd-networkd will only manage network addresses and routes for any link for which it finds a .network file with an appropriate [Match] section. (man 8 systemd-networkd).\nsystemctl status systemd-netword\n\nvim /etc/netplan/01-network-manager-all.yaml\nnetwork:\n    version: 2\n    renderer: networkd\n    ethernets:\n        enp3s0:\n            dhcp4: true\n\n")])])]),n("p",[n("strong",[e._v("Debain based : Kali")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("--- for debain:\n配置静态ip\n/etc/network/interfaces：\n#auto eth0\n#iface eth0 inet dhcp\nauto eth0\niface eth0 inet static\naddress 192.168.0.109\nnetmask 255.255.255.0\ngateway 192.168.0.1\n\nsudo ifdown eth0\nsudo ifup eth0\nor\nsudo /etc/init.d/networking restart\n\n如果还是无法上网（上面172.17.5.36是某ISP提供的，貌似虚拟机无法用）：\n/etc/resolv.conf\nnameserver 8.8.8.8\n\nsudo systemctl restart systemd-resolved.service\n\n解决后看下当前路由情况：\nroute -n\n\n#Verify new IP settings:\nip a s eth0\n#Verify new routing settings:\nip r\n#Verify DNS servers settings:\ncat /etc/resolv.conf\n#Verify the internet connectivity:\nping -c 4 google.com\n\nroot@kali:/home/lyhistory# ip -4 addr\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\n    inet 192.168.0.109/24 brd 192.168.0.255 scope global eth0\n       valid_lft forever preferred_lft forever\n\nroot@kali:/home/lyhistory# ip route\ndefault via 192.168.0.1 dev eth0 onlink \n192.168.0.0/24 dev eth0 proto kernel scope link src 192.168.0.109 \n")])])]),n("p",[n("strong",[e._v("Centos")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("--- for centos\nvim /etc/sysconfig/network-scripts/ifcfg-eth0\nHWADDR=00:08:A2:0A:BA:B8\nTYPE=Ethernet\n#BOOTPROTO=dhcp\nBOOTPROTO=none\t\n# Server IP #\nIPADDR=192.168.0.110\n# Subnet #\nPREFIX=24\n# Set default gateway IP #\nGATEWAY=192.168.0.1\n# Set dns servers #\nDNS1=8.8.8.8\nDEFROUTE=yes\nIPV4_FAILURE_FATAL=no\n# Disable ipv6 #\nIPV6INIT=no\nNAME=eth0\n# This is system specific and can be created using 'uuidgen eth0' command #\nUUID=41171a6f-bce1-44de-8a6e-cf5e782f8bd6\nDEVICE=eth0\nONBOOT=yes\n\nsystemctl restart network\n\n\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);