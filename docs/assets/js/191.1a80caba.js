(window.webpackJsonp=window.webpackJsonp||[]).push([[191],{620:function(e,t,n){"use strict";n.r(t);var a=n(56),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("https://developer.chrome.com/extensions/overview")]),e._v(" "),n("p",[e._v("##0X00 chrome extension基础")]),e._v(" "),n("p",[e._v("chrome插件本质就是一堆HTML,CSS,JavaScript和一些配置文件的集合，可以拓展用户的浏览器体验")]),e._v(" "),n("p",[e._v("chrome://extensions")]),e._v(" "),n("ul",[n("li",[e._v("Manifest")])]),e._v(" "),n("p",[e._v("Json格式的文件，声明基本的版本，权限，图标，browser action或page action，background脚本")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('{\n    "name": "Getting Started Example",\n    "version": "1.0",\n    "description": "Build an Extension!",\n    "permissions": ["activeTab", "declarativeContent", "storage"],\n    "background": {\n        "scripts": ["background.js"],\n        "persistent": false\n    },\n    "page_action": {\n        "default_popup": "popup.html",\n        "default_icon": {\n            "16": "images/get_started16.png",\n            "32": "images/get_started32.png",\n            "48": "images/get_started48.png",\n            "128": "images/get_started128.png"\n        }\n    },\n    "icons": {\n        "16": "images/get_started16.png",\n        "32": "images/get_started32.png",\n        "48": "images/get_started48.png",\n        "128": "images/get_started128.png"\n    },\n    "options_page": "options.html",\n    "manifest_version": 2\n  }\n')])])]),n("ul",[n("li",[e._v("Background Script")])]),e._v(" "),n("p",[e._v("插件的事件处理器，基本包括browser listener，比如插件安装事件，页面变化事件，快捷键监听事件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("background.js:\nchrome.runtime.onInstalled.addListener(function() {\n  chrome.storage.sync.set({color: '#3aa757'}, function() {\n    console.log(\"The color is green.\");\n  });\n  chrome.declarativeContent.onPageChanged.removeRules(undefined, function() {\n    chrome.declarativeContent.onPageChanged.addRules([{\n      conditions: [new chrome.declarativeContent.PageStateMatcher({\n        pageUrl: {hostEquals: 'developer.chrome.com'},\n      })\n      ],\n          actions: [new chrome.declarativeContent.ShowPageAction()]\n    }]);\n  });\n});\n")])])]),n("ul",[n("li",[e._v("UI Elements")])]),e._v(" "),n("p",[e._v("插件的用户界面，通常插件都有browser action或page action，不过也可以有其他形式的用户界面，比如context menu菜单，omnibox，甚至可以没有用户界面，比如只用快捷键keyboard shortcut；\n通常默认界面我们叫popup.html，一般包含普通的html，插件也可以调用tabs.create或window.open()显示额外的更丰富的用户界面；\n默认我们是在manifest里面通过browser action或page action定义好popup.html，除此之外，我们还允许通过 chrome.declarativeContent API来做更多自定义rules控制")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('popup.html:\n<body>\n    <button id="changeColor"></button>\n    <script src="popup.js"><\/script>\n  </body>\n')])])]),n("ul",[n("li",[e._v("Content Script")])]),e._v(" "),n("p",[e._v("插件读写操作web页面dom就是利用这个content script，这个脚本就是将javascript装载到web页面的上下文中运行，可见content script和上面的其他script上下文是不同的，他们可以交互吗？可以，就是通过chrome.storage API")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("popup.js\nchrome.tabs.executeScript(targetTabID, {\n      file: '/scripts/content_script.js',\n      allFrames: true\n    });\n")])])]),n("ul",[n("li",[e._v("Option Page")])]),e._v(" "),n("p",[e._v("这个是额外选项，默认安装的extension只有一个background的view可以inpsect，这个是额外的选项可以让用户直接做相应的设置，比如让用户选择需要的功能，这个需要在manifest中定义好options_page；\n当然从前面的popup页面中也可以设置，只不过这里提供了另外一种方式；")]),e._v(" "),n("p",[e._v("还需要注意chromeAPI基本都是异步的，所以如果你的代码逻辑有依赖，需要放到callback里面")]),e._v(" "),n("p",[e._v("##0X01 我遇到的问题")]),e._v(" "),n("p",[e._v('首先我想加入一个快捷键功能，不用鼠标点来点去，很简单，manifest加入\n"commands": {\n"your-command-name": {\n"suggested_key": {\n"default": "Ctrl+X"')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v('  },\n  "description": ""\n\n}\n')])])]),n("p",[e._v('},\n然后background.js：\nchrome.commands.onCommand.addListener(function(command) {\nif(command === "your-command-name") {\n//to implement')]),e._v(" "),n("p",[e._v("....")]),e._v(" "),n("p",[e._v("另外我更改的开源的插件都只能在该tab页面打开一个poppup窗口，")]),e._v(" "),n("p",[n("img",{attrs:{src:"/docs/docs_image/software/webdev/chrom_extension02.png",alt:""}})]),e._v(" "),n("p",[e._v("我老婆之前用的比较好的一个插件是可以开启新tab操作别的tab窗口内容，我自己试了下")]),e._v(" "),n("p",[e._v('Cannot access contents of url "chrome-extension://l". Extension manifest must request permission to access this host.\n原来操作tabs还是要加权限的\n但是我不太明白新开tab之后如何在之前的tab也就是target页面上加载执行脚本，所以参考了下别人的插件，开发者模式下chrome这里有个很好的debug功能，可以直接点击inspect，设置脚本断点，当然默认是minified一行脚本，可以点击{}格式化一下：')]),e._v(" "),n("p",[n("img",{attrs:{src:"/docs/docs_image/software/webdev/chrom_extension01.png",alt:""}})]),e._v(" "),n("p",[e._v("参考主要逻辑如下：\n默认popup页面加载：")]),e._v(" "),n("p",[e._v("拿到你想要操作的tab即targetTab")]),e._v(" "),n("p",[e._v("var tabId=targetTab.id;\nchrome.storage.sync.set({'targetTabID': tabId}, function() {\nchrome.tabs.create({\nurl: chrome.extension.getURL(\"你的新tab页面\")\n}, function(a) {\ntargetTab(a);\n});\n新tab页面加载：")]),e._v(" "),n("p",[e._v("chrome.storage.sync.get(['targetTabID'], function(result) {\nchrome.tabs.executeScript(result.targetTabID, {\nfile: '/scripts/"),n("YOUR",{attrs:{SCRIPTS:""}},[e._v("',\nallFrames: true")])],1),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("});\n")])])]),n("p",[e._v("});")]),e._v(" "),n("p",[n("img",{attrs:{src:"/docs/docs_image/software/webdev/chrom_extension03.png",alt:""}})]),e._v(" "),n("disqus")],1)}),[],!1,null,null,null);t.default=s.exports}}]);