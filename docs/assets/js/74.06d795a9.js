(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{275:function(e,n,t){"use strict";t.r(n);var s=t(0),a=Object(s.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[e._v("#")]),e._v(" 简介")]),e._v(" "),t("p",[e._v("Nginx 和 Apache 各有什么优缺点？ https://www.zhihu.com/question/19571087")]),e._v(" "),t("h2",{attrs:{id:"安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[e._v("#")]),e._v(" 安装")]),e._v(" "),t("p",[e._v("https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-open-source/")]),e._v(" "),t("p",[e._v("包安装：yum install apt install")]),e._v(" "),t("p",[e._v("手动按照：")]),e._v(" "),t("p",[t("a",{attrs:{href:"http://pcre.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("PCRE"),t("OutboundLink")],1),e._v(" – Supports regular expressions. Required by the NGINX "),t("a",{attrs:{href:"https://nginx.org/en/docs/ngx_core_module.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Core"),t("OutboundLink")],1),e._v(" and "),t("a",{attrs:{href:"https://nginx.org/en/docs/http/ngx_http_rewrite_module.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Rewrite"),t("OutboundLink")],1),e._v(" modules.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.44.tar.gz\n$ tar -zxf pcre-8.44.tar.gz\n$ cd pcre-8.44\n$ ./configure\n$ make\n$ sudo make install\n")])])]),t("p",[t("a",{attrs:{href:"https://www.zlib.net/",target:"_blank",rel:"noopener noreferrer"}},[e._v("zlib"),t("OutboundLink")],1),e._v(" – Supports header compression. Required by the NGINX "),t("a",{attrs:{href:"https://nginx.org/en/docs/http/ngx_http_gzip_module.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Gzip"),t("OutboundLink")],1),e._v(" module.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ wget http://zlib.net/zlib-1.2.11.tar.gz\n$ tar -zxf zlib-1.2.11.tar.gz\n$ cd zlib-1.2.11\n$ ./configure\n$ make\n$ sudo make install\n")])])]),t("p",[t("a",{attrs:{href:"https://www.openssl.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("OpenSSL"),t("OutboundLink")],1),e._v(" – Supports the HTTPS protocol. Required by the NGINX "),t("a",{attrs:{href:"https://nginx.org/en/docs/http/ngx_http_ssl_module.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("SSL"),t("OutboundLink")],1),e._v(" module and others.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("方法一：\n$ wget http://www.openssl.org/source/openssl-1.1.1g.tar.gz\n$ tar -zxf openssl-1.1.1g.tar.gz\n$ cd openssl-1.1.1g\n$ ./Configure darwin64-x86_64-cc --prefix=/usr\n$ make\n$ sudo make install\n\n方法二：\nyum -y install pcre  pcre-devel zlib  zlib-devel openssl openssl-devel\n")])])]),t("p",[e._v("nginx")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ wget https://nginx.org/download/nginx-1.18.0.tar.gz\n$ tar zxf nginx-1.18.0.tar.gz\n$ cd nginx-1.18.0\n\n如果使用前面openssl方法一：\n# ./configure --with-http_ssl_module --with-openssl=/opt/openssl-1.0.0s\n方法二：\n# ./configure --with-http_ssl_module\n\n# make\n# sudo make install\n\n# vim /usr/local/nginx/conf/nginx.conf\n\nworker_processes  8;\nevents {\n    worker_connections  1024;\n}\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n\n    server {\n        listen       80;\n        server_name  localhost;\n        rewrite ^(.*)https://$server_name$1 permanent;\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n}\n\n启动\n$ /usr/local/nginx/sbin/nginx\n停止\n$ /usr/local/nginx/sbin/nginx -s quit\n重启\n$ /usr/local/nginx/sbin/nginx -s reload\n\n")])])]),t("p",[e._v("/usr/local/nginx/conf/nginx.conf")]),e._v(" "),t("p",[e._v("/usr/local/nginx/html")]),e._v(" "),t("p",[e._v("/usr/local/nginx/sbin/nginx")]),e._v(" "),t("h2",{attrs:{id:"语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[e._v("#")]),e._v(" 语法")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("--- 变量 Variables\nhttps://nginx.org/en/docs/varindex.html\nThe $http_upgrade use the value from client header upgrade, in nginx conf, $http_HEADER get the HEADER from client.\n\n--- map\nmap $args $foo {\n    default 0;\n    debug   1;\n}\n$args 是nginx内置变量，就是获取的请求 url 的参数。 如果 $args 匹配到 debug 那么 $foo 的值会被设为 1 ，如果 $args 一个都匹配不到 $foo 就是default 定义的值，在这里就是 0\nhttps://www.cnblogs.com/cangqinglang/p/12174407.html\n")])])]),t("h2",{attrs:{id:"配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[e._v("#")]),e._v(" 配置")]),e._v(" "),t("h3",{attrs:{id:"https"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#https"}},[e._v("#")]),e._v(" HTTPS")]),e._v(" "),t("p",[e._v("官方：")]),e._v(" "),t("p",[e._v("https://nginx.org/en/docs/http/configuring_https_servers.html")]),e._v(" "),t("p",[e._v("centos：")]),e._v(" "),t("p",[e._v("https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-nginx-on-centos-7")]),e._v(" "),t("p",[e._v("Ubuntu：")]),e._v(" "),t("p",[e._v("https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-nginx-in-ubuntu-16-04")]),e._v(" "),t("p",[e._v("如果前面安装的时候忘记添加openssl模块")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" ./configure --with-http_ssl_module --with-openssl=/opt/openssl-1.0.0s\n")])])]),t("p",[e._v("可以动态添加：")]),e._v(" "),t("p",[e._v("https://www.cnblogs.com/zoulixiang/p/10196671.html")]),e._v(" "),t("p",[e._v("即按照前面的方法安装openssl并执行 config，之后执行make，但是不要执行make install，直接覆盖新编译的nginx")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("cp /usr/local/nginx/sbin/nginx nginx.bk\ncp /nginx  /usr/local/nginx/sbin/nginx \n")])])]),t("p",[e._v("生成nginx秘钥（生产环境需要购买正版）")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("---------------------------------------------------------------------------------\n--- 这是一种方法\n---------------------------------------------------------------------------------\nFirst, you should have a non-root user configured with sudo privileges\n\nsudo mkdir /etc/ssl/privatekey\nsudo chmod 700 /etc/ssl/privatekey\n \nsudo openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout /etc/ssl/privatekey/nginx-selfsigned.key -out /etc/ssl/certs/nginx-selfsigned.crt\n\nCountry Name (2 letter code) [XX]:SG\nState or Province Name (full name) []:\nLocality Name (eg, city) [Default City]:\nOrganization Name (eg, company) [Default Company Ltd]:APEX\nOrganizational Unit Name (eg, section) []:IT\nCommon Name (eg, your name or your server's hostname) []:10.136.100.48\nEmail Address []:tech-mgmt@asiapacificex.com\n\n-nodes: This tells OpenSSL to skip the option to secure our certificate with a passphrase. We need Nginx to be able to read the file, without user intervention, when the server starts up. A passphrase would prevent this from happening because we would have to enter it after every restart.\n-newkey rsa:2048: This specifies that we want to generate a new certificate and a new key at the same time. We did not create the key that is required to sign the certificate in a previous step, so we need to create it along with the certificate. The rsa:2048 portion tells it to make an RSA key that is 2048 bits long.\n\n创建一个跟客户端进行key exchange协商的秘钥：\nsudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\n\n---------------------------------------------------------------------------------\n--- 这是另一种方法\n---------------------------------------------------------------------------------\n\n1. 使用root用户登录，生成一个ssl.key，命令如下\n# openssl genrsa -des3 -out ssl.key 1024\n2.输入密码，密码输入后再删除，命令如下\n# mv ssl.key xxx.key\n# openssl rsa -in xxx.key -out ssl.key\n# rm xxx.key\n3.根据生成的ssl.key再生成证书请求文件，命令如下\n# openssl req -new -key ssl.key -out ssl.csr\n4.按提示输入信息，可随便输入\n5.根据这两个文件生成最终的crt证书文件，命令如下\n# openssl x509 -req -days 3650 -in ssl.csr -signkey ssl.key -out ssl.crt\n6.拷贝文件至/usr/local/nginx/conf目录中\n# cp ssl.key /usr/local/nginx/conf\n# cp ssl.crt /usr/local/nginx/conf\n\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("sudo vim /usr/local/nginx/conf/nginx.conf:\ninclude /usr/local/nginx/conf/ssl.conf\n\nsudo vim /usr/local/nginx/conf/ssl.conf:\n\n---------------------------------------------------------------------------------\n--- 同时支持http https\n---------------------------------------------------------------------------------\n\nserver {\n\tlisten       80;\n    listen 443 http2 ssl;\n    listen [::]:443 http2 ssl;\n\n    server_name server_IP_address;\n\n    ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;\n    ssl_certificate_key /etc/ssl/privatekey/nginx-selfsigned.key;\n    ssl_dhparam /etc/ssl/certs/dhparam.pem;\n}\n\n---------------------------------------------------------------------------------\n--- 强制 https\n---------------------------------------------------------------------------------\nserver {\n        listen       80;\n        server_name  test.local;\n\t\trewrite ^/(.*) https://$server_name$request_uri? permanent;\n\t}\n\t\nsudo /usr/local/nginx/sbin/nginx -t\n")])])]),t("h3",{attrs:{id:"wss"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#wss"}},[e._v("#")]),e._v(" WSS")]),e._v(" "),t("p",[e._v("https://nginx.org/en/docs/http/websocket.html")]),e._v(" "),t("p",[e._v("By default, the connection will be closed if the proxied server does not transmit any data within 60 seconds. This timeout can be increased with the "),t("a",{attrs:{href:"https://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_read_timeout",target:"_blank",rel:"noopener noreferrer"}},[e._v("proxy_read_timeout"),t("OutboundLink")],1),e._v(" directive. Alternatively, the proxied server can be configured to periodically send WebSocket ping frames to reset the timeout and check if the connection is still alive.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("--------------------------------------------------------------\n--- 标准设置\n--------------------------------------------------------------\nlocation /chat/ {\n    proxy_pass http://backend;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n}\n\n--------------------------------------------------------------\n--- 自定义变量\n--------------------------------------------------------------\nhttp {\n    map $http_upgrade $connection_upgrade {\n        default upgrade; //如果client发生request的header含有Upgrade，则赋值变量connection_upgrade=upgrade\n        ''      close;\t //否则则赋值变量connection_upgrade=close\n    }\n\n    server {\n        ...\n\n        location /chat/ {\n            proxy_pass http://backend;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection $connection_upgrade; //使用上面map的变量\n        }\n    }\n    \n")])])]),t("h3",{attrs:{id:"其他"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[e._v("#")]),e._v(" 其他")]),e._v(" "),t("p",[e._v("enable list files : autoindex on 注意location写法")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('server {\n        listen        80;\n        server_name  ctf.local;\n        root   "E:/workspace/WWW/ctf.local";\n        location / {\n            index index.php index.html error/index.html;\n            error_page 400 /error/400.html;\n            error_page 403 /error/403.html;\n            error_page 404 /error/404.html;\n            autoindex  off;\n        }\n        location ~ \\.php(.*)$ {\n            fastcgi_pass   127.0.0.1:9000;\n            fastcgi_index  index.php;\n            fastcgi_split_path_info  ^((?U).+\\.php)(/?.+)$;\n            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n            fastcgi_param  PATH_INFO  $fastcgi_path_info;\n            fastcgi_param  PATH_TRANSLATED  $document_root$fastcgi_path_info;\n            include        fastcgi_params;\n        }\n        location ~ /.* {\n            autoindex on;\n        }\n}\n\n')])])]),t("p",[e._v("internal")]),e._v(" "),t("p",[e._v("https://www.cnblogs.com/lowmanisbusy/p/11718345.html")]),e._v(" "),t("p",[e._v("Nginx常见基本配置---upstream 使用指南")]),e._v(" "),t("p",[e._v("https://blog.csdn.net/LL845876425/article/details/97621365")]),e._v(" "),t("p",[e._v("what is the difference between proxy_request_buffering and proxy_buffering on nginx?")]),e._v(" "),t("p",[e._v("https://serverfault.com/questions/741610/what-is-the-difference-between-proxy-request-buffering-and-proxy-buffering-on-ng")]),e._v(" "),t("p",[t("strong",[e._v("切换 root路径 从默认的相对路径 到 绝对路径")])]),e._v(" "),t("p",[e._v("出现 (13: permission denied)")]),e._v(" "),t("p",[e._v("https://stackoverflow.com/questions/25774999/nginx-stat-failed-13-permission-denied")]),e._v(" "),t("p",[e._v("方法一 更改默认用户为root")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("user  root;\nworker_processes  1;\n")])])]),t("p",[e._v("方法二 添加文件权限给这个用户nobody或者将用户加到相应group")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("user  nobody;\nworker_processes  1;\n")])])]),t("p",[e._v("windows path")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('location /test {\n\t\t\talias "C:/Workspace/task/setup/nginx-1.17.6/conf/test/";\n\t\t}\n')])])])])}),[],!1,null,null,null);n.default=a.exports}}]);