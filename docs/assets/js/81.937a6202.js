(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{531:function(t,e,a){"use strict";a.r(e);var n=a(65),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[a("a",{attrs:{href:"/docs/blockchain"}},[t._v("回目录")]),t._v("  《以太坊：solidity》")]),t._v(" "),a("h2",{attrs:{id:"_1-basis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-basis"}},[t._v("#")]),t._v(" 1. Basis")]),t._v(" "),a("h3",{attrs:{id:"_1-1-structure"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-structure"}},[t._v("#")]),t._v(" 1.1 Structure")]),t._v(" "),a("p",[t._v("State variable\nFunction\nFunction modifier\nEvents")]),t._v(" "),a("h3",{attrs:{id:"_1-2-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-type"}},[t._v("#")]),t._v(" 1.2 Type:")]),t._v(" "),a("p",[a("strong",[t._v("Elementary types：")])]),t._v(" "),a("p",[t._v("Enum type")]),t._v(" "),a("p",[t._v("Uint256 uint512\nFixed size byte array: Bytes4 bytes32\nDynamic sized: bytes, string\nhttps://ethfiddle.com/XgOiXL2gfs\nRational and Integer Literals\nHexadecimal Literals\nString Literals")]),t._v(" "),a("p",[t._v("Function types：\nInternal\nExternal\n"),a("img",{attrs:{src:"/docs/docs_image/blockchain/eth/eth_solidity01.png",alt:""}}),t._v("\nhttps://gist.github.com/lyhistory/a67e4b40f31e294678a1ccf93337fa36")]),t._v(" "),a("p",[t._v("Reference Types and Value Types:")]),t._v(" "),a("p",[t._v("Currently, reference types comprise structs, arrays and mappings. If you use a reference type, you always have to explicitly provide the data area where the type is stored:memory(whose lifetime is limited to a function call),storage(the location where the state variables are stored) or calldata(special datalocation that contains the function arguments, only available for external function call parameters).")]),t._v(" "),a("p",[t._v("Data location：")]),t._v(" "),a("p",[t._v("Assignments between storage and memory (or from calldata) always create an independent copy. Assignments from memory to\nmemory only create references, Assignments from storage to a local storage variables also only assign a reference\nhttps://gist.github.com/lyhistory/a17ec9bc21a8fe85ff832de8f24b060f")]),t._v(" "),a("p",[t._v("Struct type\nhttps://gist.github.com/lyhistory/b163f41299b87bb363e2cceba6004666\nMap type\nhttps://gist.github.com/lyhistory/259283f6d6bc078c1accfa2d74ce02dc")]),t._v(" "),a("p",[a("strong",[t._v("Address type")])]),t._v(" "),a("p",[t._v("Address literal: Address vs address payable\naddr.transfer() vs send")]),t._v(" "),a("p",[t._v('Add a "safe way to send ether" i.e. address.transfer https://github.com/ethereum/solidity/issues/610\nTransfer, send, payable fallback\nhttps://medium.com/daox/three-methods-to-transfer-funds-in-ethereum-by-means-of-solidity-5719944ed6e9')]),t._v(" "),a("p",[a("img",{attrs:{src:"/docs/docs_image/blockchain/eth/eth_solidity02.png",alt:""}})]),t._v(" "),a("p",[t._v("Warning:\nYou should avoid using.call()whenever possible when executing another contract function as it bypasses type checking, function existence check, and argument packing.\nWarning:\nThere are some dangers in using send: The transfer fails if the call stack depth is at 1024 (this can always be  forced by the caller) and it also fails if the recipient runs out of gas. So in order to make safe Ether transfers, always check the return value of send, use transfer or even better: Use a pattern where the recipient withdraws the money.\nCall, delegatecall, staticcall\nhttps://gist.github.com/lyhistory/d168c5c69d5a3da8838596bd713e5895\nhttps://ethfiddle.com/Ezu7qNkA1N\nhttps://www.youtube.com/watch?v=esL6N3iF9g8\nhttps://zupzup.org/smart-contract-interaction/")]),t._v(" "),a("p",[t._v("msg.sender.call() https://ethereum.stackexchange.com/questions/42521/what-does-msg-sender-call-do-in-soliditymsg.sender.call() https://ethereum.stackexchange.com/questions/42521/what-does-msg-sender-call-do-in-solidity\naddress.call.value(amount)( ) https://medium.com/daox/three-methods-to-transfer-funds-in-ethereum-by-means-of-solidity-5719944ed6e9")]),t._v(" "),a("p",[a("strong",[t._v("Contract type")])]),t._v(" "),a("p",[t._v("Can convert to address type address(this)")]),t._v(" "),a("p",[a("strong",[t._v("Array")])]),t._v(" "),a("p",[t._v("dynamic Array from Solidity\nhttps://delegatecall.com/questions/workaround-for-return-dynamic-array-from-solidity69924f08-a061-426f-a326-2bed3f566e53\nStore and retrieve data in an array in Solidity https://ethereum.stackexchange.com/questions/57340/store-and-retrieve-data-in-an-array-in-solidity\nCreate a new fixed size array in solidity https://stackoverflow.com/questions/51817121/create-a-new-fixed-size-array-in-solidity\nEthereum Solidity: Memory vs Storage & How to initialize an array inside a struct https://medium.com/loom-network/ethereum-solidity-memory-vs-storage-how-to-initialize-an-array-inside-a-struct-184baf6aa2eb")]),t._v(" "),a("h3",{attrs:{id:"_1-3-operations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-operations"}},[t._v("#")]),t._v(" 1.3 Operations")]),t._v(" "),a("p",[a("strong",[t._v("Delete")])]),t._v(" "),a("p",[t._v("https://gist.github.com/lyhistory/bde8b0a967c7dae1fe7dadf302812e99\ndelete mapping[‘tokenid’]")]),t._v(" "),a("p",[a("strong",[t._v("Conversion")])]),t._v(" "),a("p",[t._v("https://gist.github.com/lyhistory/af1a486fa6ac8464ac5f850ac7404ef0")]),t._v(" "),a("p",[a("strong",[t._v("Bit Operation")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("bytes1 a = 0xb5; // [10110101] \nbytes1 b = 0x56; // [01010110]\nAND\ta & b; // Result: 0x14  [00010100]\nOR\ta | b; // Result: 0xf7  [11110111]\nXOR\ta ^ b; // Result: 0xe3  [11100011]\n\tInteresting property is that if you want to know what was the value of original b, just XOR result with a. In one sense a is the key to unlock b.\n\t0xe3 ^ a; // Result: 0x56 == b  [01010110]\n\nNegation:\n\tan inversion operation usually associated with the character “~” \n\tSolidity doesn’t have support for negate operation. Luckily negation is the same as to XOR input with all 1s.\n\ta ^ 0xff; // Result: 0x4a  [01001010]\n\nLeft Shift:\n\tvar n = 3;\n\tvar aInt = uint8(a); // Converting bytes1 into 8 bit integer\n\tvar shifted = aInt * 2 ** n;\n\tbytes1(shifted); \t// Back to bytes. Result: 0xa8  [10101000]\n\nRight Shift:\n\tvar n = 2;\n\tvar aInt = uint8(a); // Converting bytes1 into 8 bit integer\n\tvar shifted = aInt / 2 ** n;\n\tbytes1(shifted); \t// Back to bytes. Result: 0x2d  [00101101]\n\nGet First N Bits:\n\tWe can create a mask of needed count of 1s in order to filter the part we’re looking for by applying AND operation\n\tvar n = 5;\n\tvar nOnes = bytes1(2 ** n - 1); // Creates 5 1s\n\tvar mask = shiftLeft(nOnes, 8 - n); // Shift left by 3 positions\n\ta & mask; // Result: 0xb0  [10110000]\n\nGet Last N Bits:\n\tvar n = 5;\n\tvar lastBits = uint8(a) % 2 ** n;\n\tbytes1(lastBits); // Result: 0x15  [00010101]\n\nData Packing:\n\tbytes1 c = 0x0d;\n\tbytes1 d = 0x07;\n\tvar result = shiftLeft(c, 4) | d; // 0xd7 [11010111]\n\n")])])]),a("h3",{attrs:{id:"_1-4-unit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-unit"}},[t._v("#")]),t._v(" 1.4 Unit")]),t._v(" "),a("p",[t._v("https://gist.github.com/lyhistory/57beb322a4df936c9f80a20dc4183f8b")]),t._v(" "),a("p",[a("img",{attrs:{src:"/docs/docs_image/blockchain/eth/eth_solidity03.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"_1-5-low-level-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-low-level-functions"}},[t._v("#")]),t._v(" 1.5 Low level functions")]),t._v(" "),a("p",[t._v("Abi\nBytecode\nGet abi by address")]),t._v(" "),a("p",[a("img",{attrs:{src:"/docs/docs_image/blockchain/eth/eth_solidity04.png",alt:""}})]),t._v(" "),a("p",[t._v("?questions: Web3.js Get Contract Abi Knowing Only Contract Address https://ethereum.stackexchange.com/questions/15603/web3-js-get-contract-abi-knowing-only-contract-address?rq=1\nget bytecode of contract at certain address https://www.reddit.com/r/ethdev/comments/6j7yw4/how_do_you_get_bytecode_of_contract_at_certain/")]),t._v(" "),a("h3",{attrs:{id:"_1-6-hash-and-encoding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-hash-and-encoding"}},[t._v("#")]),t._v(" 1.6 Hash and Encoding")]),t._v(" "),a("p",[t._v("Ecrecover\necrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) returns (address)\nSample: https://github.com/davidmichaelakers/ecrecover\nKeccak256   https://github.com/status-im/nim-keccak-tiny/issues/1\nhttps://emn178.github.io/online-tools/keccak_256.html")]),t._v(" "),a("p",[t._v("Keccak256:\nThe Ethereum hashing function, keccak256, sometimes (erroneously) called sha256 or sha3\nkeccak256 is the Ethereum-SHA-3 hash. Look at the Solidity docs under Mathematical and Cryptographic Functions: http://solidity.readthedocs.io/en/develop/units-and-global-variables.html\nIt's for creating random uint256 with the string it been passed in. When you need somthing radomly, you can use it.")]),t._v(" "),a("p",[t._v("abi.encode vs abi.encodePacked\nhttps://medium.com/@libertylocked/what-are-abi-encoding-functions-in-solidity-0-4-24-c1a90b5ddce8")]),t._v(" "),a("p",[a("img",{attrs:{src:"/docs/docs_image/blockchain/eth/eth_solidity05.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"_1-7-errror-handling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-errror-handling"}},[t._v("#")]),t._v(" 1.7 Errror handling")]),t._v(" "),a("p",[t._v("revert throw\nWhen exceptions happen in a sub-call, they “bubble up” (i.e.  exceptions are rethrown) automatically.  Exceptions tothis rule aresendand the low-level functionscall,delegatecallandstaticcall– those returnfalseastheir first return value in case of an exception instead of “bubbling up”\nNote thatassert-style exceptionsconsume all gas available to the call, whilerequire-style exceptions will not consume any gas starting from theMetropolis release\nAnassert-style exception\nArequire-style exception")]),t._v(" "),a("p",[t._v("https://gist.github.com/lyhistory/f1c92d06c42c65ede2c90c5f6d40c6b4")]),t._v(" "),a("p",[t._v("Does ether transfer consume all gas in case of exception? https://ethereum.stackexchange.com/questions/38605/does-ether-transfer-consume-all-gas-in-case-of-exception")]),t._v(" "),a("h3",{attrs:{id:"_1-8-expressions-and-control-structures-3-4-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-expressions-and-control-structures-3-4-5"}},[t._v("#")]),t._v(" 1.8 Expressions and Control Structures 3.4.5")]),t._v(" "),a("p",[t._v("Function calls(internal and external)")]),t._v(" "),a("p",[t._v("Warning:\nAny interaction with another contract imposes a potential danger, especially if the source code of\nthe contract is not known in advance. The current contract hands over control to the called contract and that\nmay potentially do just about anything. Even if the called contract inherits from a known parent contract, the\ninheriting contract is only required to have a correct interface. The implementation of the contract, however, can\nbe completely arbitrary and thus, pose a danger. In addition, be prepared in case it calls into other contracts of your\nsystem or even back into the calling contract before the first call returns. This means that the called contract can\nchange state variables of the calling contract via its functions. Write your functions in a way that, for example, calls\nto external functions happen after any changes to state variables in your contract so your contract is not vulnerable\nto a reentrancy exploit.\nNamed Calls and Anonymous Function Parameter\nCreating Contracts via new\nDestructuring Assignments and Returning Multiple Values\nComplications for Arrays and Structs\nScoping and Declarations\nhttps://gist.github.com/lyhistory/ab764cc9b000ed54b4f5213c8d5dbfa6")]),t._v(" "),a("h3",{attrs:{id:"_1-9-contract"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-contract"}},[t._v("#")]),t._v(" 1.9 Contract")]),t._v(" "),a("p",[t._v("Create\nContracts can be created “from outside” via Ethereum transactions or from within Solidity contracts.")]),t._v(" "),a("p",[t._v("Visibility and Getters\nModifier: pure view payable Internal external constant\nSince Solidity knows two kinds of function calls (internal ones that do not create an actual EVM call (also called a“message call”) and external ones that do), there are four types of visibilities for functions and state variables.\nThe compiler automatically creates getter functions for all public state variables,The getter functions have external visibility. If the symbol is accessed internally (i.e. without this.), it evaluates to a state variable. If it is accessed externally (i.e. with this.), it evaluates to a function.If you have a public state variable of array type, then you can only retrieve single elements of the array via the generated getter function.for exampledata(0). If you want to return an entire array in one call, then you need to write a function\nview function")]),t._v(" "),a("p",[t._v("pure function\nFunctions can be declaredpurein which case they promise not to read from or modify the state")]),t._v(" "),a("p",[a("strong",[t._v("Fallback function")])]),t._v(" "),a("p",[t._v("Warning:The fallback function is also executed if the caller meant to call a function that is not available.  Ifyou want to implement the fallback function only to receive ether, you should add a check likerequire(msg.data.length == 0)to prevent invalid calls.\nWarning:Contracts that receive Ether directly (without a function call, i.e.  usingsendortransfer) butdo not define a fallback function throw an exception, sending back the Ether (this was different before Solidityv0.4.0). So if you want your contract to receive Ether, you have to implement a payable fallback function\nWarning:A contract without a payable fallback function can receive Ether as a recipient of acoinbase transaction(akaminer block reward) or as a destination of aselfdestruct.A contract cannot react to such Ether transfers and thus also cannot reject them.  This is a design choice of theEVM and Solidity cannot work around it.It also means thataddress(this).balancecan be higher than the sum of some manual accounting imple-mented in a contract (i.e. having a counter updated in the fallback function).")]),t._v(" "),a("p",[t._v("Fallback functions and the fundamental limitations of using send() in Ethereum & Solidity https://github.com/ConsenSys/Ethereum-Development-Best-Practices/wiki/Fallback-functions-and-the-fundamental-limitations-of-using-send()-in-Ethereum-&-Solidity\nhttps://programtheblockchain.com/posts/2017/12/16/be-careful-when-using-the-solidity-fallback-function/\nhttps://ethereum.stackexchange.com/questions/45419/msg-sender-transferpurchaseexcess-failure-in-solidity-test\nhttps://programtheblockchain.com/posts/2017/12/15/writing-a-contract-that-handles-ether/\nhttps://stackoverflow.com/questions/48351077/accepting-ether-in-smart-contract")]),t._v(" "),a("p",[t._v("Function Overloading\nEvents\nInheritance\nConstructors\nMultiple Inheritance and Linearization\nNote that a function without implementation is different from aFunction Typeeven though their syntax looks verysimilar")]),t._v(" "),a("p",[t._v("Interfaces")]),t._v(" "),a("p",[t._v("Types defined inside interfaces and other contract-like structures can be accessed from other contracts (struct, enum..)")]),t._v(" "),a("p",[t._v("Libraries")]),t._v(" "),a("p",[t._v("https://gist.github.com/lyhistory/2976c80aa8772c257df76d936104852e")]),t._v(" "),a("p",[a("strong",[t._v("interact:")]),t._v("\nTx.origin vs msg.sender\nhttps://dappsforbeginners.wordpress.com/tutorials/interactions-between-contracts/\nGet address from newly created Contract\nhttps://gist.github.com/lyhistory/08646fc88d96ecf11680272f098b8924\nhttps://ethfiddle.com/oJR5ovpJTt")]),t._v(" "),a("p",[t._v("Type address is not implicitly convertible to expected type contract ERC20 https://ethereum.stackexchange.com/questions/57030/type-address-is-not-implicitly-convertible-to-expected-type-contract-erc20/57032")]),t._v(" "),a("p",[t._v("Deprecated function address.call.value(amount)( )\nhttps://medium.com/daox/three-methods-to-transfer-funds-in-ethereum-by-means-of-solidity-5719944ed6e9")]),t._v(" "),a("h2",{attrs:{id:"_2-advance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-advance"}},[t._v("#")]),t._v(" 2. Advance")]),t._v(" "),a("h3",{attrs:{id:"_2-1-security"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-security"}},[t._v("#")]),t._v(" 2.1 Security")]),t._v(" "),a("p",[t._v("Common attacks in Solidity and how to defend against them https://medium.com/coinmonks/common-attacks-in-solidity-and-how-to-defend-against-them-9bc3994c7c18")]),t._v(" "),a("p",[a("strong",[t._v("Overflow attack")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("/* Check if sender has balance and for overflows */ if (balanceOf[msg.sender] < _value || balanceOf[_to] + _value < balanceOf[_to]) throw;\n")])])]),a("p",[a("strong",[t._v("re-entrance attacks")])]),t._v(" "),a("p",[t._v("https://ethereum.stackexchange.com/questions/19737/security-implications-in-solidity?noredirect=1")]),t._v(" "),a("p",[t._v("from: https://solidity.readthedocs.io/en/develop/solidity-by-example.html\n"),a("img",{attrs:{src:"/docs/docs_image/blockchain/eth/eth_solidity06.png",alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("Replay attack")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/docs/docs_image/blockchain/eth/eth_solidity07.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"_2-2-learn-to-debug"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-learn-to-debug"}},[t._v("#")]),t._v(" 2.2 Learn to debug")]),t._v(" "),a("p",[t._v("Remix -> Instructions\nhttps://ethereum.stackexchange.com/questions/38605/does-ether-transfer-consume-all-gas-in-case-of-exception")]),t._v(" "),a("p",[t._v("https://ethfiddle.com/z75IN-MXC-\nhttps://ethfiddle.com/IQPrEvR1Jm\nhttps://ethfiddle.com/R4tVnZEiIS\nhttps://ethfiddle.com/nxcIJztXhd")]),t._v(" "),a("h3",{attrs:{id:"_2-3-evm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-evm"}},[t._v("#")]),t._v(" 2.3 EVM")]),t._v(" "),a("p",[t._v("The Ethereum Virtual Machine or EVM is the runtime environment for smart contracts in Ethereum.  It is not onlysandboxed but actually completely isolated, which means that code running inside the EVM has no access to network,filesystem or other processes. Smart contracts even have limited access to other smart contracts.")]),t._v(" "),a("p",[t._v("Storage, Memory and the Stack https://medium.com/coinmonks/what-the-hack-is-memory-and-storage-in-solidity-6b9e62577305\nInstruction Set\nOpcodes")]),t._v(" "),a("p",[t._v("Getting Deep Into EVM: How Ethereum Works Backstage https://hackernoon.com/getting-deep-into-evm-how-ethereum-works-backstage-ac7efa1f0015")]),t._v(" "),a("h3",{attrs:{id:"_2-4-sample"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-sample"}},[t._v("#")]),t._v(" 2.4 Sample")]),t._v(" "),a("p",[t._v("Blind auction")]),t._v(" "),a("p",[t._v("Safe remote purchase")]),t._v(" "),a("p",[t._v("Payment channel\nEIP762\t\thttps://github.com/ethereum/EIPs/pull/712")]),t._v(" "),a("h2",{attrs:{id:"_3-notes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-notes"}},[t._v("#")]),t._v(" 3. Notes")]),t._v(" "),a("p",[t._v("All identifiers (contract names, function names and variable names) are restricted to the ASCII character set.\nIt is possible to store UTF-8 encoded data in string variables\nBe careful with using Unicode text, as similar looking (or even identical) characters can have different\ncode points and as such will be encoded as a different byte array.")]),t._v(" "),a("p",[t._v("If you use this contract to send coins to an address, you will not see anything when you look at that address on\na blockchain explorer, because the fact that you sent coins and the changed balances are only stored in the data storage\nof this particular coin contract. By the use of events it is relatively easy to create a “blockchain explorer” that tracks\ntransactions and balances of your new coin, but you have to inspect the coin contract address and not the addresses of\nthe coin owners")]),t._v(" "),a("p",[t._v("Transactions are not guaranteed to be included in the next block or any specific future block, since it is not up\nto the submitter of a transaction, but up to the miners to determine in which block the transaction is included.\nIf you want to schedule future calls of your contract, you can use the alarm clock or a similar oracle service.")]),t._v(" "),a("p",[t._v("Regardless of whether or not the account stores code, the two types are treated equally by the EVM.\nEvery account has a persistent key-value store mapping 256-bit words to 256-bit words called storage.\nFurthermore, every account has a balance in Ether (in “Wei” to be exact,1 ether is 10**18 wei) which can be modifiedby sending transactions that include Ether")]),t._v(" "),a("p",[t._v("While a contract is being created, its code is still empty. Because of that, you should not call back into the\ncontract under construction until its constructor has finished executing")]),t._v(" "),a("p",[a("strong",[t._v("Message call vs Transaction")])]),t._v(" "),a("p",[t._v("Contracts can call other contracts or send Ether to non-contract accounts by the means of message calls. Message calls\nare similar to transactions, in that they have a source, a target, data payload, Ether, gas and return data. In fact, every\ntransaction consists of a top-level message call which in turn can create further message calls\nCalls are limited to a depth of 1024, which means that for more complex operations, loops should be preferred over\nrecursive calls. Furthermore, only 63/64th of the gas can be forwarded in a message call, which causes a depth limit\nof a little less than 1000 in practice.")]),t._v(" "),a("p",[a("strong",[t._v("Delegatecall / Callcode and Libraries")])]),t._v(" "),a("p",[t._v("There exists a special variant of a message call, named delegatecall which is identical to a message call apart from the fact that the code at the target address is executed in the context of the calling contract and msg.sender and msg.value do not change their values.\nThis means that a contract can dynamically load code from a different address at runtime. Storage, current address and balance still refer to the calling contract, only the code is taken from the called address.\nThis makes it possible to implement the “library” feature in Solidity: Reusable library code that can be applied to a contract’s storage, e.g. in order to implement a complex data structure.")]),t._v(" "),a("p",[t._v("Note:\nEven if a contract’s code does not contain a call to selfdestruct, it can still perform that operation using delegatecall or callcode.")]),t._v(" "),a("h2",{attrs:{id:"troubleshooting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#troubleshooting"}},[t._v("#")]),t._v(" troubleshooting")]),t._v(" "),a("p",[t._v("?#empty value (0x) returned from contract\nError or revert in the function\n?# cannot find the function\nBecause it’s an internal function, not public function")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("refer:")]),t._v(" "),a("p",[t._v("The following represents a list of tutorials/resources that could help to learn specifics of developing smart-contracts:")]),t._v(" "),a("ul",[a("li",[t._v("Full guide about smart-contract development: https://blockgeeks.com/guides/solidity/")]),t._v(" "),a("li",[t._v("ICO/DApp development, additional list of useful resources: https://medium.com/@robbertvermeulen/learn-solidity-the-ethereum-smart-contract-programming-language-7f106fc26d6")]),t._v(" "),a("li",[t._v("Official solidity tutorials: https://ethereumbuilders.gitbooks.io/guide/content/en/solidity_tutorials.html")]),t._v(" "),a("li",[t._v("Official solidity documentation: http://solidity.readthedocs.io/en/latest/")])]),t._v(" "),a("disqus")],1)}),[],!1,null,null,null);e.default=s.exports}}]);