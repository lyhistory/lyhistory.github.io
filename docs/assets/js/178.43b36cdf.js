(window.webpackJsonp=window.webpackJsonp||[]).push([[178],{631:function(t,a,e){"use strict";e.r(a);var s=e(65),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"bash-script-vs-shell-script"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bash-script-vs-shell-script"}},[t._v("#")]),t._v(" Bash script VS Shell Script")]),t._v(" "),e("p",[t._v("Bash scripting is scripting specifically for Bash\tShell scripting is scripting in any shell")]),t._v(" "),e("h2",{attrs:{id:"bash-parameter-expansion"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bash-parameter-expansion"}},[t._v("#")]),t._v(" bash parameter expansion")]),t._v(" "),e("p",[t._v("${parameter//find/replace}")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('INSTALL_TARGET_SERVERs=\'IP1,IP2\'\nfor i in ${INSTALL_TARGET_SERVERs//,/ }; do echo "$i"; done\nfor i in ${INSTALL_TARGET_SERVERs//,/$IFS}; do echo "$i"; done\n')])])]),e("h2",{attrs:{id:"bash-variables"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bash-variables"}},[t._v("#")]),t._v(" bash variables")]),t._v(" "),e("p",[t._v("$0、$1、$2、$#、$@、$*、$?")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('./test.sh a b\n$0\t对应 ./test.sh 这个值。如果执行的是 ./work/test.sh， 则对应 ./work/test.sh 这个值\n$1\ta\n$2\tb\n${10} 表示获取第 10 个参数的值\t$10 相当于 ${1}0，也就是先获取 $1 的值，后面再跟上 0\n$#\t2\t对应传入脚本的参数个数，统计的参数不包括 $0\n$@\t会获取到 "a" "b" ，也就是所有参数的列表，不包括 $0。\n$*\ta b 把所有参数合并成一个字符串\t\n$?\t可以获取到执行 ./test.sh a b 命令后的返回值。在执行一个前台命令后，可以立即用 $? 获取到该命令的返回值：\n\t当执行系统自身的命令时，$? 对应这个命令的返回值\n\t当执行 shell 脚本时，$? 对应该脚本调用 exit 命令返回的值。如果没有主动调用 exit 命令，默认返回为 0。 \n\t当执行自定义的 bash 函数时，$? 对应该函数调用 return 命令返回的值。如果没有主动调用 return 命令，默认返回为 0。\n')])])]),e("p",[t._v("The default value of IFS is a three-character string comprising a space, tab, and newline:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('$ echo "$IFS" | cat -et\n ^I$\n$\n\n$ echo "$IFS" | cat -et\n ^I$\n$\n$ string="foo bar foo:bar"\n$ for i in $string; do echo "[$i] extracted"; done\n[foo] extracted\n[bar] extracted\n[foo:bar] extracted\n$ IFS=":"  && echo "$IFS" | cat -et\n:$\n$ for i in $string; do echo "[$i] extracted"; done\n[foo bar foo] extracted\n[bar] extracted\n$ unset IFS  && echo "$IFS" | cat -et\n$\n$ for i in $string; do echo "[$i] extracted"; done\n[foo] extracted\n[bar] extracted\n[foo:bar] extracted\n\n\ninput.csv:\nRecord is : SNo,Quantity,Price,Value\nRecord is : 1,2,20,40\nRecord is : 2,5,10,50\n\n#! /bin/bash\nwhile IFS="," read -r rec1 rec2\ndo\n  echo "Displaying Record-$rec1"\n  echo "Price: $rec2"\ndone < <(cut -d "," -f1,3 input.csv | tail -n +2)\n\n')])])]),e("h2",{attrs:{id:"bash-s-operators"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bash-s-operators"}},[t._v("#")]),t._v(" bash's operators")]),t._v(" "),e("p",[t._v("https://tldp.org/LDP/abs/html/comparison-ops.html")]),t._v(" "),e("div",{staticClass:"language-bsh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("-n\n   string is not null.\n\n-z\n  string is null, that is, has zero length\n  \n|| : \nhttps://superuser.com/questions/1022374/what-does-mean-in-the-context-of-a-shell-script\n")])])]),e("h2",{attrs:{id:"tips"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tips"}},[t._v("#")]),t._v(" tips")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('#list folders only\nls -d */\n\nL_FOLER_LIST=( $(ls -d */ 2>/dev/null) )\necho "$folder list count: ${#L_FOLER_LIST[@]}"\n\n')])])])])}),[],!1,null,null,null);a.default=n.exports}}]);