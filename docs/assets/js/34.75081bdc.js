(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{235:function(e,t,v){"use strict";v.r(t);var _=v(0),r=Object(_.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("p",[v("a",{attrs:{href:"/docs/software"}},[e._v("回目录")]),e._v("  《线程安全》")]),e._v(" "),v("p",[e._v("什么时候需要多线程")]),e._v(" "),v("p",[e._v("1.处理并发，关于并发我说过不一定要用多线程，单线程也可以处理并且效率更高，\n但是实际情况下仅仅靠单线程是不够的，一般是主线程为单线程，加上辅助线程处理；\n另外有时候不算是很高的并发还是用多线程处理比较简便；")]),e._v(" "),v("p",[e._v("比如数据库的连接，\nwebscoket的连接等；")]),e._v(" "),v("p",[e._v("2.需要长时间处理的程序，要开线程放到后台处理，比如生成报告；")]),e._v(" "),v("p",[e._v("多线程自然设计到线程安全问题，根本在于是否存在critical resource竞争资源，\n如果多线程不会访问竞争资源就不存在安全问题，否则则要处理，")]),e._v(" "),v("p",[e._v("volatile和synchronized到底啥区别？多图文讲解告诉你\nhttps://mp.weixin.qq.com/s/MHqXNRI6udI1wGCU0NVBaQ")]),e._v(" "),v("p",[e._v("多线程编程安全最“简单”的方式就是加锁；")]),e._v(" "),v("p",[e._v("另一种方式自然是“不加锁”，网上经常混淆各种概念，总结一下无锁基本两种思路：")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("引入一个有界或无界队列来排队，实际上队列也分为有锁和无锁的，具体可以看我前面写的"),v("a",{attrs:{href:"/docs/software/highlevel/concurrent"}},[e._v("并发控制concurrent")]),e._v("，\n所以相当于把多线程的水龙头对接到一个队列上，把对共享资源的访问通过排队的方式隔离开，至于队列本身的实现同样可以参考我写的并发控制一章，所以多线程安全问题转换成了如何排队的问题；")])]),e._v(" "),v("li",[v("p",[e._v("乐观锁方式比如CAS Atomic https://blog.csdn.net/javazejian/article/details/72772470")])])]),e._v(" "),v("h2",{attrs:{id:"拓展：进程安全"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#拓展：进程安全"}},[e._v("#")]),e._v(" 拓展：进程安全")]),e._v(" "),v("p",[e._v("对于分布式系统来说，同样存在着访问竞争资源的问题，比如最基本的是竞争称为leader，这个一般就需要采用一种“分布式锁”来进行资源保护，")]),e._v(" "),v("p",[e._v("分布式锁的常见实现方式：")]),e._v(" "),v("ul",[v("li",[e._v("基于数据库 select for update")]),e._v(" "),v("li",[e._v("基于redis")]),e._v(" "),v("li",[e._v("基于zookeeper的ephemeral sequential node")])])])}),[],!1,null,null,null);t.default=r.exports}}]);