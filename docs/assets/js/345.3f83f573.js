(window.webpackJsonp=window.webpackJsonp||[]).push([[345],{776:function(e,n,t){"use strict";t.r(n);var a=t(65),o=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[t("a",{attrs:{href:"/docs/software"}},[e._v("回目录")]),e._v("  《java实用基础》")]),e._v(" "),t("h2",{attrs:{id:"_1-java-dev-tools"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-java-dev-tools"}},[e._v("#")]),e._v(" 1. JAVA Dev Tools")]),e._v(" "),t("h3",{attrs:{id:"_1-1-tools"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-tools"}},[e._v("#")]),e._v(" 1.1 Tools")]),e._v(" "),t("ul",[t("li",[e._v("Decompiler")])]),e._v(" "),t("p",[e._v("Reverse class to view code http://java-decompiler.github.io/\n分析JVM\t\nJVisualVM https://www.cnblogs.com/xifengxiaoma/p/9402497.html\nJava ServiceabilityAgent(HSDB)使用和分析\nhttps://liuzhengyang.github.io/2017/05/27/serviceabilityagent/")]),e._v(" "),t("ul",[t("li",[e._v("Linux tools")])]),e._v(" "),t("p",[e._v("strace -ff -o prefix")]),e._v(" "),t("ul",[t("li",[e._v("JDK Tools\n"),t("strong",[e._v("refer<buildingblock/java_jdk>")])])]),e._v(" "),t("p",[e._v("JAVA_HOME/bin/")]),e._v(" "),t("h3",{attrs:{id:"_1-2-ide"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-ide"}},[e._v("#")]),e._v(" 1.2 IDE")]),e._v(" "),t("p",[e._v("IDEA和eclipse各有优缺点，比如eclipse可以在同一个ide实例中操作多个project，而idea只能一个实例开一个project；\n但是IDEA有智能的依赖查询、依赖冲突解决、依赖调试能力，eclipse就稍微麻烦，只能手动操作，举例：\n我在查询一个AutoWired的依赖时，找到了这接口，然后直接找其引用reference是找不到的，可能是因为在不同的jar包中，\n最后是在右键“Open type Hierarchy”找到，而在IDEA中，直接左侧会显示一个i的小图标，点击即可显示“is implemented in”；")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Eclipse/STS\nProject Explorer-> Projects Presentation (select hierarchy)")])]),e._v(" "),t("li",[t("p",[e._v("VSCODE:\nextension: spring tool suite + extension pack for java\nNote: install jdk(Adoptium's Temurin version:"),t("a",{attrs:{href:"https://objects.githubusercontent.com/github-production-release-asset-2e65be/602574963/7688eb32-8658-4c55-9752-5950bc55a06e?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAVCODYLSA53PQK4ZA%2F20240413%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20240413T075318Z&X-Amz-Expires=300&X-Amz-Signature=53fbc7594384f8d586a9d45770a37fb83eaec807ebf128d3bb436e15259a5b9b&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=602574963&response-content-disposition=attachment%3B%20filename%3DOpenJDK21U-jdk_x64_windows_hotspot_21.0.2_13.msi&response-content-type=application%2Foctet-stream",target:"_blank",rel:"noopener noreferrer"}},[e._v("jdk21tls"),t("OutboundLink")],1),e._v(" ) following instructions in welcome page (self installed openjdk may not work!)\nctrl+shift+p: java: config classpath")]),e._v(" "),t("p",[e._v("?#The type java.lang.invoke.StringConcatFactory cannot be resolved. It is indirectly referenced from required .class filesJava\nSOLUTION: clean cache(click to expand the problem and then click fix)\n?# VS Code terminal doesn't recognize PATH variables\nSOLUTION: restart vscode to pick up the env variables updates, if still not work, then print %PATH% to investigate")])])]),e._v(" "),t("h4",{attrs:{id:"_1-2-1-code-style"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-code-style"}},[e._v("#")]),e._v(" 1.2.1 Code Style")]),e._v(" "),t("p",[e._v("统一代码以及配置文件的缩进，以eclipse为例：")]),e._v(" "),t("p",[e._v("1.代码缩进")]),e._v(" "),t("p",[e._v("Window->Preferences->Java->Code Style->Formatter:")]),e._v(" "),t("p",[e._v("Edit Tab Policy: Space only")]),e._v(" "),t("p",[e._v("2.配置xml缩进比如pom")]),e._v(" "),t("p",[e._v("Window->Preferences->XML->XML Files->Editor:")]),e._v(" "),t("p",[e._v("Indent with spaces, Indentation size 4")]),e._v(" "),t("h4",{attrs:{id:"_1-2-2-folder-structure"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-folder-structure"}},[e._v("#")]),e._v(" 1.2.2 Folder structure")]),e._v(" "),t("p",[e._v("**About resources folder\nMissing resources: manually create resources folder in src/main, and then Manve->update project\nsrc/main/resources https://stackoverflow.com/questions/18875635/cant-access-files-from-src-main-resources-via-a-test-case")]),e._v(" "),t("p",[e._v('New Maven project -> Tick "Create a simple project(skip archetype selection) [auto create resource folder]\nhttps://stackoverflow.com/questions/49351806/eclipse-adds-an-exclusion-pattern-of-to-src-main-resources-how-to-read-a-res')]),e._v(" "),t("p",[e._v("**Missing src/test/java\nmanual add in file system, then in java build path, remove first, then Add Folder")]),e._v(" "),t("h4",{attrs:{id:"_1-2-3-compiler"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-compiler"}},[e._v("#")]),e._v(" 1.2.3 Compiler")]),e._v(" "),t("p",[e._v("**default compiler & project build path & runtime/debug JRE& compiler compliance\nSet project compiler compliance settings to 1.7 Set project JRE build path entry to 'JavaSE-1.7' https://docs.infor.com/help_m3_coreit_13.4/index.jsp?topic=%2Fcom.lawson.help.administration%2Fcom.lawson.help.makag-w_10.1.2%2FL157071229479555.html")]),e._v(" "),t("p",[e._v("java->Compiler/Installed JREs")]),e._v(" "),t("p",[e._v("run config-> maven build->maven debug-> jre")]),e._v(" "),t("p",[e._v("show jdk version that maven dependent on: mvn -version")]),e._v(" "),t("h4",{attrs:{id:"_1-2-4-debug"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-4-debug"}},[e._v("#")]),e._v(" 1.2.4 Debug")]),e._v(" "),t("p",[t("strong",[e._v("基本debug技巧：")])]),e._v(" "),t("p",[e._v("1).调试依赖比如maven dependencies的时候，注意在eclipse里面设置断点有可能不生效，因为debugger view下会有很多空行，技巧是多设置一些断点，调试起来之后再在debugger view下设置断点\n2).比如pom.xml在eclipse里面可以查看Dependency hierarchy view，可以比较清晰的看到所有依赖的层级关系\n3).右键 quick outline\n4).右键 Open type Hierarchy，可以显示依赖中的接口实现\n5).选中class名字，然后Ctrl+shift+T，或者从菜单Navigate->Open Type，可以显示这个class是在哪个jar包中，及其物理位置；")]),e._v(" "),t("p",[t("strong",[e._v("runnable jar")]),e._v("\nright click Main.java=>export Runnable JAR file=>Launch configuration(select Main)")]),e._v(" "),t("p",[t("strong",[e._v("Remote Debug(attach jar)：")])]),e._v(" "),t("p",[e._v("https://stackoverflow.com/questions/6855520/attach-debugger-to-application-using-eclipse/23297651\nDebug Configurations:\nRemote Java Application->Connect: Remote Host & Port\n&\nRemote Java Application->Source: Add Source code (& dependencies sourcecode if needed)\nthen Start jar and expose port:\njava -Xdebug -Xrunjdwp:transport=dt_socket,address=127.0.0.1:8008,server=y,suspend=y -jar target\\test.jar")]),e._v(" "),t("p",[e._v('For remote debug war hosting in remote tomcat:\nvim /etc/tomcat/tomcat.conf\nJAVA_OPTS or CATALINA_OPTS="-Xdebug -Xrunjdwp:transport=dt_socket,address=10001,server=y,suspend=n"\nFailed using port 8000')]),e._v(" "),t("p",[e._v("For mvn project another way can be found in Maven->debug below")]),e._v(" "),t("p",[t("strong",[e._v("Debug into jar without sourcecode using decompiler：")])]),e._v(" "),t("p",[e._v("My original post\nhttps://stackoverflow.com/questions/58534925/eclipse-not-decompile-rt-jar-when-debugging-but-idea-does/58535553#58535553")]),e._v(" "),t("p",[e._v("手动方式：\n可以先手动decompile出来，然后再添加\n"),t("img",{attrs:{src:"/docs/docs_image/software/java/java02.png",alt:"add source path"}}),e._v("\n自动方式：\nFor eclipse install:\nEnhanced Class Decompiler https://ecd-plugin.github.io/ecd/ or jd plugin http://java-decompiler.github.io/\nHaven’t try another one Bytecode Visualizer https://www.crowdstrike.com/blog/native-java-bytecode-debugging-without-source-code/\nFor intellj idea, it’s auto;")]),e._v(" "),t("p",[t("strong",[e._v("Run and Debug external jar without sourcecode")])]),e._v(" "),t("p",[e._v("RUN external jar in eclipse:\nProgram-> create -> Locatoin:jdk/java.exe Argument:-jar XXX.jar")]),e._v(" "),t("p",[e._v("DEBUG:\nBut how to debug ? can try woring with jdb.exe\nhttps://docs.oracle.com/javase/7/docs/technotes/tools/windows/jdb.html\nhttps://stackoverflow.com/questions/19843096/how-to-debug-a-java-application-without-access-to-the-source-code/58555431#58555431")]),e._v(" "),t("p",[e._v("run jar with:\njava -jar -agentlib:jdwp=transport=dt_shmem,address=jdbconn,server=y,suspend=n C:\\Workspace\\EclipseWorkspace\\test.jar\nthen debug in eclipse:\nProgram-> create -> Locatoin:jdk/jdb.exe Argument:-attach jdbconn")]),e._v(" "),t("h4",{attrs:{id:"_1-2-5-其他"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-5-其他"}},[e._v("#")]),e._v(" 1.2.5 其他")]),e._v(" "),t("p",[e._v("Install new software/ marketpalce 如果报错\n"),t("img",{attrs:{src:"/docs/docs_image/software/java/java03.png",alt:""}})]),e._v(" "),t("h2",{attrs:{id:"_2-java-language"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-java-language"}},[e._v("#")]),e._v(" 2.JAVA Language")]),e._v(" "),t("p",[e._v("https://github.com/lyhistory/java-learn?organization=lyhistory&organization=lyhistory\nhttps://github.com/lyhistory/learn_coding")]),e._v(" "),t("p",[e._v("Java HashMap doesn't use MD5 for calculating hash codes primarily because MD5 (Message Digest Algorithm 5) is not suitable for generating hash codes in the context of a HashMap. Here are the key reasons why:")]),e._v(" "),t("p",[e._v("Size of Output: MD5 produces a 128-bit hash value (16 bytes). In contrast, Java HashMap uses a 32-bit integer to store hash codes (int). Storing a 128-bit hash value for each key would be inefficient in terms of memory usage and processing overhead.")]),e._v(" "),t("p",[e._v("Performance: MD5 is designed for cryptographic purposes, where collision resistance and security are critical. It involves more computational overhead compared to simpler hash functions designed for rapid computation of non-cryptographic hash codes, which is what HashMap requires.")]),e._v(" "),t("p",[e._v("Collision Handling: While MD5 is designed to minimize collisions in cryptographic contexts, HashMap uses hash codes to distribute keys across buckets in a hash table. The hash function used by HashMap should ideally distribute hash codes evenly across the available buckets to minimize collisions specific to the data structure's needs.")]),e._v(" "),t("p",[e._v("Hash Distribution: Java's HashMap relies on the distribution of hash codes to evenly distribute entries across buckets in the hash table. MD5's distribution might not be optimal for this purpose, potentially leading to clustering of hash collisions in specific buckets rather than distributing them evenly.")]),e._v(" "),t("p",[e._v("Instead of MD5, Java HashMap uses a combination of shifting and bitwise XOR operations to compute the hash code for keys. This approach is designed to provide a good distribution of hash codes across the range of possible int values and is optimized for performance and memory efficiency within the context of a hash table implementation.")]),e._v(" "),t("p",[e._v("In summary, while MD5 is a robust cryptographic hash function, it is not suitable for the specific requirements of a HashMap in terms of size, performance, collision handling, and distribution of hash codes across buckets in a hash table.")]),e._v(" "),t("h3",{attrs:{id:"_2-1-misconception"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-misconception"}},[e._v("#")]),e._v(" 2.1 Misconception")]),e._v(" "),t("p",[e._v("Java always passes arguments by value, NOT by reference.\nhttps://stackoverflow.com/questions/40480/is-java-pass-by-reference-or-pass-by-value/12429953#12429953")]),e._v(" "),t("p",[e._v("JAVA版本：J2SE vs J2ME vs J2EE\nhttps://www.geeksforgeeks.org/j2se-vs-j2me-vs-j2ee-whats-the-difference/")]),e._v(" "),t("h3",{attrs:{id:"内部类-外部类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内部类-外部类"}},[e._v("#")]),e._v(" 内部类 外部类")]),e._v(" "),t("p",[e._v("在java内部类里，我们是能直接访问外部类的变量的。如下面例子所述：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class OutterClass{\n  private String outterStr;\n\n  class InnerClass{\n    public void innerMethod(){\n      System.out.printf(outterStr);\n    }\n  }\n}\n")])])]),t("p",[e._v("外部类OutterClass 的属性能够被InnerClass直接使用，从java语法上说，InnerClass在OutterClass的类里，outterStr这个外部类属性对InnerClass是可见的，所以InnerClass内部类能够被OutterClass直接使用，是没问题的。但是在虚拟机编译成字节码的时候，OutterClass这个外部类和InnerClass这个内部类是分别被编译成两个字节码文件的。也就是单从编译后的文件来看，OutterClass和InnerClass是两个独立的类，那么InnerClass是如何直接访问OutterClass属性的？如果直接访问，岂不是破坏了权限控制的原则？")]),e._v(" "),t("p",[e._v("答案就在于虚拟机在生成InnerClass字节码和OutterClass字节码文件的时候做了一点手脚。")]),e._v(" "),t("p",[e._v("将InnerClass字节码文件进行反编译之后，它的java代码不再是我们之前看到的那样,而是类似于:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class InnerClass{\n  private OutterClass outterClass;\n  InnerClass(OutterClass outterClass){\n    this.outterClass = outterClass;\n  }\n}\n")])])]),t("p",[e._v("也就是说，虚拟机会在InnerClass的构造函数中在增加一个外部类对象的参数，将这个对象赋值给自己的成员变量。接下来InnerClass如何访问外部类的对象呢？答案在于OutterClass反编译后的文件。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class OutterClass{\n  private String outterStr;\n  public String getOutterStr$1(){\n    return outterStr;\n  }\n}\n")])])]),t("p",[e._v("也就是说虚拟机专门在OutterClass这个类里增加一个outterStr成员的方法，以方便InnerClass去获取这个变量。也就是说，InnerClass类变成了如下面貌：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class InnerClass{\n  private OutterClass outterClass;\n  InnerClass(OutterClass outterClass){\n    this.outterClass = outterClass;\n  }\n  public void innerMethod(){\n    System.out.printf(outterClass.getOutterStr$1());\n  }\n}\n")])])]),t("p",[e._v("于是即便是两个独立的字节码文件，InnerClass访问OutterClass的成员也变得顺理成章了。\n由此我们也可以从中感受到虚拟机开发人员设计的巧妙，既不违反顶层语言的语法规则，又不违反自己中间代码的原则。")]),e._v(" "),t("h3",{attrs:{id:"pojo-vs-java-beans"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pojo-vs-java-beans"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://www.tutorialspoint.com/pojo-vs-java-beans",target:"_blank",rel:"noopener noreferrer"}},[e._v("POJO VS Java Beans"),t("OutboundLink")],1),e._v("**")]),e._v(" "),t("p",[e._v("POJO: Plain-Old-Java-Object\nJava Beans: The only difference between both the classes is Java make java beans objects serialized so that the state of a bean class could be preserved in case required.\nSo due to this a Java Bean class must either implements Serializable or Externalizable interface.")]),e._v(" "),t("p",[e._v("List:\nDesign Note – There is no setter method for a List property. The getter returns the List by reference. An item can be added to the List returned by the getter method using an appropriate method defined on java.util.List. Rationale for this design in JAXB 1.0 was to enable the implementation to wrapper the list and be able to perform checks as content was added or removed from the List.")]),e._v(" "),t("p",[e._v("DateTime:\nSimpleDateFormat https://dzone.com/articles/java-simpledateformat-guide\n1384171247000+0800 https://blog.csdn.net/mingtianhaiyouwo/article/details/51336576\nhttp://tutorials.jenkov.com/java-date-time/index.html#java-7-date-time-api")]),e._v(" "),t("p",[e._v("localdate calendar\nhttps://stackoverflow.com/questions/21242110/convert-java-util-date-to-java-time-localdate\nhttps://beginnersbook.com/2017/10/java-8-calculate-days-between-two-dates/\nhttps://www.mkyong.com/java/java-how-to-add-days-to-current-date/")]),e._v(" "),t("p",[e._v("Number scale precision\nhttps://www.baeldung.com/java-round-decimal-number")]),e._v(" "),t("p",[e._v("SortedDictionary treemap https://stackoverflow.com/questions/4621464/whats-the-equivalent-to-a-net-sorteddictionary-in-java")]),e._v(" "),t("p",[e._v("java parameter default value\nhttps://stackoverflow.com/questions/997482/does-java-support-default-parameter-values")]),e._v(" "),t("p",[e._v("Java8 lambda expression, functional programming\nhttps://rodrigouchoa.wordpress.com/2014/09/10/java-8-lambda-expressions-tutorial/")]),e._v(" "),t("p",[e._v("Stream\nDistinct https://howtodoinjava.com/java8/java-stream-distinct-examples/\nhttps://stackoverflow.com/questions/42578210/filter-stream-with-values-from-another-stream")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('Map<String, Test> anotherDataMap = dataMap.entrySet().stream().filter(entry -> entry.getValue().getType() == "1")\n.collect(Collectors.toMap(\n\t\te->{return String.format("%s_ddd", e.getValue().getFoo()));}, \n\t\te->{\n\t\t\tTest test = new Test();\n\t\t\ttest.setFoo(e.getValue().getFoo())\n\t\t\treturn test;\n\t\t})); \n')])])]),t("p",[e._v("future\nhttps://www.baeldung.com/java-future")]),e._v(" "),t("p",[e._v("Java serialization algorithm\nhttps://www.javaworld.com/article/2072752/the-java-serialization-algorithm-revealed.html")]),e._v(" "),t("p",[e._v("java开发之线程（守护线程daemon和用户线程User Thread）\nhttps://blog.csdn.net/mine_song/article/details/72651388")]),e._v(" "),t("p",[e._v("父线程捕获子线程异常需要利用executorservice")]),e._v(" "),t("h3",{attrs:{id:"jaxb"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jaxb"}},[e._v("#")]),e._v(" JAXB")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("xjc -XautoNameResolution -p com.lyhistory.test test.xsd\n")])])]),t("p",[e._v("Xjc is a tool of JDK\nJAXB2: Xsd to class\nFailed with maven plugin generation, work around by using external xjc tool\nJAXB Architecture https://docs.oracle.com/cd/E19316-01/819-3669/bnazf/index.html")]),e._v(" "),t("p",[e._v("Marshalling https://www.javatpoint.com/jaxb-marshalling-example")]),e._v(" "),t("p",[e._v("https://github.com/highsource/jaxb2-basics/wiki/Using-JAXB2-Basics-Plugins\nhttp://websystique.com/java/jaxb/jaxb-codegeneration-maven-example/")]),e._v(" "),t("p",[e._v("?# issues: package org.jvnet.jaxb2_commons.lang does not exist https://stackoverflow.com/questions/16833340/jaxb-equals-and-hashcode-gives-error")]),e._v(" "),t("p",[e._v("?# issues: https://github.com/highsource/jaxb2-basics/issues/7\nSolved by using external tools generation")]),e._v(" "),t("p",[e._v("GENERATED USING EXTERNAL TOOLS: jaxb-ri-2.3.1\nhttps://javaee.github.io/jaxb-v2/\nhttps://docs.oracle.com/javase/8/docs/technotes/tools/unix/xjc.html\nhttps://thoughts-on-java.org/generate-your-jaxb-classes-in-second/")]),e._v(" "),t("p",[e._v('?#There\'s no ObjectFactory with an @XmlElementDecl\nJAXBContext jaxbContextForSpan = JAXBContext.newInstance("com.lyhistory.test");')]),e._v(" "),t("p",[e._v("https://stackoverflow.com/questions/12074317/theres-no-objectfactory-with-an-xmlelementdecl")]),e._v(" "),t("p",[e._v("?#customize boolean to 0 1\nCustomizing JAXB Bindings https://docs.oracle.com/javase/tutorial/jaxb/intro/custom.html")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("xjc -XautoNameResolution -p com.lyhistory.test -extension -b jaxb-bindings.xjb\n")])])]),t("h3",{attrs:{id:"exceptions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#exceptions"}},[e._v("#")]),e._v(" exceptions")]),e._v(" "),t("p",[t("a",{attrs:{href:"/docs/software/programming/java_exceptions"}},[e._v("java exceptions")])]),e._v(" "),t("h3",{attrs:{id:"_2-3-java-advance"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-java-advance"}},[e._v("#")]),e._v(" 2.3 JAVA ADVANCE")]),e._v(" "),t("p",[e._v("java魔术手法：\n"),t("a",{attrs:{href:"https://github.com/lyhistory/learn_coding/tree/master/java",target:"_blank",rel:"noopener noreferrer"}},[e._v("demo參考"),t("OutboundLink")],1),e._v("\ncglib增强类+代理\n元注解")]),e._v(" "),t("h4",{attrs:{id:"_2-3-1-concurrency-handling"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-concurrency-handling"}},[e._v("#")]),e._v(" 2.3.1 Concurrency handling")]),e._v(" "),t("p",[t("strong",[e._v("method 1:Multi-thread")])]),e._v(" "),t("p",[e._v("There is a new computeIfAbsent API introduced in Java 8. The javadocs for ConcurrentHashMap's impelementation of it state:")]),e._v(" "),t("blockquote",[t("p",[e._v("The entire method invocation is performed atomically, so the function is applied at most once per key.\nSome attempted update operations on this map by other threads may be blocked while computation is in progress,\n"),t("strong",[e._v("so the computation should be short and simple, and must not attempt to update any other mappings of this map")]),e._v(".\nConditional thread safe\nhttps://www.ibm.com/developerworks/java/library/j-jtp07233/index.html")])]),e._v(" "),t("p",[e._v("Forkjoinpool\n"),t("img",{attrs:{src:"/docs/docs_image/software/java/java04.png",alt:""}})]),e._v(" "),t("p",[e._v("ParallelStream的实现原理——ForkJoin线程池框架\nhttp://tangxiaolin.com/learn/show?id=402881d2651d1bdf01651e51d8f80001\nJava 并发编程笔记：如何使用 ForkJoinPool 以及原理\nhttp://blog.dyngr.com/blog/2016/09/15/java-forkjoinpool-internals/\nhttp://blog.nigol.cz/java-8-dont-be-afraid-of-streams.html\nhttps://www.cnblogs.com/shijiaqi1066/p/4631466.html")]),e._v(" "),t("p",[e._v("聊聊并发（八）——Fork/Join 框架介绍 https://www.infoq.cn/article/fork-join-introduction/\n分析jdk-1.8-ForkJoinPool实现原理 https://www.jianshu.com/p/44b09f52a225\nhttps://blog.csdn.net/dweizhao/article/details/73480025")]),e._v(" "),t("p",[t("strong",[e._v("method 2: Single thread queue - Disruptor")])]),e._v(" "),t("h4",{attrs:{id:"_2-3-2-jni"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-jni"}},[e._v("#")]),e._v(" 2.3.2 JNI")]),e._v(" "),t("p",[e._v("Interface Definition Language IDL\nhttps://www.ejbtutorial.com/corba/interface-definition-language-idl-hello-world-tutorial-with-java-and-c")]),e._v(" "),t("p",[e._v("https://www.baeldung.com/jni\nhttps://www.jianshu.com/p/c708c2602db0\nhttps://www3.ntu.edu.sg/home/ehchua/programming/java/JavaNativeInterface.html")]),e._v(" "),t("p",[e._v("采坑：\n1）maven打包dll和so的时候会默认更改文件，所以加了pom过滤，我是直接用获取路径，动态添加路径到system path，再loadlibrary\nCan't load this .dll (machine code=0xbd) on a AMD 64-bit platform")]),e._v(" "),t("p",[e._v("https://stackoverflow.com/questions/38244970/running-my-generated-jar-yields-cant-load-this-dll-machine-code-0xbd-on-a\nhttps://stackoverflow.com/questions/19500458/maven-resource-binary-changes-file-size-after-build/24282250#24282250\nhttps://blog.csdn.net/azrael6619/article/details/83761225\nhttps://stackoverflow.com/questions/1403788/java-lang-unsatisfiedlinkerror-no-dll-in-java-library-path\nhttps://www.imooc.com/article/14702")]),e._v(" "),t("p",[e._v("2）jni调用的时候有个大坑，native函数所在的class包名必须跟c++那边的包名一致，否则会报unsatifisfield错误\nhttps://blog.csdn.net/xiaoyaoerxing/article/details/80461015\nhttps://www.cnblogs.com/harrymore/p/10570284.html")]),e._v(" "),t("p",[e._v("3）java, c++联调debug\nhttps://www.cnblogs.com/yejg1212/archive/2013/06/07/3125392.html\nC++ ide attach javaw")]),e._v(" "),t("h4",{attrs:{id:"_2-3-3-others"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-3-others"}},[e._v("#")]),e._v(" 2.3.3 others")]),e._v(" "),t("p",[e._v("Functional reference\nFunctional Interfaces https://www.baeldung.com/java-8-functional-interfaces\nhttps://www.codementor.io/eh3rrera/using-java-8-method-reference-du10866vx\nhttps://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/How-to-use-Javas-functional-Consumer-interface-example")]),e._v(" "),t("p",[e._v("1）同步锁信号\nsynchronized(this), wati, notify, notifyall")]),e._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[e._v("事件通信\nPublish Events\npublic interface ApplicationContext extends EnvironmentCapable, ListableBeanFactory, HierarchicalBeanFactory,\nMessageSource, ApplicationEventPublisher, ResourcePatternResolver {")])]),e._v(" "),t("p",[e._v("注解方法@EventListener并且其所在类也必须是@Component注解，或者直接extends ApplicationEvent")]),e._v(" "),t("h2",{attrs:{id:"_3-java-framework"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-java-framework"}},[e._v("#")]),e._v(" 3.JAVA framework")]),e._v(" "),t("p",[e._v("java有众多的框架，想要理清楚就要清楚其历史和基本框架，比如，")]),e._v(" "),t("p",[e._v("springmvc基于内置tomcat，内置tomcat基于servlet规范实现，servlet支持多种协议，但是通常tomcat只是支持http协议，servlet从3.0之前的BIO发展为之后的NIO支持，而tomcat8又引入了高性能的APR;")]),e._v(" "),t("p",[e._v("从JAVA 1.4起，JDK支持NIO(New IO, 采用os non blocking的工作方式), 使用JDK原生的API开发NIO比较复杂，需要理解Selector、Channel、ByteBuffer三大组件，所以有了mina，netty的封装，很多产品dubbo、spark、zookeeper、elasticSearch都使用netty作为底层通信IO框架支持；")]),e._v(" "),t("p",[t("a",{attrs:{href:"/docs/software/buildingblock/netty"}},[e._v("重点参考我的另一篇笔记 IO发展历史 BIO-NIO-Netty详解")])]),e._v(" "),t("h3",{attrs:{id:"_3-1-reactive-and-streaming-framework"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-reactive-and-streaming-framework"}},[e._v("#")]),e._v(" 3.1 Reactive and Streaming Framework")]),e._v(" "),t("p",[e._v("(java8 stream is only for Collections, means that the input is fixed collections, not realtime stream, after processed, the input cannot be changed )\nReactive framework: Akka, Vert.x, Java 9 “Flow” API, spring flux")]),e._v(" "),t("blockquote",[t("p",[e._v("通常，我们写服务器处理模型的程序时，有以下几种模型：")]),e._v(" "),t("p",[e._v("(1)每收到一个请求，创建一个新的进程，来处理该请求；\n(2)每收到一个请求，创建一个新的线程，来处理该请求；\n(3)每收到一个请求，放入一个事件列表，让主进程通过非阻塞I/O方式来处理请求")]),e._v(" "),t("p",[e._v("上面的几种方式，各有千秋，\n第(1)中方法，由于创建新的进程的开销比较大，所以，会导致服务器性能比较差,但实现比较简单。\n第(2)种方式，由于要涉及到线程的同步，有可能会面临死锁等问题。\n第(3)种方式，在写应用程序代码时，逻辑比前面两种都复杂。\n综合考虑各方面因素，一般普遍认为第(3)种方式是大多数网络服务器采用的方式\nhttps://blog.csdn.net/m0_37886429/article/details/78292300")])]),e._v(" "),t("p",[e._v("Non-blocking React 对应于blocking servlet，举例餐厅比喻web应用，传统的blocking做法是，有个http pool（.net的http handler或java的servlet），pool就是一个工作组，工作组里的每个服务员都是处理线程，当一个客人即web request进来时，餐厅立马分配一个服务员给这个客户，全程服务，直到客人离开（http response或者websocket断开连接），整个过程中这个服务员是被独占的，所以是阻塞式；而假设换一种做法，类似于nodejs和netty的event loop单线程处理方式，餐厅只请一个服务员，第一个客人过来之后，服务员过来安排座位，记下菜单，然后发送给后厨，然后同时第二个客人来了，服务员立马过去做同样的事情，因为是非阻塞式的，在后厨做好饭，服务员端给第一个客人之前，服务员可以利用空余时间去服务其他客人，比如刚才的场景，或者其他服务员要加餐等等，这就是所谓的java响应式编程；\n可能有人会疑惑具体什么机制让单线程可以处理并发，很多人之前还以为只有多线程才能产生并发，换个问题：单核时代是如何实现的并发，并发是个宏观的概念，单核微观上同一个时刻只可能处理一个task，只是其他线程在排队等待，然后分片迅速切换，所以nodejs的单线程也是一样的办法，进行排队；再进一步上升到架构角度看，架构中采用message queue的方式也是一种排队处理的扩展方式，下游可以增加多个消费者；\n这里多引入一个问题，如果是多线程，还可以通过增加线程池中服务员的数量来扩展，既然是单线程，那么怎么扩展scale呢？")]),e._v(" "),t("p",[e._v("一种方法就是nodejs的新feature cluster\nnode.js scalability problems and how to solve them https://softwareontheroad.com/nodejs-scalability-issues/#resources\nGood practices for high-performance and scalable Node.js applications https://medium.com/iquii/good-practices-for-high-performance-and-scalable-node-js-applications-part-1-3-bb06b6204197")]),e._v(" "),t("p",[e._v("用nodejs的朋友都有了解，node是单线程的，也就是说跑在8核CPU上，只能使用一个核的算力。\n单线程一直是node的一个诟病，但随着0.6版本中引入cluster之后，这个情况则得到了改变，开发人员可以依靠cluster很轻松的将自己的Node服务器扩展为多线程服务器了。\n另一种从微服务层面找到瓶颈，https://blog.risingstack.com/nodejs-microservices-scaling-case-study/")]),e._v(" "),t("p",[e._v("先上一张大图：\n"),t("img",{attrs:{src:"/docs/docs_image/software/java/java05.png",alt:"Java reactive API VS java8 stream"}})]),e._v(" "),t("p",[e._v("图开始是对比Java reactive API VS java8 stream，图片下部分是印证下面的内容：")]),e._v(" "),t("p",[e._v("Streaming framework: apache spark，storm，kafka stream等，感觉reactive响应式编程也是处理stream，有什么分别呢，reactive基本是request response的模式，而streaming最终是要做collection reduce合并计算的")]),e._v(" "),t("blockquote",[t("p",[e._v("People tend to confuse between streaming frameworks and reactive programmings frameworks,\nbecause they both deal with high throughput of real-time events. The different is with what they do after consuming the events:\n"),t("strong",[e._v("Reactive systems are used to provide a quick action for each event. Streaming systems are used to collect the data from the events and store it in files or databases after aggregations and other calculations.")])])]),e._v(" "),t("p",[e._v("pipeline，method chaining，fluent Interface\n我们可以看到从synchronous到asynchronous转换比较明显就是用callback，但是如果步骤过多就会出现类似这样的嵌套写法\nprocess1().done( callback() ) 然后callback().done( anothercallback())；为了解决这个问题就出现了fluent interface，即\nprocess1().done( callback() ) 然后callback().done( anothercallback())；为了解决这个问题就出现了fluent interface，即\nprocess1().then(process2())")]),e._v(" "),t("p",[e._v("Streaming里面也是很多这种写法\n他们的背后实现方法是什么我暂时不知道，也许是pub sub的观察着模式，比如前面的reactive响应式编程的发展路线：")]),e._v(" "),t("p",[e._v("前面提到非阻塞式基本都是采用nodejs的event loop单线程思想，而event loop就是基于观察者模式：\nhttps://medium.com/@brianjleeofcl/what-they-probably-didnt-teach-you-pt-1-node-js-event-emitters-observer-pattern-7dd02b67c061\n当然现在第四代的Reactor Library未必是用观察者模式，因为观察者模式是事件驱动，而响应式编程是消息驱动（比如抓获的异常也是消息）")]),e._v(" "),t("p",[e._v("从更高的角度来看，这些都可以称作是pipeline，比如有这么一篇文章《Kafka streams - From pub/sub to a complete stream processing platform》，kafka api and unix analogy\ncat < in.txt | grep “apache” | tr a-z A-Z > out.txt")]),e._v(" "),t("h3",{attrs:{id:"_3-2-rpc-rmi-jms-webservice-rest-soap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-rpc-rmi-jms-webservice-rest-soap"}},[e._v("#")]),e._v(" 3.2 RPC / RMI / JMS / WebService(Rest/SOAP)")]),e._v(" "),t("h4",{attrs:{id:"_3-2-1-overview"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-overview"}},[e._v("#")]),e._v(" 3.2.1 Overview")]),e._v(" "),t("p",[t("strong",[e._v("总体来说，WebService通常是采用HTTP通信，而其他则通常是采用TCP通信，性能上当然是TCP更佳，不过TCP是面向流的，需要处理拆包粘包等底层问题，具体可以参考"),t("a",{attrs:{href:"/docs/software/network/network"}},[e._v("network网络基础")])])]),e._v(" "),t("blockquote",[t("p",[e._v("Nowadays we use general purpose applications or libraries to communicate with each other. For example, we often use an HTTP client library to retrieve information from a web server and to invoke a remote procedure call via web services. However, a general purpose protocol or its implementation sometimes does not scale very well. It is like how we don't use a general purpose HTTP server to exchange huge files, e-mail messages, and near-realtime messages such as financial information and multiplayer game data. What's required is a highly optimized protocol implementation that is dedicated to a special purpose. For example, you might want to implement an HTTP server that is optimized for AJAX-based chat application, media streaming, or large file transfer. You could even want to design and implement a whole new protocol that is precisely tailored to your need. Another inevitable case is when you have to deal with a legacy proprietary protocol to ensure the interoperability with an old system. What matters in this case is how quickly we can implement that protocol while not sacrificing the stability and performance of the resulting application.\nhttps://netty.io/wiki/user-guide-for-4.x.html\nRPC is a protocol defined in https://tools.ietf.org/html/rfc1831 , netty is one of the non-blocking io implementation of RPC,\nand also sometimes refer as an architecture style (getUserById?id=1) when comparing with rest style(get /cat/1)\nRMI is a protocol and also a low-level RPC implementation, “normally for server to server communication or inter micro services communication, service A invoke methods on service B just as its own function call”; dubbo is an advanced implementation on top of RMI and other protocols, is for distributed services;")])]),e._v(" "),t("p",[e._v("WebServices is also a specific implementation of RPC using HTTP protocol, it is also called RPC-Style web service, and one more style is Restful style web service.\nCompare: RMI is more performance better than web service, because RMI using tcp while web service using http;\nhttps://www.jianshu.com/p/5b90a4e70783")]),e._v(" "),t("p",[t("img",{attrs:{src:"/docs/docs_image/software/java/java06.png",alt:""}})]),e._v(" "),t("p",[e._v("RPC vs Restful, RPC vs RMI, Rest vs Restful:")]),e._v(" "),t("p",[t("img",{attrs:{src:"/docs/docs_image/software/java/java07.png",alt:""}})]),e._v(" "),t("p",[e._v("rest vs soap\nhttps://www.soapui.org/learn/api/soap-vs-rest-api.html")]),e._v(" "),t("h4",{attrs:{id:"_3-2-2-rpc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-2-rpc"}},[e._v("#")]),e._v(" 3.2.2 RPC")]),e._v(" "),t("p",[e._v("RPC框架有很多，比较知名的如阿里的Dubbo、google的gRPC、Go语言的rpcx、Apache的thrift。当然了，还有Spring Cloud，不过对于Spring Cloud来说，RPC只是它的一个功能模块，还有netty（zookeeper使用netty），alipay基于netty的SOFA RPC\n技术点：\n●\t元注解定义\n●\t网络IO，BIO[NIO](https://www.javatpoint.com/java-nio-vs-input-output)\\AIO，Socket编程，HTTP通信，一个就行。\n●\t动态代理，JDK或者Cglib的动态代理。\n●\t反射\n●\t序列化、反序列化，JDK序列化，JSON、Hessian、Kryo、ProtoBuffer、ProtoStuff、Fst知道一个就行。\n●\t网络通信\n●\t编解码\n●\t服务发现和注册\n●\t心跳与链路检测")]),e._v(" "),t("p",[e._v("基于Netty实现\nhttps://github.com/lyhistory/learn_coding/tree/master/java/Components/netty-demo\nhttps://netty.io/wiki/user-guide-for-4.x.html\nhttps://github.com/luxiaoxun/NettyRpc/tree/b811cabebcf20a2551f4ffa746de68ba1e7ebafb\nhttps://juejin.im/post/5c6d7640f265da2de80f5e9c#heading-4")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/sofastack/sofa-bolt",target:"_blank",rel:"noopener noreferrer"}},[e._v("SofaBolt"),t("OutboundLink")],1),e._v("是基于netty进一步封装，更容易使用；")]),e._v(" "),t("p",[e._v("然后SOFA RPC这个微服务中间件采用了SofaBolt基础组件,"),t("a",{attrs:{href:"https://mp.weixin.qq.com/s/JRsbK1Un2av9GKmJ8DK7IQ",target:"_blank",rel:"noopener noreferrer"}},[e._v("蚂蚁通信框架实践"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v('流程\n●\tServer端启动进行服务注册到zookeeper；\n●\tClient端启动获取zookeeper的服务注册信息，定期更新；\n●\tClient以本地调用方式调用服务（使用接口，例如helloService.sayHi("world"));\n●\tClient通过RpcProxy会使用对应的服务名生成动态代理相关类，而动态代理类会将请求的对象中的方法、参数等组装成能够进行网络传输的消息体RpcRequest；\n●\tClient通过一些的负载均衡方式确定向某台Server发送编码（RpcEncoder）过后的请求（netty实现）\n●\tServer收到请求进行解码（RpcDecoder），通过反射（cglib的FastMethod实现）会进行本地的服务执行\n●\tServer端writeAndFlush()将RpcResponse返回；\n●\tClinet将返回的结果会进行解码，得到最终结果。')]),e._v(" "),t("h4",{attrs:{id:"_3-2-3-rmi"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-3-rmi"}},[e._v("#")]),e._v(" 3.2.3 RMI")]),e._v(" "),t("p",[t("strong",[e._v("RMI VS RPC:")]),e._v("\nJava RMI （Remote Method Invocation）- 远程方法调用，能够让客户端像使用本地调用一样调用服务端 Java 虚拟机中的对象方法。RMI 是面向对象语言领域对 RPC （Remote Procedure Call）的完善，用户无需依靠 IDL 的帮助来完成分布式调用，而是通过依赖接口这种更简单自然的方式。\nRPC and RMI are the mechanisms which enable a client to invoke the procedure or method from the server through establishing communication between client and server. The common difference between RPC and RMI is that RPC only supports procedural programming whereas RMI supports object-oriented programming.")]),e._v(" "),t("p",[e._v("Getting Started Using Java™ RMI https://docs.oracle.com/javase/7/docs/technotes/guides/rmi/hello/hello-world.html")]),e._v(" "),t("p",[e._v("第一步 全手动本地发布\n"),t("img",{attrs:{src:"/docs/docs_image/software/java/java08.png",alt:""}})]),e._v(" "),t("p",[e._v("Difference between classes java.rmi.registry.Registry and java.rmi.Naming\nhttps://stackoverflow.com/questions/3630329/difference-between-classes-java-rmi-registry-registry-and-java-rmi-naming\n需要手动编译interface server 到当前目录下面，然后手动运行时需要指定classpath，需要手动启动rmiregistry")]),e._v(" "),t("p",[e._v("第二步 通过JNDI尝试远程发布并自动启动rmiregistry\nRMI VS WebService\n"),t("img",{attrs:{src:"/docs/docs_image/software/java/java09.png",alt:""}})]),e._v(" "),t("p",[e._v("第三步 基于zookeeper发布\nhttps://my.oschina.net/huangyong/blog/345164\nhttp://wanglizhi.github.io/2016/06/12/RMI/")]),e._v(" "),t("p",[e._v("注意：我们首先需要使用 ZooKeeper 的客户端工具创建一个持久性 ZNode，名为“/registry”，该节点是不存放任何数据的，可使用如下命令：\ncreate /registry null")]),e._v(" "),t("p",[t("img",{attrs:{src:"/docs/docs_image/software/java/java10.png",alt:""}})]),e._v(" "),t("h4",{attrs:{id:"_3-2-4-dubbo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-4-dubbo"}},[e._v("#")]),e._v(" 3.2.4 Dubbo")]),e._v(" "),t("p",[e._v("RMI比较原始\nDependency\nhttp://jm.taobao.org/2018/06/13/%E5%BA%94%E7%94%A8/")]),e._v(" "),t("p",[e._v("https://github.com/apache/dubbo/blob/master/dubbo-dependencies-bom/pom.xml\nAdmin ui\nhttps://github.com/apache/dubbo-admin\nhttps://dubbo.apache.org/en-us/docs/admin/introduction.html")]),e._v(" "),t("p",[e._v("Dubbo with multicast\nMulticast\nDubbo 支持多种协议，采用的协议在网络层级不同，performance\nhttps://dubbo.apache.org/en-us/docs/user/perf-test.html")]),e._v(" "),t("h3",{attrs:{id:"_3-3-jna"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-jna"}},[e._v("#")]),e._v(" 3.3.JNA")]),e._v(" "),t("p",[e._v("Native access https://github.com/java-native-access/jna")]),e._v(" "),t("p",[e._v("外挂钩子")]),e._v(" "),t("h2",{attrs:{id:"_4-package-management"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-package-management"}},[e._v("#")]),e._v(" 4.Package Management")]),e._v(" "),t("h3",{attrs:{id:"_4-1-gradle"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-gradle"}},[e._v("#")]),e._v(" 4.1 Gradle")]),e._v(" "),t("p",[e._v("todo Refer to Project:alpha-wallet")]),e._v(" "),t("h3",{attrs:{id:"_4-2-maven"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-maven"}},[e._v("#")]),e._v(" 4.2 MAVEN")]),e._v(" "),t("h4",{attrs:{id:"_4-2-1-install"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1-install"}},[e._v("#")]),e._v(" 4.2.1 Install")]),e._v(" "),t("p",[t("strong",[e._v("eclipse maven path: Preferences->Maven->Installations")])]),e._v(" "),t("p",[e._v("manual:\nhttp://maven.apache.org/download.cgi\nhttps://www.mkyong.com/maven/how-to-install-maven-in-windows/\nhttps://maven.apache.org/guides/getting-started/maven-in-five-minutes.html")]),e._v(" "),t("p",[e._v("MAVEN_HOME:C:\\dev\\maven\\apache-maven-3.6.1\\bin"),t("br"),e._v("\nJAVA_HOME:C:\\Java\\jdk1.6.0"),t("br"),e._v("\nPATH=...%MAVEN_HOME/bin;%JAVA_HOME%/bin\n自定义startup script： mvn.bat/mvn.cmd")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('@REM ==== START VALIDATION ====\nset JAVA_HOME=C:\\PROGRA~1\\Java\\jdk1.6.0_45\nif not "%JAVA_HOME%" == "" goto OkJHome\n\necho.\necho ERROR: JAVA_HOME not found in your environment.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation\necho.\ngoto error\n\n:OkJHome\nif exist "%JAVA_HOME%\\bin\\java.exe" goto chkMHome\n')])])]),t("p",[e._v("auto: choco install maven")]),e._v(" "),t("p",[e._v("特殊情况下比如研究测试旧版本的漏洞，需要降级maven和对应的jdk，可以利用Maven toolchain\nhttps://maven.apache.org/guides/mini/guide-using-toolchains.html\n在.m2/resposity下面建立toolchains.xml")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<?xml version="1.0" encoding="UTF8"?>\n<toolchains>\n  <toolchain>\n    <type>jdk</type>\n    <provides>\n      <version>1.6</version>\n      <vendor>sun</vendor>\n    </provides>\n    <configuration>\n       <jdkHome>C:\\Program Files\\Java\\jdk1.6.0_45</jdkHome>\n    </configuration>\n  </toolchain>\n</toolchains>\n')])])]),t("p",[e._v("Generate project\nmvn archetype:generate https://kafka.apache.org/22/documentation/streams/tutorial\nhttps://stackoverflow.com/questions/31720328/maven-not-downloading-dependencies-in-eclipse\nhttps://stackoverflow.com/questions/19655184/no-compiler-is-provided-in-this-environment-perhaps-you-are-running-on-a-jre-ra")]),e._v(" "),t("p",[e._v("Build a Java app with Maven https://jenkins.io/doc/tutorials/build-a-java-app-with-maven/")]),e._v(" "),t("h4",{attrs:{id:"_4-2-2-pom-dependency-mechanism"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-2-pom-dependency-mechanism"}},[e._v("#")]),e._v(" 4.2.2 POM / Dependency Mechanism")]),e._v(" "),t("ul",[t("li",[e._v("Do not attempt to import a POM that is defined in a submodule of the current POM. Attempting to do that will result in the build failing  since it won't be able to locate the POM.")]),e._v(" "),t("li",[e._v("Never declare the POM importing a POM as the parent (or grandparent, etc) of the target POM. There is no way to resolve the circularity and  an exception will be thrown.")]),e._v(" "),t("li",[e._v("When referring to artifacts whose POMs have transitive dependencies, the project needs to specify versions of those artifacts as managed  dependencies. Not doing so results in a build failure since the artifact may not have a version specified. (This should be considered a best  practice in any case as it keeps the versions of artifacts from changing from one build to the next).")])]),e._v(" "),t("h5",{attrs:{id:"maven-profiles-vs-spring-springboot-profiles"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#maven-profiles-vs-spring-springboot-profiles"}},[e._v("#")]),e._v(" maven profiles VS spring/springboot profiles")]),e._v(" "),t("p",[e._v("Maven profiles would provide a build-time solution, while SpringFramework profiles would provide a runtime alternative. I think this is the first question one may ask himself: if he wants to have a single package that can be deployed in different environments, or if he wants the build tool to provide different packages according to the destination environment.")]),e._v(" "),t("p",[e._v("实际情况更复杂，比如 maven profiles可以用来激活 spring profiles")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://www.baeldung.com/spring-profiles",target:"_blank",rel:"noopener noreferrer"}},[e._v("Spring and Springboot profiles tutorial"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://docs.spring.io/spring-boot/docs/1.0.1.RELEASE/reference/html/howto-properties-and-configuration.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Springboot profiles"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://www.baeldung.com/maven-profiles",target:"_blank",rel:"noopener noreferrer"}},[e._v("Maven profiles tutorial"),t("OutboundLink")],1)]),e._v(" "),t("h5",{attrs:{id:"dependency-mediation-transitive-dependencies"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dependency-mediation-transitive-dependencies"}},[e._v("#")]),e._v(" Dependency mediation/Transitive Dependencies")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  A\n  ├── B\n  │   └── C\n  │       └── D 2.0\n  └── E\n      └── D 1.0\nIn text, dependencies for A, B, and C are defined as A -> B -> C -> D 2.0 and A -> E -> D 1.0, then D 1.0 will be used when building A because the path from A to D through E is shorter. You could explicitly add a dependency to D 2.0 in A to force the use of D 2.0, as shown here:\n  A\n  ├── B\n  │   └── C\n  │       └── D 2.0\n  ├── E\n  │   └── D 1.0\n  │\n  └── D 2.0     \n  \n \n")])])]),t("p",[e._v("Suggestion: 最好指定需要的依赖，而不是使用隐式引用，原因：")]),e._v(" "),t("p",[e._v("Although transitive dependencies can implicitly include desired  dependencies, it is a good practice to explicitly specify the  dependencies your source code uses directly. This best practice proves  its value especially when the dependencies of your project change their  dependencies.")]),e._v(" "),t("p",[e._v("For example, assume that your project A specifies a dependency on  another project B, and project B specifies a dependency on project C. If you are directly using components in project C, and you don't specify  project C in your project A, it may cause build failure when project B  suddenly updates/removes its dependency on project C.")]),e._v(" "),t("p",[e._v("Another reason to directly specify dependencies is that it provides  better documentation for your project: one can learn more information by just reading the POM file in your project, or by executing "),t("strong",[e._v("mvn dependency:tree -Dverbose")])]),e._v(" "),t("h5",{attrs:{id:"excluded-dependencies"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#excluded-dependencies"}},[e._v("#")]),e._v(" Excluded dependencies")]),e._v(" "),t("p",[e._v('If project X depends on project Y, and  project Y depends on project Z, the owner of project X can explicitly  exclude project Z as a dependency, using the "exclusion" element.')]),e._v(" "),t("p",[e._v('If project Y depends on project Z, the owner of project Y can mark  project Z as an optional dependency, using the "optional" element. When  project X depends on project Y, X will depend only on Y and not on Y\'s  optional dependency Z. The owner of project X may then explicitly add a  dependency on Z, at her option. (It may be helpful to think of optional  dependencies as "excluded by default.")')]),e._v(" "),t("h5",{attrs:{id:"dependency-scope"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dependency-scope"}},[e._v("#")]),e._v(" Dependency Scope")]),e._v(" "),t("p",[e._v("compile/provided/runtime/test/system/import")]),e._v(" "),t("h5",{attrs:{id:"dependency-management"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dependency-management"}},[e._v("#")]),e._v(" Dependency Management")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("The dependency management section is a mechanism for centralizing dependency information")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Project A:\n    <project>\n      ...\n      <dependencies>\n        <dependency>\n          <groupId>group-a</groupId>\n          <artifactId>artifact-a</artifactId>\n          <version>1.0</version>\n          <exclusions>\n            <exclusion>\n              <groupId>group-c</groupId>\n              <artifactId>excluded-artifact</artifactId>\n            </exclusion>\n          </exclusions>\n        </dependency>\n        <dependency>\n          <groupId>group-a</groupId>\n          <artifactId>artifact-b</artifactId>\n          <version>1.0</version>\n          <type>bar</type>\n          <scope>runtime</scope>\n        </dependency>\n      </dependencies>\n    </project>\nProject B:\n    <project>\n      ...\n      <dependencies>\n        <dependency>\n          <groupId>group-c</groupId>\n          <artifactId>artifact-b</artifactId>\n          <version>1.0</version>\n          <type>war</type>\n          <scope>runtime</scope>\n        </dependency>\n        <dependency>\n          <groupId>group-a</groupId>\n          <artifactId>artifact-b</artifactId>\n          <version>1.0</version>\n          <type>bar</type>\n          <scope>runtime</scope>\n        </dependency>\n      </dependencies>\n    </project>\n=>\nParent:\n    <project>\n      ...\n      <dependencyManagement>\n        <dependencies>\n          <dependency>\n            <groupId>group-a</groupId>\n            <artifactId>artifact-a</artifactId>\n            <version>1.0</version>\n     \n            <exclusions>\n              <exclusion>\n                <groupId>group-c</groupId>\n                <artifactId>excluded-artifact</artifactId>\n              </exclusion>\n            </exclusions>\n     \n          </dependency>\n     \n          <dependency>\n            <groupId>group-c</groupId>\n            <artifactId>artifact-b</artifactId>\n            <version>1.0</version>\n            <type>war</type>\n            <scope>runtime</scope>\n          </dependency>\n     \n          <dependency>\n            <groupId>group-a</groupId>\n            <artifactId>artifact-b</artifactId>\n            <version>1.0</version>\n            <type>bar</type>\n            <scope>runtime</scope>\n          </dependency>\n        </dependencies>\n      </dependencyManagement>\n    </project>\n    \nProject A:\n    <project>\n      ...\n      <dependencies>\n        <dependency>\n          <groupId>group-a</groupId>\n          <artifactId>artifact-a</artifactId>\n        </dependency>\n     \n        <dependency>\n          <groupId>group-a</groupId>\n          <artifactId>artifact-b</artifactId>\n          \x3c!-- This is not a jar dependency, so we must specify type. --\x3e\n          <type>bar</type>\n        </dependency>\n      </dependencies>\n    </project>\nProject B:\n    <project>\n      ...\n      <dependencies>\n        <dependency>\n          <groupId>group-c</groupId>\n          <artifactId>artifact-b</artifactId>\n          \x3c!-- This is not a jar dependency, so we must specify type. --\x3e\n          <type>war</type>\n        </dependency>\n     \n        <dependency>\n          <groupId>group-a</groupId>\n          <artifactId>artifact-b</artifactId>\n          \x3c!-- This is not a jar dependency, so we must specify type. --\x3e\n          <type>bar</type>\n        </dependency>\n      </dependencies>\n    </project>\n")])])])]),e._v(" "),t("li",[t("p",[e._v("Very important use of the dependency management section is to control the versions of artifacts used in transitive dependencies")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Project A:\n    <project>\n     <modelVersion>4.0.0</modelVersion>\n     <groupId>maven</groupId>\n     <artifactId>A</artifactId>\n     <packaging>pom</packaging>\n     <name>A</name>\n     <version>1.0</version>\n     <dependencyManagement>\n       <dependencies>\n         <dependency>\n           <groupId>test</groupId>\n           <artifactId>a</artifactId>\n           <version>1.2</version>\n         </dependency>\n         <dependency>\n           <groupId>test</groupId>\n           <artifactId>b</artifactId>\n           <version>1.0</version>\n           <scope>compile</scope>\n         </dependency>\n         <dependency>\n           <groupId>test</groupId>\n           <artifactId>c</artifactId>\n           <version>1.0</version>\n           <scope>compile</scope>\n         </dependency>\n         <dependency>\n           <groupId>test</groupId>\n           <artifactId>d</artifactId>\n           <version>1.2</version>\n         </dependency>\n       </dependencies>\n     </dependencyManagement>\n    </project>\n    \nProject B:\n    <project>\n      <parent>\n        <artifactId>A</artifactId>\n        <groupId>maven</groupId>\n        <version>1.0</version>\n      </parent>\n      <modelVersion>4.0.0</modelVersion>\n      <groupId>maven</groupId>\n      <artifactId>B</artifactId>\n      <packaging>pom</packaging>\n      <name>B</name>\n      <version>1.0</version>\n     \n      <dependencyManagement>\n        <dependencies>\n          <dependency>\n            <groupId>test</groupId>\n            <artifactId>d</artifactId>\n            <version>1.0</version>\n          </dependency>\n        </dependencies>\n      </dependencyManagement>\n     \n      <dependencies>\n        <dependency>\n          <groupId>test</groupId>\n          <artifactId>a</artifactId>\n          <version>1.0</version>\n          <scope>runtime</scope>\n        </dependency>\n        <dependency>\n          <groupId>test</groupId>\n          <artifactId>c</artifactId>\n          <scope>runtime</scope>\n        </dependency>\n      </dependencies>\n    </project>\n\nWhen maven is run on project B, version 1.0 of artifacts a, b, c, and d will be used regardless of the version specified in their POM:\n1. a and c both are declared as dependencies of the project so version 1.0 is used due to dependency mediation. Both also have runtime scope since it is directly specified.\n2. b is defined in B's parent's dependency management section and since dependency management takes precedence over dependency mediation for transitive dependencies, version 1.0 will be selected should it be referenced in a or c's POM. b will also have compile scope.\n3. Finally, since d is specified in B's dependency management section, should d be a dependency (or transitive dependency) of a or c, version 1.0 will be chosen - again because dependency management takes precedence over dependency mediation and also because the current POM's declaration takes precedence over its parent's declaration\n")])])])]),e._v(" "),t("li",[t("p",[e._v("projects can import managed dependencies from other projects")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    <project>\n      <modelVersion>4.0.0</modelVersion>\n      <groupId>maven</groupId>\n      <artifactId>B</artifactId>\n      <packaging>pom</packaging>\n      <name>B</name>\n      <version>1.0</version>\n     \n      <dependencyManagement>\n        <dependencies>\n          <dependency>\n            <groupId>maven</groupId>\n            <artifactId>A</artifactId>\n            <version>1.0</version>\n            <type>pom</type>\n            <scope>import</scope>\n          </dependency>\n          <dependency>\n            <groupId>test</groupId>\n            <artifactId>d</artifactId>\n            <version>1.0</version>\n          </dependency>\n        </dependencies>\n      </dependencyManagement>\n     \n      <dependencies>\n        <dependency>\n          <groupId>test</groupId>\n          <artifactId>a</artifactId>\n          <version>1.0</version>\n          <scope>runtime</scope>\n        </dependency>\n        <dependency>\n          <groupId>test</groupId>\n          <artifactId>c</artifactId>\n          <scope>runtime</scope>\n        </dependency>\n      </dependencies>\n    </project>\n    \nAssuming A is the POM defined in the preceding example, the end result would be the same. All of A's managed dependencies would be incorporated into B except for d since it is defined in this POM.\n\nProject X:\n    <project>\n     <modelVersion>4.0.0</modelVersion>\n     <groupId>maven</groupId>\n     <artifactId>X</artifactId>\n     <packaging>pom</packaging>\n     <name>X</name>\n     <version>1.0</version>\n     \n     <dependencyManagement>\n       <dependencies>\n         <dependency>\n           <groupId>test</groupId>\n           <artifactId>a</artifactId>\n           <version>1.1</version>\n         </dependency>\n         <dependency>\n           <groupId>test</groupId>\n           <artifactId>b</artifactId>\n           <version>1.0</version>\n           <scope>compile</scope>\n         </dependency>\n       </dependencies>\n     </dependencyManagement>\n    </project>\nProject Y:\n    <project>\n     <modelVersion>4.0.0</modelVersion>\n     <groupId>maven</groupId>\n     <artifactId>Y</artifactId>\n     <packaging>pom</packaging>\n     <name>Y</name>\n     <version>1.0</version>\n     \n     <dependencyManagement>\n       <dependencies>\n         <dependency>\n           <groupId>test</groupId>\n           <artifactId>a</artifactId>\n           <version>1.2</version>\n         </dependency>\n         <dependency>\n           <groupId>test</groupId>\n           <artifactId>c</artifactId>\n           <version>1.0</version>\n           <scope>compile</scope>\n         </dependency>\n       </dependencies>\n     </dependencyManagement>\n    </project>\nProject Z:\n    <project>\n      <modelVersion>4.0.0</modelVersion>\n      <groupId>maven</groupId>\n      <artifactId>Z</artifactId>\n      <packaging>pom</packaging>\n      <name>Z</name>\n      <version>1.0</version>\n     \n      <dependencyManagement>\n        <dependencies>\n          <dependency>\n            <groupId>maven</groupId>\n            <artifactId>X</artifactId>\n            <version>1.0</version>\n            <type>pom</type>\n            <scope>import</scope>\n          </dependency>\n          <dependency>\n            <groupId>maven</groupId>\n            <artifactId>Y</artifactId>\n            <version>1.0</version>\n            <type>pom</type>\n            <scope>import</scope>\n          </dependency>\n        </dependencies>\n      </dependencyManagement>\n    </project>\n    \nIn the example above Z imports the managed dependencies from both X and Y. However, both X and Y contain dependency a. Here, version 1.1 of a would be used since X is declared first and a is not declared in Z's dependencyManagement.\n\nThis process is recursive. For example, if X imports another POM, Q, when Z is processed it will simply appear that all of Q's managed dependencies are defined in X.\n")])])])]),e._v(" "),t("li",[t("p",[e._v("Bill of Materials (BOM) POMs")]),e._v(" "),t("p",[e._v('Imports are most effective when used for defining a "library" of  related artifacts that are generally part of a multiproject build. It is fairly common for one project to use one or more artifacts from these  libraries. However, it has sometimes been difficult to keep the versions in the project using the artifacts in synch with the versions  distributed in the library. The pattern below illustrates how a "bill of materials" (BOM) can be created for use by other projects.')]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('The root of the project is the BOM POM. It defines the versions of  all the artifacts that will be created in the library. Other projects  that wish to use the library should import this POM into the  dependencyManagement section of their POM.\n\n<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n      <modelVersion>4.0.0</modelVersion>\n      <groupId>com.test</groupId>\n      <artifactId>bom</artifactId>\n      <version>1.0.0</version>\n      <packaging>pom</packaging>\n      <properties>\n        <project1Version>1.0.0</project1Version>\n        <project2Version>1.0.0</project2Version>\n      </properties>\n     \n      <dependencyManagement>\n        <dependencies>\n          <dependency>\n            <groupId>com.test</groupId>\n            <artifactId>project1</artifactId>\n            <version>${project1Version}</version>\n          </dependency>\n          <dependency>\n            <groupId>com.test</groupId>\n            <artifactId>project2</artifactId>\n            <version>${project2Version}</version>\n          </dependency>\n        </dependencies>\n      </dependencyManagement>\n     \n      <modules>\n        <module>parent</module>\n      </modules>\n    </project>\n    \nThe parent subproject has the BOM POM as its parent. It is a normal multiproject pom.\n    <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n      <modelVersion>4.0.0</modelVersion>\n      <parent>\n        <groupId>com.test</groupId>\n        <version>1.0.0</version>\n        <artifactId>bom</artifactId>\n      </parent>\n     \n      <groupId>com.test</groupId>\n      <artifactId>parent</artifactId>\n      <version>1.0.0</version>\n      <packaging>pom</packaging>\n     \n      <dependencyManagement>\n        <dependencies>\n          <dependency>\n            <groupId>log4j</groupId>\n            <artifactId>log4j</artifactId>\n            <version>1.2.12</version>\n          </dependency>\n          <dependency>\n            <groupId>commons-logging</groupId>\n            <artifactId>commons-logging</artifactId>\n            <version>1.1.1</version>\n          </dependency>\n        </dependencies>\n      </dependencyManagement>\n      <modules>\n        <module>project1</module>\n        <module>project2</module>\n      </modules>\n    </project>\n    \nNext are the actual project POMs.\n    <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n      <modelVersion>4.0.0</modelVersion>\n      <parent>\n        <groupId>com.test</groupId>\n        <version>1.0.0</version>\n        <artifactId>parent</artifactId>\n      </parent>\n      <groupId>com.test</groupId>\n      <artifactId>project1</artifactId>\n      <version>${project1Version}</version>\n      <packaging>jar</packaging>\n     \n      <dependencies>\n        <dependency>\n          <groupId>log4j</groupId>\n          <artifactId>log4j</artifactId>\n        </dependency>\n      </dependencies>\n    </project>\n     \n    <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n      <modelVersion>4.0.0</modelVersion>\n      <parent>\n        <groupId>com.test</groupId>\n        <version>1.0.0</version>\n        <artifactId>parent</artifactId>\n      </parent>\n      <groupId>com.test</groupId>\n      <artifactId>project2</artifactId>\n      <version>${project2Version}</version>\n      <packaging>jar</packaging>\n     \n      <dependencies>\n        <dependency>\n          <groupId>commons-logging</groupId>\n          <artifactId>commons-logging</artifactId>\n        </dependency>\n      </dependencies>\n    </project>\n    \nThe project that follows shows how the library can now be used in another project without having to specify the dependent project\'s versions.\n    <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n      <modelVersion>4.0.0</modelVersion>\n      <groupId>com.test</groupId>\n      <artifactId>use</artifactId>\n      <version>1.0.0</version>\n      <packaging>jar</packaging>\n     \n      <dependencyManagement>\n        <dependencies>\n          <dependency>\n            <groupId>com.test</groupId>\n            <artifactId>bom</artifactId>\n            <version>1.0.0</version>\n            <type>pom</type>\n            <scope>import</scope>\n          </dependency>\n        </dependencies>\n      </dependencyManagement>\n      <dependencies>\n        <dependency>\n          <groupId>com.test</groupId>\n          <artifactId>project1</artifactId>\n        </dependency>\n        <dependency>\n          <groupId>com.test</groupId>\n          <artifactId>project2</artifactId>\n        </dependency>\n      </dependencies>\n    </project>\n')])])])]),e._v(" "),t("li",[t("p",[e._v("sub Project不需要指定parent的版本号")]),e._v(" "),t("p",[e._v("https://stackoverflow.com/questions/10582054/maven-project-version-inheritance-do-i-have-to-specify-the-parent-version")]),e._v(" "),t("p",[e._v("Starting with Maven 3.5.0-beta-1 you can use the "),t("code",[e._v("${revision}")]),e._v(", "),t("code",[e._v("${sha1}")]),e._v("  and/or "),t("code",[e._v("${changelist}")]),e._v(" as placeholders for the version in your pom file.  https://maven.apache.org/maven-ci-friendly.html")])])]),e._v(" "),t("h5",{attrs:{id:"依赖冲突"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#依赖冲突"}},[e._v("#")]),e._v(" 依赖冲突")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" \n  Project A: some-framework version 1.2.0-SNAPSHOT\n  │\t\t\t[\n  │\t\t\t\tsub moduels: \n  │\t\t\t\tsome-framework-model ${project.version}\n  │\t\t\t\t......\n  │\t\t\t]\n  ├── SubProject A-1: test-A\n  │\t\t\t\t\t\t└── Dependency: some-framework-model\n  │   \n  └── Project B: some-project version 0.8.0-SNAPSHOT\n      └── SubProejct B-1: some-project-service \n      \t\t└── Dependency: some-framework-model\n      \t\t\n注意到，\n当我在 Project A的parent的pom里面的dependencyManagement里使用 ${project.version} 来声明 some-framework-model的版本，编译SubProject A-1: test-A的时候可以正确找到 some-framework-model 比如1.2.0-SNAPSHOT；\n但是当编译Project B的时候就出现问题了，因为SubProejct B-1: some-project-service 并不是去找some-framework-model 1.2.0-SNAPSHOT 而是去找 some-framework-model 0.8.0-SNAPSHOT；\n显然SubProejct B-1找错了，可能是maven的这个${project.version}被Project B继承下来，然后简单的替换成了0.8.0，而不是沿用Project A的版本1.2.0-SNAPSHOT\n")])])]),t("p",[e._v("引入第三方jar资源 注意事项:")]),e._v(" "),t("p",[e._v("1、引入任何第三方jar之前,查看一下平台framework-parent.pom中是否已经包含(或间接依赖引入),存在时请不要再次引入;\n2、如果引入的第三方jar与平台存在版本不一致的地方,请在此处做maven依赖引用剔除,剔除方法还是参见framework-parent.pom中的dependencyManagement部分;\n3、在当前dependencyManagement依赖管理中定义jar版本信息必须在properties属性中统一明确定义,便于集中版本维护管理与问题排查;\n4、在当前业务工程内的各业务子模块禁止出现版本(version)标签信息。")]),e._v(" "),t("p",[e._v("解决方法：\nmvn dependency:tree -Dverbose")]),e._v(" "),t("ul",[t("li",[e._v("将依赖的 scope 改成 provided")]),e._v(" "),t("li",[e._v("显示的 exclusive 掉相关依赖")]),e._v(" "),t("li",[e._v("对 class 进行 shade 操作")])]),e._v(" "),t("p",[e._v("https://maven.apache.org/guides/introduction/introduction-to-the-pom.html\nhttps://maven.apache.org/guides/introduction/introduction-to-profiles.html\nm2 repository\nC:\\Users\\lyhistory.m2\\repository")]),e._v(" "),t("p",[e._v("Project Inheritance vs Project Aggregation\nProject Interpolation and Variables\nGuide to creating assemblies https://maven.apache.org/guides/mini/guide-assemblies.html")]),e._v(" "),t("p",[e._v("https://search.maven.org/")]),e._v(" "),t("p",[e._v("?#.Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.12:test (default-test) on project.\nhttps://stackoverflow.com/questions/36427868/failed-to-execute-goal-org-apache-maven-pluginsmaven-surefire-plugin2-12test")]),e._v(" "),t("p",[e._v("?#.invalid LOC header (bad signature)/repo.maven.apache.org: Unknown host repo.maven.apache.org/Maven install error: Dependency could not be resolved")]),e._v(" "),t("ol",[t("li",[e._v("Delete .m2\\repository\\org\\apache\\maven")]),e._v(" "),t("li",[e._v("mvn dependency:resolve -X")])]),e._v(" "),t("p",[e._v("自定义maven repository: e.g nexus repository")]),e._v(" "),t("h4",{attrs:{id:"_4-2-3-lifecycle"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-3-lifecycle"}},[e._v("#")]),e._v(" 4.2.3 Lifecycle")]),e._v(" "),t("p",[e._v("https://maven.apache.org/plugins/index.html")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Standard Lifecycle using core plugin：\nhttps://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html")]),e._v(" "),t("ul",[t("li",[e._v("validate - validate the project is correct and all necessary information is available")]),e._v(" "),t("li",[e._v("compile - compile the source code of the project")]),e._v(" "),t("li",[e._v("test - test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed")]),e._v(" "),t("li",[e._v("package - take the compiled code and package it in its distributable format, such as a JAR.")]),e._v(" "),t("li",[e._v("verify - run any checks on results of integration tests to ensure quality criteria are met")]),e._v(" "),t("li",[e._v("install - install the package into the local repository, for use as a dependency in other projects locally")]),e._v(" "),t("li",[e._v("deploy - done in the build environment, copies the final package to the remote repository for sharing with other developers and projects.")])])]),e._v(" "),t("li",[t("p",[e._v("Non-Standard Lifecycle, for example Tools:")]),e._v(" "),t("ul",[t("li",[e._v("mvn version https://www.mojohaus.org/versions-maven-plugin/usage.html")]),e._v(" "),t("li",[e._v("mvn release https://maven.apache.org/maven-release/maven-release-plugin/")])])])]),e._v(" "),t("h5",{attrs:{id:"config"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#config"}},[e._v("#")]),e._v(" Config")]),e._v(" "),t("p",[t("strong",[e._v("项目pom配置plugin")])]),e._v(" "),t("p",[e._v("maven & maven.plugins & dependencies")]),e._v(" "),t("p",[e._v("https://stackoverflow.com/questions/11881663/what-is-the-difference-in-maven-between-dependency-and-plugin-tags-in-pom-xml")]),e._v(" "),t("p",[e._v("spring-boot-maven-plugin vs maven-compiler-plugin")]),e._v(" "),t("p",[e._v("https://stackoverflow.com/questions/57687485/whats-the-difference-between-spring-boot-maven-plugin-and-maven-compiler-plu")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\nVS\n\n<build>\n        <plugins>\n            \x3c!-- JDK level --\x3e\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.1</version>\n                <configuration>\n                    <source>1.8</source>\n                    <target>1.8</target>\n                    <encoding>UTF-8</encoding>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-resources-plugin</artifactId>\n                <configuration>\n                    <nonFilteredFileExtensions>\n                        <nonFilteredFileExtension>dll</nonFilteredFileExtension>\n                        <nonFilteredFileExtension>so</nonFilteredFileExtension>\n                    </nonFilteredFileExtensions>\n                </configuration>\n            </plugin>\n\n            \x3c!-- 更新: mvn versions:set -DnewVersion=1.0.4-SNAPSHOT versions:update-child-modules\n                回滚: mvn versions:revert 提交: mvn versions:commit --\x3e\n            <plugin>\n                <groupId>org.codehaus.mojo</groupId>\n                <artifactId>versions-maven-plugin</artifactId>\n                <version>2.7</version>\n            </plugin>\n\n        </plugins>\n\n        <resources>\n            <resource>\n                <directory>src/main/resources</directory>\n                <filtering>true</filtering>\n                <excludes>\n                    <exclude>application.properties</exclude>\n                </excludes>\n            </resource>\n        </resources>\n\n    </build>\n\n")])])]),t("p",[t("strong",[e._v("项目pom配置repository")])]),e._v(" "),t("p",[e._v("https://stackoverflow.com/questions/35317118/repository-tag-under-distributionmanagement-vs-repositories")]),e._v(" "),t("ul",[t("li",[e._v("Repositories declared under the "),t("code",[e._v("distributionManagement")]),e._v(" element will be used for deployment, i.e. when running "),t("code",[e._v("mvn deploy")]),e._v(".")]),e._v(" "),t("li",[e._v("The "),t("code",[e._v("repositories")]),e._v(" element will be used for downloading dependencies of the project. The command is not necessarily "),t("code",[e._v("mvn install")]),e._v(" but any command that requires Maven to fetch artifacts from a repository.")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<distributionManagement>\n    <repository>\n        <id>...</id>\n        <name>...</name>\n        <url>...</url>\n    </repository>\n</distributionManagement> \n\n<repositories>\n    <repository>\n        <id>...</id>\n        <name>...</name>\n        <layout>default</layout>\n        <url>...</url>\n    </repository>\n</repositories>\n")])])]),t("p",[t("strong",[e._v("全局配置")])]),e._v(" "),t("p",[e._v("%USER_HOME%/.m2/settings.xml:")]),e._v(" "),t("p",[e._v("https://stackoverflow.com/questions/32057282/maven-distributionmanagement-or-server-user-and-password-as-parameter")]),e._v(" "),t("p",[t("strong",[e._v("CI配置")])]),e._v(" "),t("p",[e._v("https://docs.gitlab.com/ee/user/packages/maven_repository/#create-maven-packages-with-gitlab-cicd-by-using-maven")]),e._v(" "),t("h5",{attrs:{id:"commands"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#commands"}},[e._v("#")]),e._v(" Commands")]),e._v(" "),t("p",[e._v("mvn versions:set -DnewVersion=1.0.3-SNAPSHOT\nmvn versions:set -DgroupId=org.apache.maven.* -DartifactId=* -DoldVersion=2.* -DnewVersion=2.1.0-SNAPSHOT")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("mvn install command runs the install plugin used in the install phase to add artifact(s) to the local repository. The Install Plugin uses the information in the POM (groupId, artifactId, version) to determine the proper location of the artifact within the local repository.")]),e._v(" "),t("p",[e._v("The local repository is the local cache where all artifacts needed for the build are stored. By default, it is located in the user's home directory (~/.m2/repository) but the location can be configured in ~/.m2/settings.xml using the localRepository element")])]),e._v(" "),t("li",[t("p",[e._v("mvn deploy runs the deploy plugin which deploys an artifact to the remote repository")])]),e._v(" "),t("li",[t("p",[e._v("mvn release command runs the release plugin which is responsible for tagging the current code in the source control. In order to use the maven release plugin, you need to add the SCM section with a developerConnection which contains the URL of the source control management system pointing to the folder containing the pom.xml.")]),e._v(" "),t("p",[e._v("release:clean : performs clean-up after a release preparation.")]),e._v(" "),t("p",[e._v("release:prepare : prepare for a release in SCM.")]),e._v(" "),t("p",[e._v("release:rollback : rollback a previous release.")]),e._v(" "),t("p",[e._v("release:perform :  perform a release from SCM. This is the command which actually does the release by downloading the tagged version from SCM e.g. SVN or CVS or Git")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('\nmvn clean build -Dmaven.test.skip=true\nmvn clean install -DskipTests\nmvn clean install -P<profileName> \nmvn compile exec:java (for sprint-boot alternative: mvn spring-boot:run)\n\nmvn -q -Dexec.executable="echo" -Dexec.args=\'${project.version}\' --non-recursive org.codehaus.mojo:exec-maven-plugin:1.6.0:exec\n\n--------------------------------------------------------------------------------\n--- release\n--------------------------------------------------------------------------------\nTarget Project：\n<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>com.lyhistory.redis</groupId>\n\t<artifactId>test-spring-redis</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t...............\n</project>\n\nThe standard Maven plugin used by a Release Process is the maven-release-plugin – the configuration for this plugin is minimal:\n<plugin>\n   <groupId>org.apache.maven.plugins</groupId>\n   <artifactId>maven-release-plugin</artifactId>\n   <version>2.4.2</version>\n   <configuration>\n      <tagNameFormat>v@{project.version}</tagNameFormat>\n      <autoVersionSubmodules>true</autoVersionSubmodules>\n      <releaseProfiles>releases</releaseProfiles>\n   </configuration>\n</plugin>\n\nThe Release process will interact with the Source Control of the project – this means we first need to define the <scm> element in our pom.xml:\n<scm>\n    <connection>scm:git:http://xxxxx/test.git</connection>\n    <developerConnection>scm:git:http://xxxxx/test.git\n    </developerConnection>\n    <url>http://xxxxx/test</url>\n    <tag>HEAD</tag>\n</scm>\nor using the git protocol:\n<scm>\n   <connection>scm:git:git@github.com:user/project.git</connection>\n   <url>scm:git:git@github.com:user/project.git</url>\n   <developerConnection>scm:git:git@github.com:user/project.git</developerConnection>\n</scm>\n    \nmvn clean -DskipTests -Darguments=-DskipTests release:prepare -e -DreleaseVersion=1.0.3 -DdevelopmentVersion=1.0.4-SNAPSHOT -Dtag="20211008-1.0.3" -DscmDevelopmentCommitComment="prepare for next development iteration 1.0.4-SNAPSHOT"\n\nIn order for Maven to be able to release to a Nexus Repository Server, we need to define the repository information via the distributionManagement element:\n<distributionManagement>\n   <repository>\n      <id>nexus-releases</id>\n      <url>http://localhost:8081/nexus/content/repositories/releases</url>\n   </repository>\n</distributionManagement>\n\nmvn release:rollback\nmvn release:perform -e -Darguments="-Dmaven.javadoc.skip=true" -s ci_settings.xml\n\n\n#?Cannot prepare the release because you have local modifications :[pom.xml:modified]\n提交pom改动到git\n#?Caused by: org.apache.maven.shared.release.ReleaseFailureException: You don\'t have a SNAPSHOT project in the reactor projects list\npom中version必须是SNAPSHOT后缀 <version>XXX-SNAPSHOT</version>\n\n')])])]),t("p",[e._v("-DskipTests VS -Dmaven.test.skip=true")]),e._v(" "),t("p",[e._v("Maven -> Update Projects\nMaven package\nethereumj-core maven package https://github.com/ethereum/ethereumj/issues/1018")]),e._v(" "),t("p",[e._v("https://gerardnico.com/maven/bin\nUnsupported major.minor version 52.0 https://blog.csdn.net/qq_36769100/article/details/78880341\n打包\nmaven 生成可执行jar并使用shell脚本运行 https://blog.csdn.net/hg_harvey/article/details/79076939\nMaven打包的三种方式 https://blog.csdn.net/daiyutage/article/details/53739452")]),e._v(" "),t("p",[e._v("Maven 发布deploy到remote/internal repository\nhttps://maven.apache.org/guides/introduction/introduction-to-repositories.html\nhttps://maven.apache.org/plugins/maven-deploy-plugin/usage.html")]),e._v(" "),t("p",[e._v("Dependencies show in file icon\nhttps://stackoverflow.com/questions/45291243/maven-dependency-jar-file-displayed-as-folder-icon/45291377\nSet mvn version in eclipse: Preferences->Maven->Installations")]),e._v(" "),t("p",[e._v("?#issues: maven unknown lifecycle phase exec\nDon’t use powershell , use cmd instead!!!!!!!https://stackoverflow.com/questions/7576265/maven-exec-plugin-throws-exception-for-no-apparent-reason")]),e._v(" "),t("h4",{attrs:{id:"_4-2-4-remote-debug"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-4-remote-debug"}},[e._v("#")]),e._v(" 4.2.4 Remote Debug")]),e._v(" "),t("p",[e._v("前面已经提到了很多debug方式包括远程调试，这里maven还有自己的特有方式：\nhttps://maven.apache.org/surefire/maven-surefire-plugin/examples/debugging.html")]),e._v(" "),t("p",[e._v("命令行执行: mvnDebug -DforkCount=0 test\n然后在ECLIPSE: Debug Configuration->Remote Java Application->maven surfire->Connect(Remote IP&Port)&Source")]),e._v(" "),t("p",[e._v("Haven’t solve, why mvn -Dmaven.surefire.debug test not working?\nWith , maybe because of using powershell, should try cmd instead\nhttps://www.cnblogs.com/sylvia-liu/articles/4685130.html")]),e._v(" "),t("h4",{attrs:{id:"_4-2-5-nexus-maven-repositories"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-5-nexus-maven-repositories"}},[e._v("#")]),e._v(" 4.2.5 nexus maven-repositories")]),e._v(" "),t("h5",{attrs:{id:"nexus-server-setup"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nexus-server-setup"}},[e._v("#")]),e._v(" Nexus server setup")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://help.sonatype.com/repomanager2/installing-and-running",target:"_blank",rel:"noopener noreferrer"}},[e._v("Nexus Installing and Running"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("Repositories => Create Repository:")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("Maven public repo\nRepository ID: maven-central\nRepository Name: maven-central\nProvider: Maven2\nVersion Policy: Release\nType: Proxy\nURL:http://xxxxx/repository/maven-central (xxxxx is your nexus repo ip:port or customized domainname)\nRemote Storage(Location of the remote repository being proxied, e.g. https://repo1.maven.org/maven2/): https://repo1.maven.org/maven2/")])]),e._v(" "),t("li",[t("p",[e._v("Custom snapshot repo\nRepository ID: maven-snapshots\nRepository Name: maven-snapshots\nVersion Policy: Snapshot\nType: hosted\nURL:http://xxxxx/repository/maven-snapshots (xxxxx is your nexus repo ip:port or customized domainname)")])]),e._v(" "),t("li",[t("p",[e._v("Custom release repo\nRepository ID: maven-snapshots\nRepository Name: maven-snapshots\nVersion Policy: Snapshot\nType: hosted\nURL:http://xxxxx/repository/maven-releases (xxxxx is your nexus repo ip:port or customized domainname)")])])]),e._v(" "),t("h5",{attrs:{id:"maven-project-config"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#maven-project-config"}},[e._v("#")]),e._v(" Maven Project config")]),e._v(" "),t("p",[e._v("https://www.baeldung.com/maven-deploy-nexus\nhttps://www.baeldung.com/maven-snapshot-release-repository")]),e._v(" "),t("h6",{attrs:{id:"deploy-to-custom-snapshot-release-repo-mvn-deploy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#deploy-to-custom-snapshot-release-repo-mvn-deploy"}},[e._v("#")]),e._v(' deploy to "Custom snapshot/release repo"- mvn deploy')]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  \x3c!-- Publish the versioned releases here --\x3e\n \x3c!-- 配置远程发布到私服,mvn deploy --\x3e\n    <distributionManagement>\n        <repository>\n            <id>nexus</id>\n            <name>Nexus Release Repository</name>\n            <url>http://XXXXX/repository/maven-releases/</url>\n        </repository>\n        <snapshotRepository>\n            <id>nexus</id>\n            <name>Nexus Snapshot Repository</name>\n            <url>http://XXXXX/repository/maven-snapshots/</url>\n        </snapshotRepository>\n    </distributionManagement>\n")])])]),t("p",[e._v("ci_settings.xml:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<settings>\n  <servers>\n    <server>\n        <id>nexus-snapshots</id>\n        <username>deployment</username>\n        <password>the_pass_for_the_deployment_user</password>\n    </server>\n  </servers>\n</settings>\n")])])]),t("p",[t("strong",[e._v("SNAPSHOT:")]),e._v("\nThe snapshot repository is a repository used for incremental, unreleased artifact versions.")]),e._v(" "),t("p",[e._v("A snapshot version is a version that has not yet been released. The general idea is to have a snapshot version before the released version. It allows us to deploy the same transient version incrementally, without requiring projects to upgrade the artifact version they're consuming. Those projects can use the same version to get an updated snapshot version.")]),e._v(" "),t("p",[e._v("For instance, before releasing version 1.0.0, we can have its snapshot version. The snapshot version has a SNAPSHOT suffix after the version (for example, 1.0.0-SNAPSHOT).")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<groupId>com.baeldung</groupId>\n<artifactId>maven-snapshot-repository</artifactId>\n<version>1.0.0-SNAPSHOT</version>\n")])])]),t("p",[e._v("After the deployment, the actual artifact version will contain a timestamp value instead of the SNAPSHOT value. For instance, when we deploy 1.0.0-SNAPSHOT, the actual value will contain the current timestamp and the build number (for example, 1.0.0-20220709.063105-3).")]),e._v(" "),t("p",[e._v("The timestamp value is calculated during the artifact deployment. Maven generates the checksum and uploads the artifact’s files with the same timestamp.")]),e._v(" "),t("p",[e._v("The maven-metadata.xml file holds precise information about the snapshot version and its link to the latest timestamp value:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<metadata modelVersion="1.1.0">\n    <groupId>com.baeldung</groupId>\n    <artifactId>maven-snapshot-repository</artifactId>\n    <version>1.0.0-SNAPSHOT</version>\n    <versioning>\n        <snapshot>\n            <timestamp>20220709.063105</timestamp>\n            <buildNumber>3</buildNumber>\n        </snapshot>\n        <lastUpdated>20220709063105</lastUpdated>\n        <snapshotVersions>\n            <snapshotVersion>\n                <extension>jar</extension>\n                <value>1.0.0-20220709.063105-3</value>\n                <updated>20220709063105</updated>\n            </snapshotVersion>\n            <snapshotVersion>\n                <extension>pom</extension>\n                <value>1.0.0-20220709.063105-3</value>\n                <updated>20220709063105</updated>\n            </snapshotVersion>\n        </snapshotVersions>\n    </versioning>\n</metadata>\n')])])]),t("p",[e._v("Every time we deploy the project under the same snapshot version, Maven will generate the version containing the new timestamp value and the new build number.")]),e._v(" "),t("p",[t("strong",[e._v("RELEASE:")])]),e._v(" "),t("p",[e._v("Once we remove the word SNAPSHOT from the project version, the release repository will be chosen automatically instead of the snapshot repository during the deployment.")]),e._v(" "),t("p",[e._v("Furthermore, if we want to redeploy the artifact under the same version, we may get an error: “Repository does not allow updating assets”. Once we deploy the released artifact version, we cannot change its content. Therefore, to resolve the problem, we’d need to simply release the next version.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<groupId>com.baeldung</groupId>\n<artifactId>maven-release-repository</artifactId>\n<version>1.0.0</version>\n")])])]),t("p",[t("strong",[e._v("Note:")])]),e._v(" "),t("ol",[t("li",[e._v("发布 SNAPSHOT 版本， 使用 mvn deploy -e -s ci_settings.xml")]),e._v(" "),t("li",[e._v("发布 RELEASE 版本， 可以使用 mvn deploy -e -s ci_settings.xml\n或者\n"),t("code",[e._v('mvn release:prepare -e -DreleaseVersion=0.0.1-SNAPSHOT -DdevelopmentVersion=0.0.1-SNAPSHOT -Dtag="20230523-0.0.1-SNAPSHOT" -DscmDevelopmentCommitComment="prepare for next development iteration 0.0.1-SNAPSHOT"')]),e._v(" "),t("code",[e._v('mvn release:perform -e -Darguments="-Dmaven.javadoc.skip=true -Dmaven.test.skip=true" -s ci_settings.xml')])])]),e._v(" "),t("h6",{attrs:{id:"download-from-proxied-maven-central-and-hosted-snapshot-release-mvn-install"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#download-from-proxied-maven-central-and-hosted-snapshot-release-mvn-install"}},[e._v("#")]),e._v(' download from "proxied maven-central and hosted snapshot/release"- mvn install')]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\x3c!-- download artifacts from this repo --\x3e    \n<repositories>\n        <repository>\n            <id>maven-repo</id>\n            <url>http://xxxxx/repository/maven-central/</url>\n        </repository>\n        <repository>\n            <id>nexus-snapshot</id>\n            <url>http://xxxxx/repository/maven-snapshots/</url>\n            <snapshots>\n              <enabled>true</enabled>\n            </snapshots>\n            <releases>\n                <enabled>false</enabled>\n            </releases>\n        </repository>\n        <repository>\n            <id>nexus-release</id>\n            <url>http://xxxxx/repository/maven-releases/</url>\n        </repository>\n    </repositories>\n")])])]),t("p",[t("strong",[e._v("SNAPSHOT:")])]),e._v(" "),t("p",[e._v("Before downloading the snapshot artifact, Maven downloads its associated maven-metadata.xml file. That way, Maven can check if there's a newer version, based on the timestamp value and build number.")]),e._v(" "),t("p",[e._v("The retrieval of such an artifact can still use the SNAPSHOT version.")]),e._v(" "),t("p",[e._v("Snapshot versions are not enabled by default. We need to enable them manually:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<snapshots>\n    <enabled>true</enabled>\n</snapshots>\n")])])]),t("p",[e._v("By enabling snapshots, we can define how often we'd like to check for a newer version of the SNAPSHOT artifacts. However, the default update policy is set to once per day. We can override this behavior by setting a different update policy:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<snapshots>\n    <enabled>true</enabled>\n    <updatePolicy>always</updatePolicy>\n</snapshots>\n")])])]),t("p",[e._v("There are four different values we can place inside the updatePolicy element:")]),e._v(" "),t("p",[e._v("always — check for a newer version every time\ndaily (default value) — check for a newer version once a day\ninterval:mm — check for a newer version based on an interval set in minutes\nnever — never try to get a newer version (compared to the one we already have locally)\nAdditionally, instead of defining the updatePolicy, we can force an update of all snapshot artifacts by passing the -U argument in the command:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("mvn install -U\n")])])]),t("p",[e._v("Furthermore, the dependency will not be re-downloaded if it has already been downloaded and the checksum is the same as the one we already have in our local repository.\nNext, we can add a snapshot version of an artifact to our project:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<dependencies>\n    <dependency>\n        <groupId>com.baeldung</groupId>\n        <artifactId>maven-snapshot-repository</artifactId>\n        <version>1.0.0-SNAPSHOT</version>\n    </dependency>\n</dependencies>\n")])])]),t("p",[e._v("Using a snapshot version during the development phase can prevent having multiple versions of the artifact. We can use the same SNAPSHOT version whose build will contain the snapshot of our code at a given time.")]),e._v(" "),t("p",[t("strong",[e._v("RELEASE:")])]),e._v(" "),t("p",[e._v("Maven defaults to looking for components from the Maven Central Repository. This repository uses a release version policy by default.")]),e._v(" "),t("p",[e._v("Release repositories will only resolve released artifacts. In other words, it should contain only published artifact versions whose content should not change in the future.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<dependencies>\n    <dependency>\n        <groupId>com.baeldung</groupId>\n        <artifactId>maven-release-repository</artifactId>\n        <version>1.0.0</version>\n    </dependency>\n</dependencies>\n")])])]),t("h4",{attrs:{id:"_4-2-6-toolchain"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-6-toolchain"}},[e._v("#")]),e._v(" 4.2.6 toolchain")]),e._v(" "),t("p",[e._v("apache-maven-3.6.1\\bin..\\conf\\settings.xml\n.m2\\settings.xml\napache-maven-3.6.1\\bin..\\conf\\toolchains.xml\n.m2\\toolchains.xml")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('>mvn -X clean install\nApache Maven 3.6.1 (d66c9c0b3152b2e69ee9bac180bb8fcc8e6af555; 2019-04-05T03:00:29+08:00)\nMaven home: C:\\Dev\\apache-maven-3.6.1\\bin\\..\nJava version: 1.8.0_42, vendor: Oracle Corporation, runtime: C:\\Program Files\\Java\\openjdk-8u42-b03-windows-i586-14_jul_2022\\java-se-8u42-ri\\jre\nDefault locale: en_SG, platform encoding: Cp1252\nOS name: "windows 8.1", version: "6.3", arch: "x86", family: "windows"\n[DEBUG] Created new class realm maven.api\n[DEBUG] Importing foreign packages into class realm maven.api\n[DEBUG]   Imported: javax.annotation.* < plexus.core\n[DEBUG]   Imported: javax.annotation.security.* < plexus.core\n[DEBUG]   Imported: javax.enterprise.inject.* < plexus.core\n[DEBUG]   Imported: javax.enterprise.util.* < plexus.core\n[DEBUG]   Imported: javax.inject.* < plexus.core\n[DEBUG]   Imported: org.apache.maven.* < plexus.core\n[DEBUG]   Imported: org.apache.maven.artifact < plexus.core\n[DEBUG]   Imported: org.apache.maven.classrealm < plexus.core\n.........................................................................\n[DEBUG] Populating class realm maven.api\n[INFO] Error stacktraces are turned on.\n[DEBUG] Message scheme: color\n[DEBUG] Message styles: debug info warning error success failure strong mojo project\n[DEBUG] Reading global settings from C:\\Dev\\apache-maven-3.6.1\\bin\\..\\conf\\settings.xml\n[DEBUG] Reading user settings from C:\\Users\\yue.liu\\.m2\\settings.xml\n[DEBUG] Reading global toolchains from C:\\Dev\\apache-maven-3.6.1\\bin\\..\\conf\\toolchains.xml\n[DEBUG] Reading user toolchains from C:\\Users\\yue.liu\\.m2\\toolchains.xml\n[DEBUG] Using local repository at C:\\Users\\yue.liu\\.m2\\repository\n[DEBUG] Using manager EnhancedLocalRepositoryManager with priority 10.0 for C:\\Users\\yue.liu\\.m2\\repository\n[INFO] Scanning for projects...\n[DEBUG] Extension realms for project ngs.apex.com:ngs-kafka-redis:jar:1.0-SNAPSHOT: (none)\n[DEBUG] Looking up lifecycle mappings for packaging jar from ClassRealm[plexus.core, parent: null]\n[DEBUG] === REACTOR BUILD PLAN ================================================\n[DEBUG] Project: XXXXX\n[DEBUG] Tasks:   [clean, install]\n[DEBUG] Style:   Regular\n\n')])])]),t("h2",{attrs:{id:"_5-java-virtual-machine-jvm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-java-virtual-machine-jvm"}},[e._v("#")]),e._v(" 5. JAVA Virtual Machine JVM")]),e._v(" "),t("p",[t("RouterLink",{attrs:{to:"/software/programming/java_jvm.html"}},[e._v("refer to java_jvm")])],1),e._v(" "),t("p",[e._v("Refer:\nhttps://blog.csdn.net/wuxiaolongah/article/details/119333948?spm=1001.2101.3001.6650.6&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EOPENSEARCH%7ERate-6-119333948-blog-6333467.pc_relevant_multi_platform_whitelistv4&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EOPENSEARCH%7ERate-6-119333948-blog-6333467.pc_relevant_multi_platform_whitelistv4&utm_relevant_index=9\nhttps://developer.aliyun.com/article/608529\n案例分享：如何通过JVM crash 的日志和core dump定位和分析Instrument引起的JVM crash\nhttps://blog.csdn.net/raintungli/article/details/77790829\nhttps://blog.csdn.net/qq_31865983/article/details/98480703")]),e._v(" "),t("p",[e._v("https://docs.oracle.com/en/java/javase/17/troubleshoot/troubleshooting-memory-leaks.html#GUID-19F6D28E-75A1-4480-9879-D0932B2F305B\nhttp://hengyunabc.github.io/spring-boot-application-start-analysis/\nhttps://www.oschina.net/question/1263216_2267259\nhttps://blog.csdn.net/arkblue/article/details/39718947\nhttps://www.bilibili.com/read/cv1844967/")]),e._v(" "),t("p",[e._v("troubleshooting with hotspot vm\nhttps://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/index.html\nhttps://enos.itcollege.ee/~jpoial/allalaadimised/reading/JVM_Troubleshooting_Guide.pdf\nhttps://www.javaadvent.com/2021/12/diagnosing_a_jvm_crash.html")]),e._v(" "),t("p",[e._v("https://www.javaadvent.com/2021/12/diagnosing_a_jvm_crash.html\nhttps://docs.oracle.com/cd/E13150_01/jrockit_jvm/jrockit/geninfo/diagnos/dumpfile.html")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("ref:")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/PlamenStilyianov/Java/blob/master/Charlie%20Hunt%2C%20Binu%20John%20-%20Java%20Performance%20-%202011.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("圣经《JAVA Performance》"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/eugenp/tutorials",target:"_blank",rel:"noopener noreferrer"}},[e._v("Java和Spring全面demo源码"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://www.jianshu.com/p/d168ecdce022",target:"_blank",rel:"noopener noreferrer"}},[e._v("Java远程调试（Remote Debugging）的那些事"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("Java外挂\nhttps://www.codercto.com/a/18543.html\nhttps://github.com/vipshop/vjtools\nhttps://mp.weixin.qq.com/s/cwU2rLOuwock048rKBz3ew")]),e._v(" "),t("disqus")],1)}),[],!1,null,null,null);n.default=o.exports}}]);