(window.webpackJsonp=window.webpackJsonp||[]).push([[306],{742:function(e,t,a){"use strict";a.r(t);var r=a(65),n=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[a("a",{attrs:{href:"/docs/software"}},[e._v("回目录")]),e._v("  《Gitlab Server》")]),e._v(" "),a("h2",{attrs:{id:"_1-architecture"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-architecture"}},[e._v("#")]),e._v(" 1. Architecture")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/ee/development/architecture.html")]),e._v(" "),a("p",[e._v("https://about.gitlab.com/handbook/engineering/infrastructure/production/architecture/#service-architecture")]),e._v(" "),a("p",[a("img",{attrs:{src:"/docs/docs_image/software/project_manage/git/gitlab01.png",alt:""}})]),e._v(" "),a("h3",{attrs:{id:"components"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#components"}},[e._v("#")]),e._v(" Components")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/ee/development/architecture.html#component-details")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Access Layer 接入层")]),e._v(" "),a("ul",[a("li",[e._v("Nginx：静态 web 服务器")]),e._v(" "),a("li",[e._v("gitlab-shell：负责处理ssh请求,用于处理 Git 命令和修改 authorized keys 列表")])])]),e._v(" "),a("li",[a("p",[e._v("Middleware Layer 中间层")]),e._v(" "),a("ul",[a("li",[e._v("gitlab-workhorse: 负责处理http/https请求,轻量级的反向代理服务器, gitlab workhorse对于本地静态文件请求（例如浏览器请求的html、js、css文件）会自己处理掉，对于纯git操作请求会转发给gitaly，对于其他动态请求会转发给unicorn处理")]),e._v(" "),a("li",[e._v("unicorn：An HTTP server for Rack applications，GitLab Rails 应用是托管在这个服务器上面的，相当于java里面的tomcat，是一个开源项目\nunicorn就是gitlab的主server程序，它会调用其他各个组件完成复杂的动态请求处理\nhttps://blog.csdn.net/gg_18826075157/java/article/details/107117595")]),e._v(" "),a("li",[e._v("logrotate：日志文件管理工具")]),e._v(" "),a("li",[e._v("sidekiq：用于在后台执行队列任务（异步执行）")])])]),e._v(" "),a("li",[a("p",[e._v("存储层：")]),e._v(" "),a("ul",[a("li",[e._v("PostgreSQL：类似于mysql，存储业务数据，比如有哪些项目组，某个项目组下有哪些项目，某项目下哪些人有权限等等")]),e._v(" "),a("li",[e._v("redis：用于缓存热点数据以及存储异步任务，sidekiq这组件会定期拉取分发异步任务给worker执行")]),e._v(" "),a("li",[e._v("gitaly：存储底层代码文件，提供rpc接口对外提供git操作服务")])])]),e._v(" "),a("li",[a("p",[e._v("其他（显示层等）")]),e._v(" "),a("ul",[a("li",[e._v("gitlab pages")]),e._v(" "),a("li",[e._v("*-exporter+grafana+prometheus: 监控")])])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('sudo gitlab-ctl status\nrun: alertmanager: (pid 16828) 499486s; run: log: (pid 10270) 584166s\nrun: gitaly: (pid 15594) 499829s; run: log: (pid 9538) 584281s\nrun: gitlab-exporter: (pid 15618) 499829s; run: log: (pid 10090) 584184s\nrun: gitlab-workhorse: (pid 15624) 499828s; run: log: (pid 9929) 584207s\nrun: grafana: (pid 17718) 498697s; run: log: (pid 10420) 584117s\nrun: logrotate: (pid 9004) 2937s; run: log: (pid 10015) 584196s\nrun: nginx: (pid 15677) 499827s; run: log: (pid 9980) 584200s\nrun: node-exporter: (pid 15689) 499827s; run: log: (pid 10050) 584190s\nrun: postgres-exporter: (pid 15696) 499826s; run: log: (pid 10299) 584160s\nrun: postgresql: (pid 15789) 499823s; run: log: (pid 9636) 584274s\nrun: prometheus: (pid 15805) 499823s; run: log: (pid 10224) 584170s\nrun: puma: (pid 16874) 499480s; run: log: (pid 9832) 584220s\nrun: redis: (pid 15829) 499822s; run: log: (pid 9405) 584287s\nrun: redis-exporter: (pid 15834) 499822s; run: log: (pid 10179) 584178s\nrun: sidekiq: (pid 16818) 499486s; run: log: (pid 9864) 584214s\n\n[root@vm-cicd-v02 liuyue]# netstat -anp|grep "15789"\nunix  2      [ ACC ]     STREAM     LISTENING     1264397  15789/postgres       /var/opt/gitlab/postgresql/.s.PGSQL.5432\n\n一个是Active Internet connections，称为有源TCP连接，其中"Recv-Q"和"Send-Q"指%0A的是接收队列和发送队列。这些数字一般都应该是0。如果不是则表示软件包正在队列中堆积。这种情况只能在非常少的情况见到。\n\n另一个是Active UNIX domain sockets，称为有源Unix域套接口(和网络套接字一样，但是只能用于本机通信，性能可以提高一倍)。\nProto显示连接使用的协议,RefCnt表示连接到本套接口上的进程号,Types显示套接口的类型,State显示套接口当前的状态,Path表示连接到套接口的其它进程使用的路径名。\nhttps://blog.csdn.net/u012598668/java/article/details/40080245\n')])])]),a("h3",{attrs:{id:"_1-1-http-https-over-nginx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-http-https-over-nginx"}},[e._v("#")]),e._v(" 1.1 http/https over nginx:")]),e._v(" "),a("p",[e._v("git request: http://X.X.X.133:8088/root/test-gitaly-cluster.git")]),e._v(" "),a("p",[e._v("user/admin dashboard request: http://X.X.X.133:8088/root/test-gitaly-cluster")]),e._v(" "),a("p",[e._v("grafana request: http://X.X.X.133:8088/-/grafana/?orgId=1")]),e._v(" "),a("p",[e._v("sudo vim /var/opt/gitlab/nginx/conf/nginx.conf")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("upstream gitlab-workhorse {\n    server unix:/var/opt/gitlab/gitlab-workhorse/socket;\n  }\n\n  include /var/opt/gitlab/nginx/conf/gitlab-http.conf;\n")])])]),a("p",[e._v("这个upstream名字是gitlab-workhorse，对应是转发到的地方，这里可以看到是一个unix socket；")]),e._v(" "),a("p",[e._v("再来看include的这个配置文件：")]),e._v(" "),a("p",[e._v("sudo vim /var/opt/gitlab/nginx/conf/gitlab-http.conf")]),e._v(" "),a("p",[e._v("8088是我们在/etc/gitlab/gitlab.rb中reconfigure的外部访问端口，")]),e._v(" "),a("p",[e._v("可以看到proxy_pass将路由匹配到了"),a("code",[e._v("http://<upstream name>")]),e._v("也就是"),a("code",[e._v("http://gitlab-workhorse")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server {\n  listen *:8088;\n\n\n  server_name X.X.X.134;\n  \nlocation / {\n    proxy_cache off;\n    proxy_pass  http://gitlab-workhorse;\n  }\n\n  location /assets {\n    proxy_cache gitlab;\n    proxy_pass  http://gitlab-workhorse;\n  }\n  \n location ~ ^/(404|500|502)(-custom)?\\.html$ {//特别匹配这么几个错误页面\n    root /opt/gitlab/embedded/service/gitlab-rails/public;\n    internal; //限制为内部用户\n  }\n  \n location ~ (.git/git-receive-pack$|.git/info/refs?service=git-receive-pack$|.git/gitlab-lfs/objects|.git/info/lfs/objects/batch$) {\n    proxy_cache off;\n    proxy_pass http://gitlab-workhorse;\n    proxy_request_buffering off;\n  }\n  location /-/grafana/ {\n    proxy_pass http://localhost:3000/;\n  }\n")])])]),a("p",[e._v("可以看到不管是什么请求（除了grafana和那几个特定的静态页面）都是转给gitlab-workhorse来处理，")]),e._v(" "),a("p",[e._v("https://juejin.im/post/5cf680f86fb9a07ed5248cda")]),e._v(" "),a("p",[e._v("最后再来查查gitlab-workhorse，如下可以看到是监听的正是前面upstream转发的那个/var/opt/gitlab/gitlab-workhorse/socket")]),e._v(" "),a("p",[e._v("然后authBackend对应8080端口，这个可以参考")]),e._v(" "),a("blockquote",[a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('https://gitlab.com/gitlab-org/gitlab-workhorse/blob/master/README.md\n\n-authBackend string\n   Authentication/authorization backend (default "http://localhost:8080")\n')])])])]),e._v(" "),a("p",[e._v("估计应该是API接口")]),e._v(" "),a("p",[e._v("documentRoot前端的对应目录是/opt/gitlab/embedded/service/gitlab-rails/public")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('[root@vm-cicd-v01 liuyue]# ps -lef | grep "rail"\n4 S root      5033 22189  0  80   0 - 28203 pipe_w 14:52 pts/1    00:00:00 grep --color=auto rail\n4 S git       6848  6504  0  80   0 - 166286 ep_pol Jun29 ?       00:10:55 /opt/gitlab/embedded/bin/gitlab-workhorse -listenNetwork unix -listenUmask 0 -listenAddr /var/opt/gitlab/gitlab-workhorse/socket -authBackend http://localhost:8080 -authSocket /var/opt/gitlab/gitlab-rails/sockets/gitlab.socket -documentRoot /opt/gitlab/embedded/service/gitlab-rails/public -pprofListenAddr  -prometheusListenAddr localhost:9229 -secretPath /opt/gitlab/embedded/service/gitlab-rails/.gitlab_workhorse_secret -logFormat json -config config.toml\n4 S git       7038  6502  0  80   0 - 257481 poll_s Jun29 ?       00:09:25 puma 4.3.3.gitlab.2 (unix:///var/opt/gitlab/gitlab-rails/sockets/gitlab.socket,tcp://127.0.0.1:8080) [gitlab-puma-worker]\n4 S git       7056  6503  0  80   0 - 32362 poll_s Jun29 ?        00:00:23 ruby /opt/gitlab/embedded/service/gitlab-rails/bin/sidekiq-cluster -e production -r /opt/gitlab/embedded/service/gitlab-rails -m 50 --timeout 25 *\n')])])]),a("p",[e._v("8080这个端口是哪个服务呢")]),e._v(" "),a("p",[e._v("根据 https://docs.gitlab.com/ee/development/architecture.html 架构图，可以看到8080是指向unicorn")]),e._v(" "),a("p",[e._v("但是查一下，可以看到是puma：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('netstat -anp|grep :8080\ntcp        0      0 127.0.0.1:8080          0.0.0.0:*               LISTEN      7038/puma 4.3.3.git\n\nps -lef|grep "puma"\n4 S root      6502  6498  0  80   0 -  1058 poll_s Jun29 ?        00:00:00 runsv puma\n4 S root      6517  6502  0  80   0 -  1094 poll_s Jun29 ?        00:00:00 svlogd -tt /var/log/gitlab/puma\n4 S git       6845  6508  4  80   0 - 173898 poll_s Jun29 ?       15:54:47 puma 4.3.3.gitlab.2 (tcp://localhost:9168) [gitlab-exporter]\n4 S git       7038  6502  0  80   0 - 257481 poll_s Jun29 ?       00:09:26 puma 4.3.3.gitlab.2 (unix:///var/opt/gitlab/gitlab-rails/sockets/gitlab.socket,tcp://127.0.0.1:8080) [gitlab-puma-worker]\n')])])]),a("p",[e._v("https://docs.gitlab.com/ee/administration/operations/unicorn.html#unicorn")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("Note:")]),e._v(" Starting with GitLab 13.0, Puma is the default web server used in GitLab all-in-one package based installations as well as GitLab Helm chart deployments.")]),e._v(" "),a("p",[e._v("GitLab uses "),a("a",{attrs:{href:"https://yhbt.net/unicorn/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Unicorn"),a("OutboundLink")],1),e._v(", a pre-forking Ruby web server, to handle web requests (web browsers and Git HTTP clients). Unicorn is a daemon written in Ruby and C that can load and run a Ruby on Rails application; in our case the Rails application is GitLab Community Edition or GitLab Enterprise Edition.")])]),e._v(" "),a("p",[e._v("unicorn是一个开源项目，当unicorn不再满足需求时才引入了puma和workhorse")]),e._v(" "),a("p",[e._v("https://juejin.im/post/5cf6832c51882520724c84ff")]),e._v(" "),a("h3",{attrs:{id:"_1-2-ssh-over-gitlab-shell"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-ssh-over-gitlab-shell"}},[e._v("#")]),e._v(" 1.2 ssh over gitlab-shell")]),e._v(" "),a("p",[e._v("git@X.X.X.133:root/test-gitaly-cluster.git")]),e._v(" "),a("p",[e._v("注意安装gitlab后，会创建很多用户")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("vim /etc/passwd\ngitlab-www:x:996:993::/var/opt/gitlab/nginx:/bin/false\ngit:x:995:992::/var/opt/gitlab:/bin/sh\ngitlab-redis:x:994:991::/var/opt/gitlab/redis:/bin/false\ngitlab-psql:x:993:990::/var/opt/gitlab/postgresql:/bin/sh\ngitlab-prometheus:x:992:989::/var/opt/gitlab/prometheus:/bin/sh\n")])])]),a("p",[e._v("注意到git用户的home是/var/opt/gitlab，然后从/var/opt/gitlab/gitlab-shell/config.yml可以获取到配置")]),e._v(" "),a("p",[e._v("auth_file: /var/opt/gitlab/.ssh/authorized_keys，打开可以看到")]),e._v(" "),a("p",[a("code",[e._v('command="/opt/gitlab/embedded/service/gitlab-shell/bin/gitlab-shell key-1"')])]),e._v(" "),a("p",[e._v("原理就是一句话：ssh可以执行命令 https://research.kudelskisecurity.com/2013/05/14/restrict-ssh-logins-to-a-single-command/")]),e._v(" "),a("p",[e._v("http://williamherry.com/blog/2015/07/19/from-git-push-to-commit-show-on-page/")]),e._v(" "),a("p",[e._v("https://juejin.im/post/5cf686b85188253cec305fa7")]),e._v(" "),a("p",[e._v("my internal sharing talk:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("I'll give a overview about what we have and how git server works\nI believe everyone should be already familiar with git,\nGit is a distributed version-control system for tracking changes in source code during software development.\nit enables us to collaborate more effiently especially when working remotely on the software project,\n\n//and by integrating with other automation tools like jenkins and others, you can have the ability to Continuous Integration and Continuous Deployment;\nactually for some of the git server implementations like gitlab, we notice that it already has built in CICD Solutions, \nbut we haven't expolore that portion yet, today we'll only cover the basic usage;\n\nalthough most of us are familiar with git, but probably limited to the git client, whether it's git commands or gui tools, \nnow let's talk about how git server side looks like;\n\nat the start, we set up a standalone git lab server, you can see it is comprised of a lot services, some of the non important services are not listed here;\nwhen the users make a git pull or push through http or ssh, it will go to nginx or gitlab shell respectively, if the git request goes through http request, \ngitlab workhorse will redirect it to unicorn, other request like access to the dashboard or grafana monitor will handled by workhorse itself,\nintially there is only unicorn, and then gitlab introduced workhorse to share the load of unicorn, \nunicorn is an open source project, it's a web server in ruby, analogy to tomcat in java;\n\nredis is for cache, postgresql is for the application data storing, sidekiq is for backgroud job, it may be related to the CICD futionality;\n\nthe most crital system is gitaly, it's for the git repository storage\n\nas we have very limited internal users, for the high availability concerns, the first thing we need to do is make sure there is no single point of failure\nfor the gitaly storage, based on the documentation, we come out with this gitaly cluster;\n\nit has a praefect as router between gitlab server and gitaly nodes;\n")])])]),a("h2",{attrs:{id:"_2-install-安装-手动-omnibus版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-install-安装-手动-omnibus版本"}},[e._v("#")]),e._v(" 2. Install 安装(手动)(Omnibus版本)")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/omnibus/README.html#installation-and-configuration-using-omnibus-package")]),e._v(" "),a("p",[e._v("https://git-scm.com/book/en/v2/Git-on-the-Server-GitLab")]),e._v(" "),a("p",[e._v("GitLab FOSS is a read-only mirror of GitLab, with all proprietary code removed. This project was previously used to host GitLab Community Edition, but all development has now moved to https://gitlab.com/gitlab-org/gitlab.")]),e._v(" "),a("p",[e._v("differences between Omnibus and source installations\nhttps://gitlab.com/gitlab-org/gitlab-foss/-/issues/15412\nOmnibus uses gitlab-ctlfor managing the services and can do so separately. On source, if you want to restart and use our service file, you need to restart all the components")]),e._v(" "),a("p",[e._v("ce版本源码：\nhttps://gitlab.com/gitlab-org/gitlab-foss/-/tree/master\nhttps://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/README.md")]),e._v(" "),a("p",[e._v("官方安装文档：https://about.gitlab.com/install/#centos-7")]),e._v(" "),a("p",[e._v("下面采用离线安装 https://docs.gitlab.com/omnibus/manual_install.html\nhttps://docs.gitlab.com/ee/topics/offline/")]),e._v(" "),a("h3",{attrs:{id:"_2-1-硬件准备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-硬件准备"}},[e._v("#")]),e._v(" 2.1 硬件准备")]),e._v(" "),a("p",[e._v("一台Praefect Server（存储空间可以给最低没关系）和三台gitaly server（git高可用的核心服务器，要求high CPU, high memory, fast storage）")]),e._v(" "),a("p",[e._v("挂载磁盘大小需要注意，因为gitlab会写入一些数据到 /var/opt/gitlab，所以如果/var单独挂载需要注意")]),e._v(" "),a("h3",{attrs:{id:"_2-2-dependency"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-dependency"}},[e._v("#")]),e._v(" 2.2 dependency")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# open HTTP, HTTPS and SSH access in the system firewall.\n\nsudo yum install -y curl policycoreutils-python openssh-server\nsudo systemctl enable sshd\nsudo systemctl start sshd\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo systemctl reload firewalld\n\n# install Postfix to send notification emails.\n# If you want to use another solution to send emails please skip this step and configure an external SMTP server after GitLab has been installed.\n# 此处我已经忽略，奇怪的是我并没有安装，但是后面却发现postfix不知何时已经运行了，估计是gitlab自己搞的\nsudo yum install postfix\nsudo systemctl enable postfix\nsudo systemctl start postfix\n")])])]),a("h3",{attrs:{id:"_2-3-rpm安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-rpm安装"}},[e._v("#")]),e._v(" 2.3 rpm安装")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('# GitLab Community Edition\n# Debian/Ubuntu\ndpkg -i gitlab-ce-<version>.deb\n\n# CentOS/RHEL\nrpm -Uvh gitlab-ce-<version>.rpm\n\n下载 \nhttps://packages.gitlab.com/gitlab/\nhttps://packages.gitlab.com/gitlab/gitlab-ce\n\nsudo mv gitlab-ce-13.0.7-ce.0.el7.x86_64.rpm /opt/\n\nrpm -ivh gitlab-ce-13.0.7-ce.0.el7.x86_64.rpm \n\nfor firstime install use -i or -U, for upgrade use -U\n\n总结：\ncd /opt/\nrpm -ivh gitlab-ce-13.0.7-ce.0.el7.x86_64.rpm \nvim /etc/gitlab/gitlab.rb (change external_url="http://X.X.X.133:8088")\nsudo gitlab-ctl reconfigure\nfirewall-cmd --zone=public --add-port=8088/tcp --permanent\nfirewall-cmd --reload\n\nafter all this:\naccess from your browser\nhttp://X.X.X.133:8088\n\nit will ask for changing password, default username: admin@example.com\n\n')])])]),a("p",[e._v("启动：")]),e._v(" "),a("p",[e._v("sudo gitlab-ctl reconfigure")]),e._v(" "),a("p",[e._v("安装后路径：")]),e._v(" "),a("p",[e._v("/var/opt/gitlab/")]),e._v(" "),a("p",[e._v("/var/opt/gitlab/nginx/conf/gitlab-http.conf")]),e._v(" "),a("p",[e._v("log路径：也是排查错误的路径")]),e._v(" "),a("p",[e._v("/var/log/gitlab/")]),e._v(" "),a("p",[e._v("单机版gitlab可以执行"),a("code",[e._v("gitlab-rake gitlab:check")]),e._v("即可全面单机检测")]),e._v(" "),a("p",[e._v("单个检查：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("gitlab:gitlab_shell:check\ngitlab:gitaly:check\ngitlab:sidekiq:check\ngitlab:incoming_email:check\ngitlab:ldap:check\ngitlab:app:check\n")])])]),a("h3",{attrs:{id:"_2-4-configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-configuration"}},[e._v("#")]),e._v(" 2.4 Configuration")]),e._v(" "),a("p",[e._v("https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/README.md")]),e._v(" "),a("h4",{attrs:{id:"_2-4-1-前端gitlab-server-url和api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-1-前端gitlab-server-url和api"}},[e._v("#")]),e._v(" 2.4.1 前端gitlab-server url和api")]),e._v(" "),a("p",[e._v("/etc/gitlab/gitlab.rb")]),e._v(" "),a("p",[e._v('​\tchange external_url="http://X.X.X.133:8088" 这个端口会写入到/var/opt/gitlab/nginx/conf/gitlab-http.conf')]),e._v(" "),a("p",[e._v("sudo gitlab-ctl reconfigure")]),e._v(" "),a("p",[e._v("注意，刚开始我用了8080，"),a("s",[e._v("刚好跟内置的nginx冲突")]),e._v("，是跟gitlab-puma-worker冲突，")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("sudo netstat -anp|grep :8080\n\nsudo ps -lef|grep 18251\n\npuma 4.3.3.gitlab.2 (unix:///var/opt/gitlab/gitlab-rails/sockets/gitlab.socket,tcp://127.0.0.1:8080) [gitlab-puma-worker]\n\n")])])]),a("p",[e._v("所以访问出现502 Whoops, GitLab is taking too much time to respond.")]),e._v(" "),a("p",[e._v("只需要换一个端口即可，端口也要开通：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("firewall-cmd --zone=public --add-port=8088/tcp --permanent\nfirewall-cmd --reload\nfirewall-cmd --list-all\nfirewall-cmd --list-ports\n")])])]),a("p",[a("strong",[e._v("这个reconfigure会将配置进行“分发”，所以后面所有修改配置都要注意优先修改gitlab.rb，而不是直接改具体各个服务的配置：")])]),e._v(" "),a("p",[e._v("比如端口和ip赋值给：")]),e._v(" "),a("p",[e._v("/var/opt/gitlab/nginx/conf/gitlab-http.conf（模板/opt/gitlab/embedded/conf/nginx.conf ?）")]),e._v(" "),a("p",[e._v("/opt/gitlab/embedded/service/gitlab-rails/config/gitlab.yml（模板：/opt/gitlab/embedded/service/gitlab-rails/config/gitlab.yml.exmaple）")]),e._v(" "),a("p",[e._v("说回到 前端http://X.X.X.133:8088")]),e._v(" "),a("p",[e._v("默认用户名root/ admin@example.com 可以从log中获取：")]),e._v(" "),a("p",[e._v('sudo grep -nr "admin" /var/log/gitlab/')]),e._v(" "),a("p",[e._v("​\t/var/log/gitlab/gitlab-rails/application.log")]),e._v(" "),a("p",[e._v("监控前端（从nginx配置获取）：")]),e._v(" "),a("p",[e._v("X.X.X.134:8088/-/grafana/login")]),e._v(" "),a("p",[e._v("注意这个8088也将会是Gitaly集群的internal_api_url")]),e._v(" "),a("p",[e._v("/opt/gitlab/embedded/service/gitlab-shell/config.yml")]),e._v(" "),a("p",[a("s",[e._v("注意此处要手动修改gitlab_url，不知为何reconfigure没有生效到这里")]),e._v(" 应该不需要修改，默认就是8080，对应puma-worker的端口")]),e._v(" "),a("p",[e._v("auth_key?")]),e._v(" "),a("h4",{attrs:{id:"_2-4-2-监控grafana"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-2-监控grafana"}},[e._v("#")]),e._v(" 2.4.2 监控grafana")]),e._v(" "),a("p",[e._v("第一种基本登录")]),e._v(" "),a("p",[e._v("​\tgrafana['disable_login_form'] = false")]),e._v(" "),a("p",[e._v("​\tgitlab-ctl set-grafana-password")]),e._v(" "),a("p",[e._v("第二种方法：通过gitlab server第三方登录")]),e._v(" "),a("p",[e._v("首先login配置")]),e._v(" "),a("p",[e._v("X.X.X.134:8088/-/grafana/login")]),e._v(" "),a("p",[e._v("http://X.X.X.134:8088/oauth/authorize?access_type=online&client_id=a797f89033dee951dac900905d7b447191f743bcd9afa3a970be4a6864ee0661&redirect_uri=http%3A%2F%2FX.X.X.134%3A8088%2F-%2Fgrafana%2Flogin%2Fgitlab&response_type=code&scope=api&state=o2t3bzD7ek3TPoIPHqDVaLc_HSInTqdBK9IlS2dHhnc%3D")]),e._v(" "),a("p",[e._v("?# gitlab The redirect URI included is not valid.")]),e._v(" "),a("p",[e._v("https://grafana.com/docs/grafana/latest/auth/gitlab/")]),e._v(" "),a("p",[e._v("配置：")]),e._v(" "),a("p",[e._v("回到gitlab前端的管理员area， Applications->Add")]),e._v(" "),a("p",[e._v("callback url: http://X.X.X.134:8088/-/grafana/login/gitlab")]),e._v(" "),a("p",[e._v("将clientid和secret配置到：/var/opt/gitlab/grafana/grafana.ini")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[auth.gitlab]\nclient_id\nclient_secret\nroot_url = http://X.X.X.134:8088/-/grafana\nauth_url = http://X.X.X.134:8088/oauth/authorize\ntoken_url = http://X.X.X.134:8088/oauth/token\napi_url = http://X.X.X.134:8088/api/v4\n")])])]),a("p",[e._v("gitlab-ctl restart grafana")]),e._v(" "),a("p",[a("strong",[e._v("监控其他节点")])]),e._v(" "),a("p",[e._v("这个是在安装了Gitaly cluster之后的配置")]),e._v(" "),a("p",[e._v("9090 prometheus")]),e._v(" "),a("p",[e._v("9100 node_exporter")]),e._v(" "),a("p",[e._v("这两个都是可以看到metrics:")]),e._v(" "),a("p",[e._v("curl 127.0.0.1:9090/metrics -s | head")]),e._v(" "),a("p",[e._v("curl 127.0.0.1:9100/metrics -s | head")]),e._v(" "),a("p",[e._v("应该只有prometheus自带UI:")]),e._v(" "),a("p",[e._v("http://X.X.X.133:9090/graph")]),e._v(" "),a("p",[e._v("但是浏览器无法打开，netstat发现9090只监听本地端口，所以要修改")]),e._v(" "),a("p",[e._v("grep :9090 /var/opt/* -r")]),e._v(" "),a("p",[e._v("找到/var/opt/gitlab/prometheus/prometheus.yml和/var/opt/gitlab/gitlab-rails/etc/gitlab.yml")]),e._v(" "),a("p",[e._v("但是还是建议去/etc/gitlab/gitlab.rb里面去修改：")]),e._v(" "),a("p",[e._v("prometheus['listen_address'] = 'localhost:9090'")]),e._v(" "),a("p",[e._v("最后可以打开了prometheus ui，")]),e._v(" "),a("p",[e._v("测试dashboard：Gitaly，先修改variable")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('label_values(up{job="gitaly"}, instance)\n改成\nlabel_values(gitlab_build_info{job="praefect-gitaly"}, instance)\n果然可以看到其他三个instance\n')])])]),a("p",[e._v("然后继续修改dashboard页面内部的metrics，比如Gitaly的cpu查询一下，")]),e._v(" "),a("p",[e._v('rate(process_cpu_seconds_total{job="gitaly"}[1m])')]),e._v(" "),a("p",[e._v("发现只有一条localhost记录，再来查查node exporter配置：")]),e._v(" "),a("p",[e._v("grep :9100 /var/opt/* -r\n/var/opt/gitlab/prometheus/prometheus.yml:    - localhost:9100")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("- job_name: node\n  static_configs:\n  - targets:\n    - localhost:9100\n")])])]),a("p",[e._v("果然这个是问题所在，并没有去监听Gitaly cluster 上面的9100")]),e._v(" "),a("p",[e._v("但是正确的做法仍然是不要直接修改，应该去修改/etc/gitlab/gitlab.rb")]),e._v(" "),a("p",[e._v("突然想到我们在创建gitaly cluster的时候其实修改过，刚好在这个prometheus.yml里面验证下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("- job_name: praefect-gitaly\n  static_configs:\n  - targets:\n    - X.X.X.136:9236\n    - X.X.X.137:9236\n    - X.X.X.138:9236\n")])])]),a("p",[e._v("果然是有，我们依样画葫芦，可以同样修改上面的node")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" {                                          \n   'job_name' => 'praefect-gitaly-nodes',   \n   'static_configs' => [                    \n     'targets' => [                         \n       'X.X.X.136:9100', # gitaly-1    \n       'X.X.X.137:9100', # gitaly-2    \n       'X.X.X.138:9100', # gitaly-3    \n     ]                                      \n   ]                                        \n }                                          \n")])])]),a("p",[e._v("但是还不够，还要确认Gitaly的9100端口对gitlab server可见，但是发现实际上Gitaly上面并没有开启9100端口，意思是node_exporter并没有启动，怀疑是gitlab程序会默认根据gitaly['enable'] = true来disable掉node_exporter,所以我尝试主动去开启node_exporter:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("################################################################################\n## Prometheus Node Exporter\n##! Docs: https://docs.gitlab.com/ee/administration/monitoring/prometheus/node_exporter.html\n################################################################################\n\nnode_exporter['enable'] = true\n# node_exporter['home'] = '/var/opt/gitlab/node-exporter'\n# node_exporter['log_directory'] = '/var/log/gitlab/node-exporter'\n# node_exporter['flags'] = {\n#   'collector.textfile.directory' => \"/var/opt/gitlab/node-exporter/textfile_collector\"\n# }\n# node_exporter['env_directory'] = '/opt/gitlab/etc/node-exporter/env'\n# node_exporter['env'] = {\n#   'SSL_CERT_DIR' => \"/opt/gitlab/embedded/ssl/certs/\"\n# }\n\n##! Advanced settings. Should be changed only if absolutely needed.\nnode_exporter['listen_address'] = '0.0.0.0:9100'\n")])])]),a("p",[e._v("刚好同时将node_exporter监听也改掉")]),e._v(" "),a("p",[e._v("firewall-cmd --zone=public --add-port=9100/tcp --permanent")]),e._v(" "),a("p",[e._v("firewall-cmd --reload")]),e._v(" "),a("p",[e._v("回到gitlab-server，在http://X.X.X.133:9090/graph")]),e._v(" "),a("p",[e._v('rate(process_cpu_seconds_total{job="praefect-gitaly-nodes"}[1m])')]),e._v(" "),a("p",[e._v("果然看到了三个instance的metrics（注意重启服务后要多等一会）")]),e._v(" "),a("p",[e._v('最后试着保存dashboard，居然弹出错误“ Cannot save provisioned dashboard"')]),e._v(" "),a("p",[e._v("https://grafana.com/docs/grafana/latest/administration/provisioning/#dashboards")]),e._v(" "),a("p",[e._v("vim /var/opt/gitlab/grafana/provisioning/dashboards/gitlab_dashboards.yml")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('---\napiVersion: 1\nproviders:\n- name: GitLab Omnibus\n  orgId: 1\n  folder: GitLab Omnibus\n  type: file\n  disableDeletion: true\n  updateIntervalSeconds: 600\n  options:\n    path: "/opt/gitlab/embedded/service/grafana-dashboards"\n')])])]),a("p",[e._v("继而找到")]),e._v(" "),a("p",[e._v("vim /opt/gitlab/embedded/service/grafana-dashboards/gitaly.json")]),e._v(" "),a("h4",{attrs:{id:"_2-4-3-邮箱"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-3-邮箱"}},[e._v("#")]),e._v(" 2.4.3 邮箱")]),e._v(" "),a("p",[e._v("前面跳过了邮箱配置，这里采用external mail server gmail，但是奇怪的是postfix自动运行")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/omnibus/settings/smtp.html")]),e._v(" "),a("p",[a("strong",[e._v("Use smtp instead of sendmail/postfix.")])]),e._v(" "),a("p",[e._v("注意要更改gitlab_rails['smtp_设置，不要改错")]),e._v(" "),a("p",[e._v("测试：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Look at the ActionMailer `delivery_method` to make sure it matches what you intended. If you configured SMTP, it should say `:smtp`. If you’re using Sendmail, it should say `:sendmail`:\n\nActionMailer::Base.delivery_method\n\ngitlab-rails console\nNotify.test_email('lyhistory@gmail.com', 'test gitlab', 'test').deliver_now\nActionMailer::Base.smtp_settings\n\n")])])]),a("h4",{attrs:{id:"_2-4-4-postgresql"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-4-postgresql"}},[e._v("#")]),e._v(" 2.4.4 postgresql")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/omnibus/settings/database.html#connecting-to-the-bundled-postgresql-database")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/ee/administration/troubleshooting/postgresql.html#postgresql")]),e._v(" "),a("p",[e._v("/var/opt/gitlab/postgresql/data/postgresql.conf")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("sudo gitlab-rails dbconsole\n\nsudo gitlab-psql -d gitlabhq_production\n")])])]),a("p",[e._v("plsql cmds")]),e._v(" "),a("p",[e._v("https://www.postgresql.org/docs/12/app-psql.html")]),e._v(" "),a("p",[e._v("注意下面这种方式是无法连接的，因为gitlab本机内部不是用tcp协议，而是用Unix域套接口")]),e._v(" "),a("p",[e._v("/opt/gitlab/embedded/bin/psql -U postgres -d gitlabhq_production -h <POSTGRESQL_SERVER_ADDRESS>")]),e._v(" "),a("h4",{attrs:{id:"_2-4-5-gitaly"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-5-gitaly"}},[e._v("#")]),e._v(" 2.4.5 gitaly")]),e._v(" "),a("p",[e._v("vim /var/opt/gitlab/gitaly/config.toml")]),e._v(" "),a("p",[e._v("可以清晰的看到 /var/opt/gitlab/git-data/repositories 这个就是git最终存储的位置")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("socket_path = '/var/opt/gitlab/gitaly/gitaly.socket'\n\ninternal_socket_dir = '/var/opt/gitlab/gitaly/internal_sockets'\nbin_dir = '/opt/gitlab/embedded/bin'\n\n# Optional: export metrics via Prometheus\nprometheus_listen_addr = 'localhost:9236'\n\n[[storage]]\nname = 'defau://www.postgresql.org/docs/12/app-psql.htmlt'\npath = '/var/opt/gitlab/git-data/repositories'\n\n[logging]\nformat = 'json'\ndir = '/var/log/gitlab/gitaly'\n\n[auth]\n\n[git]\n\n[gitaly-ruby]\ndir = \"/opt/gitlab/embedded/service/gitaly-ruby\"\nrugged_git_config_search_path = \"/opt/gitlab/embedded/etc\"\n\n[gitlab-shell]\ndir = \"/opt/gitlab/embedded/service/gitlab-shell\"\ngitlab_url = 'http://127.0.0.1:8080'\n")])])]),a("h4",{attrs:{id:"_2-4-6-日志logrotate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-6-日志logrotate"}},[e._v("#")]),e._v(" 2.4.6 日志logrotate")]),e._v(" "),a("p",[e._v("/var/opt/gitlab/logrotate/logrotate.conf")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("include /var/opt/gitlab/logrotate/logrotate.d/nginx\ninclude /var/opt/gitlab/logrotate/logrotate.d/puma\ninclude /var/opt/gitlab/logrotate/logrotate.d/actioncable\ninclude /var/opt/gitlab/logrotate/logrotate.d/unicorn\ninclude /var/opt/gitlab/logrotate/logrotate.d/gitlab-rails\ninclude /var/opt/gitlab/logrotate/logrotate.d/gitlab-shell\ninclude /var/opt/gitlab/logrotate/logrotate.d/gitlab-workhorse\ninclude /var/opt/gitlab/logrotate/logrotate.d/gitlab-pages\n")])])]),a("h4",{attrs:{id:"_2-4-7-ssl-ssh"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-7-ssl-ssh"}},[e._v("#")]),e._v(" 2.4.7 SSL & SSH")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/omnibus/settings/ssl.html")]),e._v(" "),a("p",[e._v("刚开始想用let's ecrypt，发现")]),e._v(" "),a("p",[e._v("https://certbot.eff.org/lets-encrypt/centosrhel7-nginx")]),e._v(" "),a("p",[e._v("这自动更新得联网啊，而且我连个域名都没有，直接是ip访问")]),e._v(" "),a("p",[e._v("还是用自签吧，但是又发现有坑："),a("a",{attrs:{href:"https://docs.gitlab.com/ee/administration/troubleshooting/ssl.html#unable-to-perform-git-operations-due-to-an-internal-or-self-signed-certificate",target:"_blank",rel:"noopener noreferrer"}},[e._v("Unable to perform Git operations due to an internal or self-signed certificate"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("大概意思是，自签没问题，但是git客户端无法验证自签证书，要么得一个个git客户端安装一遍，要么disable ssl verify，总归是坑")]),e._v(" "),a("p",[e._v("ssh")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/ee/gitlab-basics/create-your-ssh-keys.html#create-and-add-your-ssh-key-pair")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('ssh-keygen -t ed25519 -C "<comment>"\n')])])]),a("h3",{attrs:{id:"_2-5-商业版"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-商业版"}},[e._v("#")]),e._v(" 2.5 商业版")]),e._v(" "),a("p",[e._v("[https://docs.gitlab.com/ee/user/admin_area/license.html#:~:text=Add%20your%20license%20at%20install,and%20filename%20for%20the%20license.](https://docs.gitlab.com/ee/user/admin_area/license.html#:~:text=Add your license at install,and filename for the license.)")]),e._v(" "),a("p",[e._v("https://packages.gitlab.com/gitlab/gitlab-ee")]),e._v(" "),a("h3",{attrs:{id:"_2-6-替换内置服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-替换内置服务"}},[e._v("#")]),e._v(" 2.6 替换内置服务")]),e._v(" "),a("p",[e._v("！！强烈不建议，因为会影响后续升级！！")]),e._v(" "),a("p",[e._v("nginx")]),e._v(" "),a("p",[e._v("jianshu.com/p/123778a515ca")]),e._v(" "),a("p",[e._v("grafana")]),e._v(" "),a("p",[e._v("postgresql")]),e._v(" "),a("p",[e._v("反向代理")]),e._v(" "),a("p",[e._v("https://cloud.tencent.com/developer/article/1437220")]),e._v(" "),a("p",[e._v("配置排查参考：blog.csdn.net/weixin_43748870/article/details/86178042")]),e._v(" "),a("h2",{attrs:{id:"_3-high-availability"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-high-availability"}},[e._v("#")]),e._v(" 3. High Availability")]),e._v(" "),a("p",[e._v("总体上说，")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("CE版本")]),e._v(" "),a("p",[e._v("结合gitlab服务端架构，随便搜一下可以看到都是抄来抄去的同类文章https://www.cnblogs.com/wangshuyang/p/10946099.html")]),e._v(" "),a("p",[e._v("网上大多建议装两个单机版（all in one），前面用Virtual IP或floating IP，然后两个单机通过NFS共享磁盘，由于NFS即将被移除，其他思路就是DRBD或者rsync整个磁盘同步，所以这个方案实际是主备（冷备），每次只是开一个机器，当挂掉之后，可以启动备用")]),e._v(" "),a("p",[e._v("https://www.digitalocean.com/community/tutorials/how-to-set-up-highly-available-web-servers-with-keepalived-and-floating-ips-on-ubuntu-14-04")])]),e._v(" "),a("li",[a("p",[e._v("EE版本")]),e._v(" "),a("p",[e._v("采用主主（热备）")]),e._v(" "),a("p",[e._v("切分成两大部分，gitlab-server和Gitaly cluster，Gitaly cluster本身就是集群模式，gitlab-server需要借助load Balancer搞成ha，比如借助haproxy，然后多个gitlab-server节点之间共享Application database和Gitaly cluster；")]),e._v(" "),a("p",[e._v("gitlab-sever跟Gitaly cluster之间是通过Praefect连接，Praefect本身只是路由，所以可以做成多节点，加一个loadBalancer；")]),e._v(" "),a("p",[e._v("注意loadBalancer本身也是可以做成多节点的，参考haproxy的文章；")])])]),e._v(" "),a("blockquote",[a("p",[e._v("gitlab内部可以做给个部分的ha，比如")]),e._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://docs.gitlab.com/ee/administration/postgresql/replication_and_failover.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Configure the database"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://docs.gitlab.com/ee/administration/high_availability/redis.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Configure Redis"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://docs.gitlab.com/ee/administration/high_availability/nfs.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Configure NFS"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://docs.gitlab.com/ee/administration/high_availability/gitlab.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Configure the GitLab application servers"),a("OutboundLink")],1)])]),e._v(" "),a("p",[e._v("不过需要注意的是，NFS在新版已经deprecated并且会被删除")]),e._v(" "),a("p",[e._v("high_availability['mountpoint']")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/ee/administration/high_availability/gitlab.html")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/ee/administration/high_availability/nfs.html")]),e._v(" "),a("p",[a("strong",[e._v("Caution:")]),e._v(" From GitLab 13.0, using NFS for Git repositories is deprecated. In GitLab 14.0, support for NFS for Git repositories is scheduled to be removed. Upgrade to "),a("a",{attrs:{href:"https://docs.gitlab.com/ee/administration/gitaly/praefect.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Gitaly Cluster"),a("OutboundLink")],1),e._v(" as soon as possible.")]),e._v(" "),a("p",[e._v("可以看到官方已经不推荐了")])]),e._v(" "),a("h3",{attrs:{id:"_3-1-gitlay-cluster"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-gitlay-cluster"}},[e._v("#")]),e._v(" 3.1 gitlay cluster")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/ee/administration/gitaly/praefect.html")]),e._v(" "),a("ul",[a("li",[e._v("1 load balancer")]),e._v(" "),a("li",[e._v("1 PostgreSQL server (PostgreSQL 11 or newer)")]),e._v(" "),a("li",[e._v("3 Praefect nodes")]),e._v(" "),a("li",[e._v("3 Gitaly nodes (1 primary, 2 secondary)")])]),e._v(" "),a("h4",{attrs:{id:"_3-1-1-postgresql-server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-1-postgresql-server"}},[e._v("#")]),e._v(" 3.1.1 postgresql server:")]),e._v(" "),a("p",[e._v("https://www.postgresql.org/download/linux/redhat/")]),e._v(" "),a("p",[e._v("https://yum.postgresql.org/12/redhat/rhel-7-x86_64/repoview/postgresql12-libs.html")]),e._v(" "),a("p",[e._v("find direct rpm download:")]),e._v(" "),a("p",[e._v("https://yum.postgresql.org/rpmchart/")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://yum.postgresql.org/12/redhat/rhel-7-x86_64/repoview/postgresql12.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("postgresql12"),a("OutboundLink")],1),e._v(" - PostgreSQL client programs and libraries")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://yum.postgresql.org/12/redhat/rhel-7-x86_64/repoview/postgresql12-contrib.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("postgresql12-contrib"),a("OutboundLink")],1),e._v(" - Contributed source and binaries distributed with PostgreSQL")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://yum.postgresql.org/12/redhat/rhel-7-x86_64/repoview/postgresql12-libs.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("postgresql12-libs"),a("OutboundLink")],1),e._v(" - The shared libraries required for any PostgreSQL clients")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://yum.postgresql.org/12/redhat/rhel-7-x86_64/repoview/postgresql12-server.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("postgresql12-server"),a("OutboundLink")],1),e._v(" - The programs needed to create and run a PostgreSQL server")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(' ## 安装postgresql：：\n \n 40  cd /opt/\n   43  sudo mkdir postgresql\n   44  mv ~/postgresql12-* postgresql/\n   45  sudo mv ~/postgresql12-* postgresql/\n   47  cd postgresql/\n   50  sudo yum localinstall postgresql12-libs-12.3-5PGDG.rhel7.x86_64.rpm\n   52  sudo yum localinstall postgresql12-12.3-5PGDG.rhel7.x86_64.rpm\n   53  sudo yum localinstall postgresql12-server-12.3-5PGDG.rhel7.x86_64.rpm\n   54  sudo yum localinstall postgresql12-contrib-12.3-5PGDG.rhel7.x86_64.rpm\n   55  ll /usr/\n   56  /usr/pgsql-12/bin/postgresql-12-setup initdb\n   57  sudo /usr/pgsql-12/bin/postgresql-12-setup initdb\n   58  sudo systemctl enable postgresql-12\n   59  sudo systemctl start postgresql-12\n   \n   [liuyue@vm-cicd-v02 ~]$ sudo ps -lef|grep "postgre"\n4 S postgres   987     1  0  80   0 - 99348 poll_s 16:59 ?        00:00:00 /usr/pgsql-12/bin/postmaster -D /var/lib/pgsql/12/data/\n1 S postgres   989   987  0  80   0 - 62944 ep_pol 16:59 ?        00:00:00 postgres: logger\n1 S postgres   991   987  0  80   0 - 99348 ep_pol 16:59 ?        00:00:00 postgres: checkpointer\n1 S postgres   992   987  0  80   0 - 99381 ep_pol 16:59 ?        00:00:00 postgres: background writer\n1 S postgres   993   987  0  80   0 - 99348 ep_pol 16:59 ?        00:00:00 postgres: walwriter\n1 S postgres   994   987  0  80   0 - 99486 ep_pol 16:59 ?        00:00:00 postgres: autovacuum launcher\n1 S postgres   995   987  0  80   0 - 62943 ep_pol 16:59 ?        00:00:00 postgres: stats collector\n1 S postgres   996   987  0  80   0 - 99486 ep_pol 16:59 ?        00:00:00 postgres: logical replication launcher\n\n')])])]),a("p",[e._v("下一步 为Praefect创建数据库")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("刚开始想着从Praefect服务器直接连过来，发现失败\n\n# the database template1 is used because it is created by default on all PostgreSQL servers.\n/opt/gitlab/embedded/bin/psql -U postgres -d template1 -h POSTGRESQL_SERVER_ADDRESS\n\n")])])]),a("p",[e._v("登录失败！ 需要修改监听端口和登录的方式，具体参考《database/postgresql》的设置说明")]),e._v(" "),a("p",[e._v("另外如果有防火墙还要开端口")]),e._v(" "),a("p",[e._v("firewall-cmd --permanent --add-port=5432/tcp")]),e._v(" "),a("p",[e._v("firewall-cmd --reload")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("su - postgres\n\npsql\ncreate user gitlabuser password 'gitlab';\nCREATE ROLE praefect WITH LOGIN CREATEDB PASSWORD 'PRAEFECT_SQL_PASSWORD';\nALTER ROLE praefect with PASSWORD 'test';\n然后再从Praefect服务器用新创建的用户连过来\n/opt/gitlab/embedded/bin/psql -U praefect -d template1 -h X.X.X.134\n\n> CREATE DATABASE praefect_production WITH ENCODING=UTF8;\n By creating the database while connected as the praefect user, we are confident they have access.\n\n\ntemplate1=> \\du\n                                   List of roles\n Role name |                         Attributes                         | Member of\n-----------+------------------------------------------------------------+-----------\n postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}\n praefect  | Create DB                                                  | {}\n \ntemplate1=> CREATE DATABASE praefect_production WITH ENCODING=UTF8;\nCREATE DATABASE\ntemplate1=> \\l\n                                       List of databases\n        Name         |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges\n---------------------+----------+----------+-------------+-------------+-----------------------\n postgres            | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |\n praefect_production | praefect | UTF8     | en_US.UTF-8 | en_US.UTF-8 |\n template0           | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +\n                     |          |          |             |             | postgres=CTc/postgres\n template1           | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +\n                     |          |          |             |             | postgres=CTc/postgres\n(4 rows)\ntemplate1-> use tempalte1\ntemplate1-> \\dt\nDid not find any relations.\ntemplate1-> use template0\ntemplate1-> \\dt\nDid not find any relations.\ntemplate1-> use postgres\ntemplate1-> \\dt\nDid not find any relations.\ntemplate1-> use praefect_production\ntemplate1-> \\dt\nDid not find any relations.\n\n!!!\n我发现后面我连了Praefect过来，同样全部为空，难道一台Praefect并没有用到这个db？？？\n!!!\n我错了，跟mysql语法不同！！！ Postgresql是用 \\c praefect_production; 切换数据库！！！\n\n/opt/gitlab/embedded/bin/psql -U praefect -d praefect_production -h <POSTGRESQL_SERVER_ADDRESS>\n\n# create database gitlabdb with owner gitlab;\n# alter database gitlabdb set search_path to sgc2,public;\n# alter user gitlab set search_path to sgc2,public;\n\n# create schema sgc2backup;\n# create user arch password 'gitlab';\n# alter user arch set search_path to sgc2backup;\n# alter schema sgc2backup owner to arch;\n\n# grant connect on database gitlabdb to arch;\n# grant usage, create on schema sgc2backup to arch;\n\n# GRANT USAGE ON SCHEMA sgc2backup TO gitlab;\n# grant select on all tables in schema sgc2backup to gitlab;\n# revoke insert,update,delete on all tables in schema sgc2backup from gitlab;\n\n# GRANT USAGE ON SCHEMA sgc2 TO arch;\n# grant select on all tables in schema sgc2 to arch;\n# revoke insert,update,delete on all tables in schema sgc2 from arch;\n\n")])])]),a("p",[e._v("卸载：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("rpm -e postgresql-server\t\nrpm -e postgresql-contrib\t\nrpm -e postgresql\t\nrpm -e postgresql-libs\n")])])]),a("h4",{attrs:{id:"_3-1-2-gitaly-nodes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-gitaly-nodes"}},[e._v("#")]),e._v(" 3.1.2 Gitaly Nodes")]),e._v(" "),a("p",[e._v("这次采用了yum localinstall 没有采用rpm -ivh 不知道后续再用rpm -uvh升级是否有问题")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Installing:.......\n\nThank you for installing GitLab!\nGitLab was unable to detect a valid hostname for your instance.\nPlease configure a URL for your GitLab instance by setting `external_url`\nconfiguration in /etc/gitlab/gitlab.rb file.\nThen, you can start your GitLab instance by running the following command:\n  sudo gitlab-ctl reconfigure\n\nFor a comprehensive list of configuration options please see the Omnibus GitLab readme\nhttps://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/README.md\n.....                                                                                             8/8\n\nInstalled:\n  gitlab-ce.x86_64 0:13.0.7-ce.0.el7\n\nDependency Installed:\n  audit-libs-python.x86_64 0:2.8.5-4.el7     checkpolicy.x86_64 0:2.5-8.el7        libcgroup.x86_64 0:0.41-21.el7     libsemanage-python.x86_64 0:2.5-14.el7     policycoreutils-python.x86_64 0:2.5-34.el7\n  python-IPy.noarch 0:0.75-6.el7             setools-libs.x86_64 0:3.3.8-4.el7\n\nComplete!\n")])])]),a("p",[e._v("gitaly['listen_addr'] = '0.0.0.0:8075'")]),e._v(" "),a("p",[e._v("gitaly['auth_token'] = 'PRAEFECT_INTERNAL_TOKEN'\t对应 praefect")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("praefect['virtual_storages'] = {\n  'storage-1' => {\n    'gitaly-1' => {\n      'address' => 'tcp://GITALY_HOST:8075',\n      'token'   => 'PRAEFECT_INTERNAL_TOKEN',\n      'primary' => true\n    },\n    'gitaly-2' => {\n      'address' => 'tcp://GITALY_HOST:8075',\n      'token'   => 'PRAEFECT_INTERNAL_TOKEN'\n    },\n    'gitaly-3' => {\n      'address' => 'tcp://GITALY_HOST:8075',\n      'token'   => 'PRAEFECT_INTERNAL_TOKEN'\n    }\n  }\n}\n")])])]),a("p",[e._v("下面这两个是git push需要回调的")]),e._v(" "),a("p",[e._v("gitlab_shell['secret_token'] = 'GITLAB_SHELL_SECRET_TOKEN' 这个是对应gitlab server配置的同样的token")]),e._v(" "),a("p",[e._v("# Don't forget to copy "),a("code",[e._v("/etc/gitlab/gitlab-secrets.json")]),e._v(" from Gitaly client to Gitaly server. （？这句话是因为什么，是不是跟gitlab_shell['secret_token'] 不同的验证方式，公私钥验证？）")]),e._v(" "),a("p",[e._v("gitlab_rails['internal_api_url'] = 'X.X.X.133:8088' 对应gitlab server API，")]),e._v(" "),a("p",[e._v("internal_api_url 会在gitlab-ctl reconfigure的时候被赋值到/opt/gitlab/embedded/service/gitlab-shell/config.yml以及")]),e._v(" "),a("p",[e._v("/var/opt/gitlab/gitlab-shell/config.yml，注意我发现gitlab server上的这个配置文件内容却是8080端口，可能对外统一都是8088，然后对内是8080")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('# Url to gitlab instance. Used for api calls. May but need not end with a slash.\ngitlab_url: "http://127.0.0.1:8080"\n')])])]),a("p",[e._v("就是对应的gitlab server上面的puma web服务（unicorn）")]),e._v(" "),a("h4",{attrs:{id:"_3-1-3-测试连通性-健康检查"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-3-测试连通性-健康检查"}},[e._v("#")]),e._v(" 3.1.3 测试连通性|健康检查")]),e._v(" "),a("p",[e._v("单机版gitlab可以执行"),a("code",[e._v("gitlab-rake gitlab:check")]),e._v("即可全面单机检测")]),e._v(" "),a("p",[e._v("但是对于我们的HA方案，即gitlab server->praefect->gitaly分开部署，则需要执行：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("postgresql server open port 5432 to praefect server;\n​\ton praefect server: sudo -u git /opt/gitlab/embedded/bin/praefect -config /var/opt/gitlab/praefect/config.toml sql-ping\n/opt/gitlab/embedded/bin/psql -U praefect -d template1 -h X.X.X.134\n\npraefect server open port 2305 and 9652 to gitlab server;\n​\ton gitlab server: gitlab-rake gitlab:gitaly:check\n sudo gitlab-rake gitlab:check SANITIZE=true\n\ngitlab server open api 8080? to gitaly server;\n​\ton gitaly nodes: \n/opt/gitlab/embedded/service/gitlab-shell/bin/check -config /opt/gitlab/embedded/service/gitlab-shell/config.yml\nor\n/opt/gitlab/embedded/bin/gitaly-hooks check /var/opt/gitlab/gitaly/config.toml\n\n\ngitaly server open 9236 to gitlab server;\t\n\ngitaly server open 8075 to praefect server; \n​\ton praefect server: sudo /opt/gitlab/embedded/bin/praefect -config /var/opt/gitlab/praefect/config.toml dial-nodes\n\nprometheus_listen_addr\nPraefect的9652 和 Gitaly的9236：\ngrafana打开explorer，输入gitlab_build_info 结果中可以看到localhost的gitlab server，Praefect，以及三个Gitaly，如果看不到，就说明端口没有开启或者防火墙挡住\n")])])]),a("p",[e._v("通信TOKEN")]),e._v(" "),a("p",[e._v("可以用"),a("code",[e._v("tool: openssl rand -base64 32")]),e._v(" 生成")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("GITLAB_SHELL_SECRET_TOKEN: this is used by Git hooks to make callback HTTP API requests to GitLab when accepting a Git push. This secret is shared with GitLab Shell for legacy reasons.\n\nPRAEFECT_EXTERNAL_TOKEN: repositories hosted on your Praefect cluster can only be accessed by Gitaly clients that carry this token.\n\nPRAEFECT_INTERNAL_TOKEN: this token is used for replication traffic inside your Praefect cluster. This is distinct from PRAEFECT_EXTERNAL_TOKEN because Gitaly clients must not be able to access internal nodes of the Praefect cluster directly; that could lead to data loss.\n\nPRAEFECT_SQL_PASSWORD: this password is used by Praefect to connect to PostgreSQL.\n\n--------------------------------------------------------------------\n--- gitlab server:\n--------------------------------------------------------------------\ngit_data_dirs({\n  \"default\" => {\n    \"gitaly_address\" => \"tcp://<PRAEFECT IP>:2305\",\n    \"gitaly_token\" => 'PRAEFECT_EXTERNAL_TOKEN'\n  }\n})\n\ngitlab_shell['secret_token'] = 'GITLAB_SHELL_SECRET_TOKEN'\n\n--------------------------------------------------------------------\n--- praefect:\n--------------------------------------------------------------------\npraefect['auth_token'] = 'PRAEFECT_EXTERNAL_TOKEN'\n\n\npraefect['database_host'] = '<TRACKING POSTGRESQL DATABASE IP>'\npraefect['database_port'] = 5432\npraefect['database_user'] = 'praefect'\npraefect['database_password'] = 'PRAEFECT_SQL_PASSWORD'\npraefect['database_dbname'] = 'praefect_production'\n\n# Name of storage hash must match storage name in git_data_dirs on GitLab\n# server ('praefect') and in git_data_dirs on Gitaly nodes ('gitaly-1')\npraefect['virtual_storages'] = {\n  'default' => {\n    'gitaly-1' => {\n      'address' => 'tcp://<GITALY VM1 IP>:8075',\n      'token'   => 'PRAEFECT_INTERNAL_TOKEN',\n    },\n    'gitaly-2' => {\n      'address' => 'tcp://<GITALY VM2 IP>:8075',\n      'token'   => 'PRAEFECT_INTERNAL_TOKEN'\n    },\n    'gitaly-3' => {\n      'address' => 'tcp://<GITALY VM3 IP>:8075',\n      'token'   => 'PRAEFECT_INTERNAL_TOKEN'\n    }\n  }\n}\n--------------------------------------------------------------------\n--- gitaly:\n--------------------------------------------------------------------\ngitaly['auth_token'] = 'PRAEFECT_INTERNAL_TOKEN'\n\ngitlab_shell['secret_token'] = 'GITLAB_SHELL_SECRET_TOKEN'\n")])])]),a("h3",{attrs:{id:"_3-2-gitrail-server-multi-nodes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-gitrail-server-multi-nodes"}},[e._v("#")]),e._v(" 3.2 gitrail-server multi-nodes")]),e._v(" "),a("h4",{attrs:{id:"官方方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#官方方案"}},[e._v("#")]),e._v(" 官方方案")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/ee/administration/geo/replication/multiple_servers.html#geo-for-multiple-nodes-premium-only")]),e._v(" "),a("p",[e._v("然后我顺着找到这个https://docs.gitlab.com/ee/administration/reference_architectures/index.html#traffic-load-balancer-starter-only")]),e._v(" "),a("blockquote",[a("p",[e._v("This requires separating out GitLab into multiple application nodes with an added "),a("a",{attrs:{href:"https://docs.gitlab.com/ee/administration/high_availability/load_balancer.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("load balancer"),a("OutboundLink")],1),e._v(". The load balancer will distribute traffic across GitLab application nodes. Meanwhile, each application node connects to a shared file server and database systems on the back end. This way, if one of the application servers fails, the workflow is not interrupted. "),a("a",{attrs:{href:"https://www.haproxy.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("HAProxy"),a("OutboundLink")],1),e._v(" is recommended as the load balancer.")]),e._v(" "),a("p",[e._v("Supported tiers: "),a("a",{attrs:{href:"https://about.gitlab.com/pricing/",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitLab Starter, Premium, and Ultimate"),a("OutboundLink")],1)])]),e._v(" "),a("p",[e._v("可以看到这个是要付费后才支持的，主要就是如何配置share db；")]),e._v(" "),a("p",[e._v("还有几个疑问：redis不需要分离吗？ session存储在哪里，如何share？有几种可能：\n1.load Balancer可以有策略让一个用户整个session期间只连接固定一个Application server，所以不会有session共享问题\n2.session写到了db，按这里文档所说分离share db即可\n3.session写到redis，分离share redis即可（但是文档此处没有提redis）\n4.session写到Application memory，这个解决只能用方法1")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/ee/administration/high_availability/load_balancer.html#load-balancer-for-multi-node-gitlab")]),e._v(" "),a("p",[e._v("这个是在gitlab scope之外，采用外部的负载均衡，")]),e._v(" "),a("p",[e._v("跟gitlab沟通的结果发现，他们故意这种搞，就是为了卖他们的premium account所带的技术支持服务，")]),e._v(" "),a("p",[e._v("当然我推测了下，上面说的 shared file server应该是指Gitaly nodes，那么database system是指postgresql，然后我从gitlab server的config里面看到")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("### GitLab database settings\n###! Docs: https://docs.gitlab.com/omnibus/settings/database.html\n###! **Only needed if you use an external database.**\n# gitlab_rails['db_adapter'] = \"postgresql\"\n# gitlab_rails['db_encoding'] = \"unicode\"\n# gitlab_rails['db_collation'] = nil\n# gitlab_rails['db_database'] = \"gitlabhq_production\"\n# gitlab_rails['db_pool'] = 1\n# gitlab_rails['db_username'] = \"gitlab\"\n# gitlab_rails['db_password'] = nil\n# gitlab_rails['db_host'] = nil\n# gitlab_rails['db_port'] = 5432\n# gitlab_rails['db_socket'] = nil\n# gitlab_rails['db_sslmode'] = nil\n# gitlab_rails['db_sslcompression'] = 0\n# gitlab_rails['db_sslrootcert'] = nil\n# gitlab_rails['db_sslcert'] = nil\n# gitlab_rails['db_sslkey'] = nil\n# gitlab_rails['db_prepared_statements'] = false\n# gitlab_rails['db_statements_limit'] = 1000\n\n\n### GitLab Redis settings\n###! Connect to your own Redis instance\n###! Docs: https://docs.gitlab.com/omnibus/settings/redis.html\n\n#### Redis TCP connection\n# gitlab_rails['redis_host'] = \"127.0.0.1\"\n# gitlab_rails['redis_port'] = 6379\n# gitlab_rails['redis_ssl'] = false\n# gitlab_rails['redis_password'] = nil\n# gitlab_rails['redis_database'] = 0\n# gitlab_rails['redis_enable_client'] = true\n")])])]),a("p",[e._v("所以推测只需要按照如下文档建立一个外部db即可")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/omnibus/settings/database.html")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/omnibus/settings/database.html#using-a-non-packaged-postgresql-database-management-server")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/ee/install/requirements.html#database")]),e._v(" "),a("p",[e._v("但是还有个问题，redis是不是也要剥离到外部？从配置文件看确实可以，但是这些弄下来需要的机器实在不少，而且也是难以维护，所3以我没有尝试；")]),e._v(" "),a("h4",{attrs:{id:"备份方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#备份方案"}},[e._v("#")]),e._v(" 备份方案")]),e._v(" "),a("p",[e._v("method 1： back & restore")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/ee/raketasks/backup_restore.html")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/omnibus/settings/backups.html")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("uninstall...\ninstall same version as the source machine\nsystemctl start gitlab-runsvdir\nsudo gitlab-ctl reconfigure\nsudo gitlab-ctl start\nfrom source:\nsudo scp root@X.X.X.133:/var/opt/gitlab/backups/1600046306_2020_09_14_13.3.0-ee_gitlab_backup.tar /var/opt/gitlab/backups/\nsudo chown git.git /var/opt/gitlab/backups/1600046306_2020_09_14_13.3.0-ee_gitlab_backup.tar\n\nsudo gitlab-ctl stop unicorn\nsudo gitlab-ctl stop puma\nsudo gitlab-ctl stop sidekiq\n# Verify\nsudo gitlab-ctl status\n\n# This command will overwrite the contents of your GitLab database! \nsudo gitlab-backup restore BACKUP=/var/opt/gitlab/backups/1600046306_2020_09_14_13.3.0-ee_gitlab_backup.tar\nThe backup file 1600046306_2020_09_14_13.3.0-ee_gitlab_backup_gitlab_backup.tar does not exist!\n\nsudo gitlab-backup restore 不加参数居然是可以工作的，所以/var/opt/gitlab/backups下面只放一个tar\n\nrestore `/etc/gitlab/gitlab-secrets.json`\nsudo scp root@X.X.X.133:/etc/gitlab/config_backup/gitlab_config_1598345534_2020_08_25.tar /etc/gitlab/\nsudo mv /etc/gitlab /etc/gitlab.$(date +%s)\nsudo tar -xf gitlab_config_1598345534_2020_08_25.tar -C /\ntar: Removing leading `/' from member names 这句话不知道什么意思\n\nvim /etc/gitlab/gitlab.rb 修改external_url\nsudo gitlab-ctl reconfigure\nsudo gitlab-ctl restart\n注意执行上面一句的时候要等一会才开始执行下面的检查，否则会抛很多错误\nsudo gitlab-rake gitlab:check SANITIZE=true\n  \n开放相应的端口，并进行连通性检测\ngitlab server open api 8080? to gitaly server;\n\n修改Gitaly nodes的internal_api_url\n")])])]),a("p",[e._v("method 2：rsync")]),e._v(" "),a("p",[e._v("安装rsync实现自动增量同步到远端")]),e._v(" "),a("p",[e._v("参考《linux/rsync》")]),e._v(" "),a("p",[e._v("https://www.jianshu.com/p/bc45631aa561")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('------------------------------------------------\n--- 服务器端\n------------------------------------------------\nyum install rsync\n\nvim /etc/rsyncd.conf\n​```\n# /etc/rsyncd: configuration file for rsync daemon mode\n\n# See rsyncd.conf man page for more options.\n\n# configuration example:\n\nuid = root\ngid = root\nuse chroot = no\n#port = 973\n# max connections = 4\npid file = /var/run/rsyncd.pid\nlog file = /var/rsync/rsyncd.log\nsecrets file = /etc/rsync.password\n# exclude = lost+found/\n# transfer logging = yes\n# timeout = 900\n# ignore nonreadable = yes\n# dont compress   = *.gz *.tgz *.zip *.z *.Z *.rpm *.deb *.bz2\n\n# [ftp]\n#        path = /home/ftp\n#        comment = ftp export area\n[gitlab_path1]\ncomment = "/opt/gitlab"\npath = /opt/gitlab\nauth users = root, rsync_backup\nread only = yes \nlist = yes \nhosts allow = <DEST IP>\nhosts deny = *\n[gitlab_path2]\ncomment = "/var/opt/gitlab"\npath = /var/opt/gitlab\nauth users = root, rsync_backup\nread only = yes\nlist = yes \nhosts allow = <DEST IP>\nhosts deny = *\n[gitlab_path3]\ncomment = "/etc/gitlab"\npath = /etc/gitlab\nauth users = root, rsync_backup\nread only = yes \nlist = yes \nhosts allow = <DEST IP>\nhosts deny = *\n[gitlab_path4]\ncomment = "/var/log/gitlab"\npath = /var/log/gitlab\nauth users = root, rsync_backup\nread only = yes \nlist = yes \nhosts allow = <DEST IP>\nhosts deny = *\n[gitlab_path5]\ncomment = "/run/gitlab"\npath = /run/gitlab\nauth users = root, rsync_backup\nread only = yes \nlist = yes \nhosts allow = <DEST IP>\nhosts deny = *\n​```\n\necho "rsync_backup:1" >/etc/rsync.password  \nchmod 600 /etc/rsync.password\n\nfirewall-cmd --permanent --add-port=873/tcp\nfirewall-cmd --reload\n\n------------------------------------------------\n--- 客户端\n------------------------------------------------\nyum install rsync\n\necho "1" >/etc/rsync.password  \nchmod 600 /etc/rsync.password\n\nvim /opt/gitlab_rsync.sh\n\nrsync -avz --delete rsync_backup@<SOURCE IP>::gitlab_path1 /opt/gitlab --password-file=/etc/rsync.password >/dev/null 2>&1\nrsync -avz --delete rsync_backup@<SOURCE IP>::gitlab_path2 /var/opt/gitlab --password-file=/etc/rsync.password >/dev/null 2>&1\nrsync -avz --delete rsync_backup@<SOURCE IP>::gitlab_path3 /etc/gitlab --password-file=/etc/rsync.password >/dev/null 2>&1\nrsync -avz --delete rsync_backup@<SOURCE IP>::gitlab_path4 /var/log/gitlab --password-file=/etc/rsync.password >/dev/null 2>&1\nrsync -avz --delete rsync_backup@<SOURCE IP>::gitlab_path5 /run/gitlab --password-file=/etc/rsync.password >/dev/null 2>&1\n\nchmod 755 /opt/gitlab_rsync.sh\n\necho "00 3 * * * root /opt/gitlab_rsync.sh" >> /etc/crontab\n\n')])])]),a("h3",{attrs:{id:"_3-3-postgresql-replication"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-postgresql-replication"}},[e._v("#")]),e._v(" 3.3 Postgresql Replication")]),e._v(" "),a("p",[e._v("GEO 这个不需要https://docs.gitlab.com/ee/administration/geo/replication/index.html")]),e._v(" "),a("p",[e._v("需要的是gitlab-server Application Database和Praefect tracking database")]),e._v(" "),a("h3",{attrs:{id:"_3-4-ha-roles"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-ha-roles"}},[e._v("#")]),e._v(" 3.4 ？？HA Roles")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/omnibus/roles/README.html#")]),e._v(" "),a("p",[e._v("The majority of the following roles will only work on a GitLab Enterprise Edition, meaning a gitlab-ee Omnibus package. It will be mentioned next to each role.")]),e._v(" "),a("p",[e._v("没太搞懂，直接通过配置多个节点？ee才可以用")]),e._v(" "),a("p",[e._v("redis roles")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/omnibus/roles/README.html#redis-server-roles")]),e._v(" "),a("h2",{attrs:{id:"_4-maintenance-维护"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-maintenance-维护"}},[e._v("#")]),e._v(" 4. Maintenance 维护")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/omnibus/maintenance/README.html")]),e._v(" "),a("h3",{attrs:{id:"数据管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据管理"}},[e._v("#")]),e._v(" 数据管理")]),e._v(" "),a("h4",{attrs:{id:"gitlab-server-workhorse"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-server-workhorse"}},[e._v("#")]),e._v(" gitlab server(workhorse)")]),e._v(" "),a("h5",{attrs:{id:"gitlab-rails-dbconsole"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-rails-dbconsole"}},[e._v("#")]),e._v(" gitlab-rails dbconsole")]),e._v(" "),a("p",[e._v("gitlabhq_production=>\\dt")]),e._v(" "),a("h5",{attrs:{id:"gitlab-rails-console-users-and-products"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-rails-console-users-and-products"}},[e._v("#")]),e._v(" gitlab-rails console >> users and products")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/ee/administration/troubleshooting/navigating_gitlab_via_rails_console.html")]),e._v(" "),a("p",[e._v("密码默认8位")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("user=User.where(username: 'test1').first\nuser.password\nuser.password='12345678'\nuser.password_confirmation='12345678'\nuser.save\nEnqueued ActionMailer::DeliveryJob (Job ID: 1fd0a22c-6908-45bd-b0b1-35f4da4aad25) to Sidekiq(mailers) with arguments: \"DeviseMailer\", \"password_change\", \"deliver_now\", #<GlobalID:0x00007fd3a9a03370 @uri=#<URI::GID gid://gitlab/User/2>>\n=> true\n")])])]),a("p",[e._v("Access control")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/ee/security/README.html#securing-your-gitlab-installation")]),e._v(" "),a("h4",{attrs:{id:"praefect-database"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#praefect-database"}},[e._v("#")]),e._v(" praefect database")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("su - postgres\n-bash-4.2$ psql\npostgres-# \\c praefect_production;\npraefect_production-# \\dt\n")])])]),a("h4",{attrs:{id:"gitaly-repository"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitaly-repository"}},[e._v("#")]),e._v(" gitaly repository")]),e._v(" "),a("p",[e._v("ls /var/opt/gitlab/git-data/repositories")]),e._v(" "),a("h3",{attrs:{id:"migration-迁移"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#migration-迁移"}},[e._v("#")]),e._v(" Migration 迁移")]),e._v(" "),a("p",[e._v("https://about.gitlab.com/handbook/customer-success/playbooks/server-migrations.html")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/omnibus/settings/backups.html")]),e._v(" "),a("h4",{attrs:{id:"配置备份-backup-and-restore-omnibus-gitlab-configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置备份-backup-and-restore-omnibus-gitlab-configuration"}},[e._v("#")]),e._v(" 配置备份 Backup and restore Omnibus GitLab configuration")]),e._v(" "),a("p",[e._v("It is recommended to keep a copy of "),a("code",[e._v("/etc/gitlab")]),e._v(", or at least of "),a("code",[e._v("/etc/gitlab/gitlab-secrets.json")]),e._v(", in a safe place. If you ever need to restore a GitLab application backup you need to also restore "),a("code",[e._v("gitlab-secrets.json")]),e._v(". If you do not, GitLab users who are using two-factor authentication will lose access to your GitLab server and ‘secure variables’ stored in GitLab CI will be lost.")]),e._v(" "),a("p",[e._v("Your machines SSH host keys are stored in a separate location at "),a("code",[e._v("/etc/ssh/")]),e._v(". Be sure to also "),a("a",{attrs:{href:"https://superuser.com/questions/532040/copy-ssh-keys-from-one-server-to-another-server/532079#532079",target:"_blank",rel:"noopener noreferrer"}},[e._v("backup and restore those keys"),a("OutboundLink")],1),e._v(" to avoid man-in-the-middle attack warnings if you have to perform a full machine restore.")]),e._v(" "),a("p",[e._v("do not store your GitLab application backups (Git repositories, SQL data) in the same place as your configuration backup ("),a("code",[e._v("/etc/gitlab")]),e._v("). The "),a("code",[e._v("gitlab-secrets.json")]),e._v(" file (and possibly also the "),a("code",[e._v("gitlab.rb")]),e._v(" file) contain database encryption keys to protect sensitive data in the SQL database:")]),e._v(" "),a("ul",[a("li",[e._v("GitLab two-factor authentication (2FA) user secrets (‘QR codes’)")]),e._v(" "),a("li",[e._v("GitLab CI ‘secure variables’")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("MANUAL BACKUP:\n`gitlab-ctl backup-etc`\nConfiguration backup archive complete: /etc/gitlab/config_backup/gitlab_config_1598345534_2020_08_25.tar\n\nAUTO BACKUP:\nsudo crontab -e -u root\nschedule the backup to run every morning after a weekday, Tuesday (day 2) through Saturday (day 6):\n15 04 * * 2-6  gitlab-ctl backup-etc && cd /etc/gitlab/config_backup && cp $(ls -t | head -n1) /secret/gitlab/backups/\n\n注意要设置好Limit backup lifetime for local files (prune old backups)\n否则会磁盘写满\n## Limit backup lifetime to 7 days - 604800 seconds\ngitlab_rails['backup_keep_time'] = 604800\n\nRESTORE:\n# Rename the existing /etc/gitlab, if any\nsudo mv /etc/gitlab /etc/gitlab.$(date +%s)\n# Change the example timestamp below for your configuration backup\nsudo tar -xf gitlab_config_1487687824_2017_02_21.tar -C /\nsudo gitlab-ctl reconfigure\n")])])]),a("h4",{attrs:{id:"creating-an-application-backup"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-an-application-backup"}},[e._v("#")]),e._v(" Creating an application backup")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/ee/raketasks/backup_restore.html")]),e._v(" "),a("p",[e._v("GitLab provides a simple command line interface to back up your whole instance. It backs up your:")]),e._v(" "),a("ul",[a("li",[e._v("Database")]),e._v(" "),a("li",[e._v("Attachments")]),e._v(" "),a("li",[e._v("Git repositories data")]),e._v(" "),a("li",[e._v("CI/CD job output logs")]),e._v(" "),a("li",[e._v("CI/CD job artifacts")]),e._v(" "),a("li",[e._v("LFS objects")]),e._v(" "),a("li",[e._v("Container Registry images")]),e._v(" "),a("li",[e._v("GitLab Pages content")])]),e._v(" "),a("p",[e._v("The "),a("a",{attrs:{href:"https://docs.gitlab.com/ee/raketasks/backup_restore.html#back-up-gitlab",target:"_blank",rel:"noopener noreferrer"}},[e._v("backup Rake task"),a("OutboundLink")],1),e._v(" GitLab provides does "),a("strong",[e._v("not")]),e._v(" store your configuration files. The primary reason for this is that your database contains encrypted information for two-factor authentication, the CI/CD ‘secure variables’, and so on. Storing encrypted information along with its key in the same place defeats the purpose of using encryption in the first place.")]),e._v(" "),a("p",[a("strong",[e._v("prerequisites：")])]),e._v(" "),a("p",[e._v("sudo yum install rsync")]),e._v(" "),a("p",[a("strong",[e._v("START")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#手动\nsudo gitlab-backup create GZIP_RSYNCABLE=yes \nCreating backup archive: 1599013473_2020_09_02_13.3.0-ee_gitlab_backup.tar ... done\nUploading backup archive to remote storage  ... skipped\nDeleting tmp directories ... done\ndone\ndone\ndone\ndone\ndone\ndone\ndone\nDeleting old backups ... skipping\nWarning: Your gitlab.rb and gitlab-secrets.json files contain sensitive data\nand are not included in this backup. You will need these files to restore a backup.\nPlease back them up manually.\nBackup task is done.\n\n/var/opt/gitlab/backups/1599013473_2020_09_02_13.3.0-ee_gitlab_backup.tar\n\n#自动\nsudo su -\ncrontab -e\n0 2 * * * /opt/gitlab/bin/gitlab-backup create GZIP_RSYNCABLE=yes CRON=1\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("##STRATEGY:\ndefault streaming strategy:\nsudo gitlab-backup create\n\nsudo gitlab-backup create STRATEGY=copy\n\nTo make sure the generated archive is intelligently transferable by rsync, the GZIP_RSYNCABLE=yes option can be set. This will set the --rsyncable option to gzip：\nsudo gitlab-backup GZIP_RSYNCABLE=yes\n\n##STORE:\nBackup create will store a tar file in `/var/opt/gitlab/backups`.\n\nIf you want to store your GitLab backups in a different directory, add the following setting to `/etc/gitlab/gitlab.rb` and run `sudo gitlab-ctl reconfigure`:\ngitlab_rails['backup_path'] = '/mnt/backups'\n\n##SKIP:\ndb (database)\nuploads (attachments)\nrepositories (Git repositories data)\nbuilds (CI job output logs)\nartifacts (CI job artifacts)\nlfs (LFS objects)\nregistry (Container Registry images)\npages (Pages content)\n\nsudo gitlab-backup create SKIP=db,uploads\n\nIn some cases (for example, if the backup is picked up by other backup software) creating a .tar file might be wasted effort or even directly harmful, so you can skip this step by adding tar to the SKIP environment variable:\nsudo gitlab-backup create SKIP=tar\n\n##UPLOAD:\n\nUpload to Remote: Specifying a custom directory for backups:\nsudo gitlab-backup create DIRECTORY=daily\nsudo gitlab-backup create DIRECTORY=weekly\n\nUpload to Local mounted shares:\ngitlab_rails['backup_upload_connection'] = {\n  :provider => 'Local',\n  :local_root => '/mnt/backups'\n}\n\n# The directory inside the mounted folder to copy backups to\n# Use '.' to store them in the root directory\ngitlab_rails['backup_upload_remote_directory'] = 'gitlab_backups'\n\n##PERMISSION:\ngitlab_rails['backup_archive_permissions'] = 0644 # Makes the backup archives world-readable\n\n\n## Limit backup lifetime to 7 days - 604800 seconds\ngitlab_rails['backup_keep_time'] = 604800\n\n")])])]),a("p",[e._v("Daily Backup:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("sudo su -\ncrontab -e\n\nto schedule the backup for everyday at 2 AM:\n0 2 * * * /opt/gitlab/bin/gitlab-backup create CRON=1\n")])])]),a("h4",{attrs:{id:"restore"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#restore"}},[e._v("#")]),e._v(" Restore:")]),e._v(" "),a("p",[a("strong",[e._v("prerequisites")])]),e._v(" "),a("p",[e._v("!!You can only restore a backup to "),a("strong",[e._v("exactly the same version and type (CE/EE)")]),e._v(" of GitLab that you created it on, for example CE 9.1.0!!")]),e._v(" "),a("p",[e._v("need to restore "),a("code",[e._v("/etc/gitlab/gitlab-secrets.json")]),e._v("This file contains the database encryption key, "),a("a",{attrs:{href:"https://docs.gitlab.com/ee/ci/variables/README.html#gitlab-cicd-environment-variables",target:"_blank",rel:"noopener noreferrer"}},[e._v("CI/CD variables"),a("OutboundLink")],1),e._v(", and variables used for "),a("a",{attrs:{href:"https://docs.gitlab.com/ee/user/profile/account/two_factor_authentication.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("two-factor authentication"),a("OutboundLink")],1),e._v(". If you fail to restore this encryption key file along with the application data backup, users with two-factor authentication enabled and GitLab Runners will lose access to your GitLab server.")]),e._v(" "),a("ul",[a("li",[e._v("You have run "),a("code",[e._v("sudo gitlab-ctl reconfigure")]),e._v(" at least once.")]),e._v(" "),a("li",[e._v("GitLab is running. If not, start it using "),a("code",[e._v("sudo gitlab-ctl start")]),e._v(".")])]),e._v(" "),a("p",[a("strong",[e._v("Note:")]),e._v(" There is currently a "),a("a",{attrs:{href:"https://gitlab.com/gitlab-org/omnibus-gitlab/-/issues/3470",target:"_blank",rel:"noopener noreferrer"}},[e._v("known issue"),a("OutboundLink")],1),e._v(" for restore not working with "),a("code",[e._v("pgbouncer")]),e._v(". In order to workaround the issue, the Rails node will need to bypass "),a("code",[e._v("pgbouncer")]),e._v(" and connect directly to the primary database node. This can be done by setting "),a("code",[e._v("gitlab_rails['db_host']")]),e._v(" and "),a("code",[e._v("gitlab_rails['port']")]),e._v(" to connect to the primary database node and "),a("a",{attrs:{href:"https://docs.gitlab.com/ee/administration/restart_gitlab.html#omnibus-gitlab-reconfigure",target:"_blank",rel:"noopener noreferrer"}},[e._v("reconfiguring GitLab"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[a("strong",[e._v("START:")])]),e._v(" "),a("p",[e._v("make sure your backup tar file is in the backup directory described in the "),a("code",[e._v("gitlab.rb")]),e._v(" configuration "),a("code",[e._v("gitlab_rails['backup_path']")]),e._v(". The default is "),a("code",[e._v("/var/opt/gitlab/backups")]),e._v(". It needs to be owned by the "),a("code",[e._v("git")]),e._v(" user.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("sudo cp 11493107454_2018_04_25_10.6.4-ce_gitlab_backup.tar /var/opt/gitlab/backups/\nsudo chown git.git /var/opt/gitlab/backups/11493107454_2018_04_25_10.6.4-ce_gitlab_backup.tar\n")])])]),a("p",[e._v("Stop the processes that are connected to the database. Leave the rest of GitLab running:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("sudo gitlab-ctl stop unicorn\nsudo gitlab-ctl stop puma\nsudo gitlab-ctl stop sidekiq\n# Verify\nsudo gitlab-ctl status\n")])])]),a("p",[e._v("Restore the backup, specifying the timestamp of the backup you wish to restore:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# This command will overwrite the contents of your GitLab database! \nsudo gitlab-backup restore BACKUP=11493107454_2018_04_25_10.6.4-ce\n")])])]),a("p",[e._v("Next, restore "),a("code",[e._v("/etc/gitlab/gitlab-secrets.json")]),e._v(" if necessary as mentioned above.")]),e._v(" "),a("p",[e._v("Reconfigure, restart and check GitLab:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("sudo gitlab-ctl reconfigure\nsudo gitlab-ctl restart\nsudo gitlab-rake gitlab:check SANITIZE=true\n")])])]),a("h3",{attrs:{id:"服务升级-upgrade-policy-卸载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务升级-upgrade-policy-卸载"}},[e._v("#")]),e._v(" 服务升级(upgrade policy)+卸载")]),e._v(" "),a("h4",{attrs:{id:"主要规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主要规则"}},[e._v("#")]),e._v(" 主要规则")]),e._v(" "),a("p",[e._v("Although you can generally upgrade through multiple GitLab versions in one go, sometimes this can cause issues.")]),e._v(" "),a("p",[a("strong",[e._v("升级到 minor version")])]),e._v(" "),a("p",[a("a",{attrs:{href:"https://docs.gitlab.com/ee/update/#upgrade-paths",target:"_blank",rel:"noopener noreferrer"}},[e._v("upgrade path"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("When not explicitly specified, upgrade GitLab to the latest available patch release rather than the first patch release, for example 13.8.8 instead of 13.8.0. This includes versions you must stop at on the upgrade path as there may be fixes for issues relating to the upgrade process. Specifically around a major version, crucial database schema and migration patches are included in the latest patch releases.")]),e._v(" "),a("p",[a("strong",[e._v("升级到 major version")]),e._v("\nUpgrading the major version requires more attention. Backward-incompatible changes and migrations are reserved for major versions. Follow the directions carefully as we cannot guarantee that upgrading between major versions is seamless.")]),e._v(" "),a("p",[e._v("A major upgrade requires the following steps:")]),e._v(" "),a("ul",[a("li",[e._v("Start by identifying a supported upgrade path. This is essential for a successful major version upgrade.")]),e._v(" "),a("li",[e._v("Upgrade to the latest minor version of the preceding major version.")]),e._v(" "),a("li",[e._v("Upgrade to the “dot zero” release of the next major version (X.0.Z).")]),e._v(" "),a("li",[e._v("Optional. Follow the upgrade path, and proceed with upgrading to newer releases of that major version.")])]),e._v(" "),a("p",[e._v("关于upgrade path，gitlab不保证每次升级都是100%成功的：")]),e._v(" "),a("p",[e._v("Find where your version sits in the upgrade path below, and upgrade GitLab accordingly, while also consulting the "),a("a",{attrs:{href:"https://docs.gitlab.com/ee/update/README.html#version-specific-upgrading-instructions",target:"_blank",rel:"noopener noreferrer"}},[e._v("version-specific upgrade instructions"),a("OutboundLink")],1),e._v("” 例如参考Troubleshooting中的“版本升级后出现500无法访问project”")]),e._v(" "),a("h4",{attrs:{id:"升级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#升级"}},[e._v("#")]),e._v(" 升级")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/ee/update/package/index.html")]),e._v(" "),a("ol",[a("li",[e._v("执行 background_migration\nWhen upgrading to a new major version, remember to first "),a("a",{attrs:{href:"https://docs.gitlab.com/ee/update/background_migrations.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("check for background migrations"),a("OutboundLink")],1),e._v(".")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("sudo gitlab-rails runner -e production 'puts Gitlab::BackgroundMigration.remaining'\nsudo gitlab-rails runner -e production 'puts Gitlab::Database::BackgroundMigration::BatchedMigration.queued.count'\nFor GitLab 14.0-14.9:\nsudo gitlab-rails runner -e production 'puts Gitlab::Database::BackgroundMigration::BatchedMigration.failed.count'\nFor GitLab 14.10 and later:\nsudo gitlab-rails runner -e production 'puts Gitlab::Database::BackgroundMigration::BatchedMigration.with_status(:failed).count'\n")])])]),a("p",[e._v("On the top bar, select Main menu > Admin.\nOn the left sidebar, select Monitoring > Background Migrations.")]),e._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[e._v("按照确定的Upgrade path开始安装")])]),e._v(" "),a("p",[e._v("The GitLab database is backed up before installing a newer GitLab version. You may skip this automatic database backup by creating an empty file at /etc/gitlab/skip-auto-backup")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("rpm -Uvh <package_name> \n\n#Upgrade complete! If your GitLab server is misbehaving try running\nsudo gitlab-ctl restart\n\n")])])]),a("h4",{attrs:{id:"升级后检查"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#升级后检查"}},[e._v("#")]),e._v(" 升级后检查")]),e._v(" "),a("p",[a("strong",[e._v("健康检查:")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("sudo gitlab-ctl status\nsudo gitlab-rake gitlab:check SANITIZE=true\n\ngitlab-rake gitlab:check | grep no\ngitlab-rake db:migrate:status | grep down\n")])])]),a("p",[a("strong",[e._v("查看版本号：")])]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/omnibus/package-information/\nOnce the Omnibus GitLab package is installed, all versions of the bundled libraries are located in /opt/gitlab/version-manifest.txt.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('gitlab server上可以执行： \ngitlab-rake gitlab:env:info\n\nPraefect和Gitaly上面不可以，可以通过：\nyum list installed|grep "gitlab"\n或\ncat /opt/gitlab/version-manifest.txt\n')])])]),a("h4",{attrs:{id:"坑"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#坑"}},[e._v("#")]),e._v(" 坑")]),e._v(" "),a("p",[e._v("这里有关于升级的policy：")]),e._v(" "),a("p",[e._v("要注意：大小版本、ce还是ee及安装方法")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/ee/update/")]),e._v(" "),a("p",[e._v("比如如果是手动rpm package安装，参考：")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/omnibus/update")]),e._v(" "),a("p",[e._v("对于集群有个坑：Praefect和Gitaly升级都没问题，但是对于gitlab server，如果是在停止状态下升级，会出现错误，因为gitlab server升级时会进行自动备份，服务都停了就无法备份了，所以要"),a("code",[e._v("sudo touch /etc/gitlab/skip-auto-backup")]),e._v("关掉自动backup即可")]),e._v(" "),a("p",[e._v("其他如下：")]),e._v(" "),a("p",[e._v("gitlab-ctl stop的坑：如果刚好你还在某个console里面，stop虽然显示全部down，但是ps -e|grep gitlab以及ps -e|grep postgres还是会看到一堆服务，")]),e._v(" "),a("p",[a("s",[e._v("所以退出正在使用的所有gitlab console，再一次执行gitlab-ctl stop，实在不行进行kill -9或者gitlab-ctl kill "),a("service")],1)]),e._v(" "),a("p",[e._v("如果是卸载还需要关闭一个服务：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("systemctl disable gitlab-runsvdir\nsystemctl stop gitlab-runsvdir\n")])])]),a("p",[e._v("注意:升级之后,之前的备份就会失效,意思是无法用之前的backup restore,只能降级,所以升级之后建立尽快做备份")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("(optional)\ngitlab-ctl cleanse\n\n/root/gitlab-cleanse-2020-08-20T16:28/config_backup\n\n1、停止gitlab\ngitlab-ctl stop\n2、卸载gitlab（注意这里写的是gitlab-ce）\nrpm -e gitlab-ce\n#systemctl disable gitlab-runsvdir (如果不想重装)\nsystemctl stop gitlab-runsvdir\n3、查看gitlab进程\nps -lef | grep gitlab\n4、杀掉第一个进程（就是带有好多.............的进程）\n kill -9 18777\n杀掉后，在ps aux | grep gitlab确认一遍，还有没有gitlab的进程\n5、删除所有包含gitlab文件\nfind / -name gitlab | xargs rm -rf\nyum localinstall gitlab-ce-13.0.7-ce.0.el7.x86_64.rpm\nscp root@X.X.X.136:/etc/gitlab/gitlab.rb /etc/gitlab/\nvim /etc/gitlab/gitlab.rb\n# ruby_block[wait for praefect service socket] action run\nsystemctl start gitlab-runsvdir\ngitlab-ctl reconfigure\n")])])]),a("h4",{attrs:{id:"升级例子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#升级例子"}},[e._v("#")]),e._v(" 升级例子")]),e._v(" "),a("p",[e._v("gitlab 13.8.8 升级到 14.3.6")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("1.\nsudo gitlab-rails runner -e production 'puts Gitlab::BackgroundMigration.remaining'\nrpm -Uvh gitlab-ee-13.8.8-ce.0.el7.x86_64.rpm\ngitlab-rake gitlab:env:info\ngitlab-rake gitlab:check | grep no\ngitlab-rake db:migrate:status | grep down\nsudo gitlab-ctl restart\ncheck dashboard\n\n2.\nsudo gitlab-rails runner -e production 'puts Gitlab::BackgroundMigration.remaining'\nrpm -Uvh gitlab-ee-13.12.15-ce.0.el7.x86_64.rpm\ngitlab-rake gitlab:env:info\ngitlab-rake gitlab:check | grep no\ngitlab-rake db:migrate:status | grep down\nsudo gitlab-ctl restart\ncheck dashboard\n\n3.\nsudo gitlab-rails runner -e production 'puts Gitlab::BackgroundMigration.remaining'\nrpm -Uvh gitlab-ee-14.0.12-ce.0.el7.x86_64.rpm\ngitlab-rake gitlab:env:info\ngitlab-rake gitlab:check | grep no\ngitlab-rake db:migrate:status | grep down\nsudo gitlab-ctl restart\ncheck dashboard\n\n4.\nsudo gitlab-rails runner -e production 'puts Gitlab::BackgroundMigration.remaining'\nsudo gitlab-rails runner -e production 'puts Gitlab::Database::BackgroundMigration::BatchedMigration.queued.count'\nsudo gitlab-rails runner -e production 'puts Gitlab::Database::BackgroundMigration::BatchedMigration.failed.count'\nrpm -Uvh gitlab-ee-14.3.6-ce.0.el7.x86_64.rpm\ngitlab-rake gitlab:env:info\ngitlab-rake gitlab:check | grep no\ngitlab-rake db:migrate:status | grep down\nsudo gitlab-ctl restart\ncheck dashboard\n\n")])])]),a("h2",{attrs:{id:"_5-cicd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-cicd"}},[e._v("#")]),e._v(" 5. CICD")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/ee/ci/README.html")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/ee/ci/variables/")]),e._v(" "),a("h3",{attrs:{id:"overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),a("p",[e._v("CICD 典型workflow")]),e._v(" "),a("p",[a("img",{attrs:{src:"/docs/docs_image/software/project_manage/git/gitlab_workflow_example.png",alt:""}})]),e._v(" "),a("p",[a("img",{attrs:{src:"/docs/docs_image/software/project_manage/git/gitlab_workflow_example_extended.png",alt:""}})]),e._v(" "),a("ol",[a("li",[e._v("Verify:\n"),a("ul",[a("li",[e._v("Automatically build and test your application with Continuous Integration.")]),e._v(" "),a("li",[e._v("Analyze your source code quality with "),a("a",{attrs:{href:"https://docs.gitlab.com/ee/user/project/merge_requests/code_quality.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitLab Code Quality"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("li",[e._v("Determine the browser performance impact of code changes with "),a("a",{attrs:{href:"https://docs.gitlab.com/ee/user/project/merge_requests/browser_performance_testing.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Browser Performance Testing"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("li",[e._v("Determine the server performance impact of code changes with "),a("a",{attrs:{href:"https://docs.gitlab.com/ee/user/project/merge_requests/load_performance_testing.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Load Performance Testing"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("li",[e._v("Perform a series of tests, such as "),a("a",{attrs:{href:"https://docs.gitlab.com/ee/user/application_security/container_scanning/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Container Scanning"),a("OutboundLink")],1),e._v(" , "),a("a",{attrs:{href:"https://docs.gitlab.com/ee/user/application_security/dependency_scanning/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Dependency Scanning"),a("OutboundLink")],1),e._v(" , and "),a("a",{attrs:{href:"https://docs.gitlab.com/ee/ci/unit_test_reports.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Unit tests"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("li",[e._v("Deploy your changes with "),a("a",{attrs:{href:"https://docs.gitlab.com/ee/ci/review_apps/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Review Apps"),a("OutboundLink")],1),e._v(" to preview the app changes on every branch.")])])]),e._v(" "),a("li",[e._v("Package:\n"),a("ul",[a("li",[e._v("Store Docker images with the "),a("a",{attrs:{href:"https://docs.gitlab.com/ee/user/packages/container_registry/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Container Registry"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("li",[e._v("Store packages with the "),a("a",{attrs:{href:"https://docs.gitlab.com/ee/user/packages/package_registry/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Package Registry"),a("OutboundLink")],1),e._v(".")])])]),e._v(" "),a("li",[e._v("Release:\n"),a("ul",[a("li",[e._v("Continuous Deployment, automatically deploying your app to production.")]),e._v(" "),a("li",[e._v("Continuous Delivery, manually click to deploy your app to production.")]),e._v(" "),a("li",[e._v("Deploy static websites with "),a("a",{attrs:{href:"https://docs.gitlab.com/ee/user/project/pages/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitLab Pages"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("li",[e._v("Ship features to only a portion of your pods and let a percentage of your user base to visit the temporarily deployed feature with "),a("a",{attrs:{href:"https://docs.gitlab.com/ee/user/project/canary_deployments.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Canary Deployments"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("li",[e._v("Deploy your features behind "),a("a",{attrs:{href:"https://docs.gitlab.com/ee/operations/feature_flags.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Feature Flags"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("li",[e._v("Add release notes to any Git tag with "),a("a",{attrs:{href:"https://docs.gitlab.com/ee/user/project/releases/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitLab Releases"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("li",[e._v("View of the current health and status of each CI environment running on Kubernetes with "),a("a",{attrs:{href:"https://docs.gitlab.com/ee/user/project/deploy_boards.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Deploy Boards"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("li",[e._v("Deploy your application to a production environment in a Kubernetes cluster with "),a("a",{attrs:{href:"https://docs.gitlab.com/ee/topics/autodevops/stages.html#auto-deploy",target:"_blank",rel:"noopener noreferrer"}},[e._v("Auto Deploy"),a("OutboundLink")],1),e._v(".")])])])]),e._v(" "),a("p",[e._v("With GitLab CI/CD you can also:")]),e._v(" "),a("ul",[a("li",[e._v("Easily set up your app’s entire lifecycle with "),a("a",{attrs:{href:"https://docs.gitlab.com/ee/topics/autodevops/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Auto DevOps"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("li",[e._v("Deploy your app to different "),a("a",{attrs:{href:"https://docs.gitlab.com/ee/ci/environments/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("environments"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("li",[e._v("Install your own "),a("a",{attrs:{href:"https://docs.gitlab.com/runner/",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitLab Runner"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://docs.gitlab.com/ee/ci/pipelines/schedules.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Schedule pipelines"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("li",[e._v("Check for app vulnerabilities with "),a("a",{attrs:{href:"https://docs.gitlab.com/ee/user/application_security/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Security Test reports"),a("OutboundLink")],1),e._v(".")])]),e._v(" "),a("h3",{attrs:{id:"key-concepts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#key-concepts"}},[e._v("#")]),e._v(" Key Concepts")]),e._v(" "),a("p",[a("strong",[e._v(".gitlab-ci.yml")]),e._v("\nGitLab CI/CD is configured by a file called .gitlab-ci.yml placed at the repository’s root.\nThis file creates a pipeline, which runs for changes to the code in the repository. Pipelines consist of one or more stages that run in order and can each contain one or more jobs that run in parallel. These jobs (or scripts) get executed by the GitLab Runner agent.")]),e._v(" "),a("p",[e._v(".gitlab-ci.yml模板：\nhttps://gitlab.com/gitlab-org/gitlab-foss/tree/master/lib/gitlab/ci/templates")]),e._v(" "),a("p",[e._v("pre-defined variables\nhttps://docs.gitlab.com/ee/ci/variables/predefined_variables.html")]),e._v(" "),a("p",[a("strong",[e._v("ci_settings.xml")]),e._v("\nserves as Maven’s settings.xml file\nhttps://docs.gitlab.com/ee/user/packages/maven_repository/")]),e._v(" "),a("p",[a("strong",[e._v("Pipeline")])]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/ee/ci/pipelines/pipeline_architectures.html")]),e._v(" "),a("p",[e._v("编写.gitlab-ci.yml时可以通过visualize查看pipeline")]),e._v(" "),a("p",[a("strong",[e._v("Runner&executor")]),e._v("\n下面即将配置的gitlab-runner")]),e._v(" "),a("h3",{attrs:{id:"install-and-config-gitlab-runner"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#install-and-config-gitlab-runner"}},[e._v("#")]),e._v(" install and config gitlab runner")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/runner/")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/runner/executors/README.html")]),e._v(" "),a("p",[e._v("STEP 1: INSTALL\nInstall it on a server separate than where GitLab is installed\nhttps://docs.gitlab.com/runner/install/index.html")]),e._v(" "),a("p",[e._v("/etc/gitlab-runner/config.toml")]),e._v(" "),a("p",[e._v("STEP 2: REGISTER\n一台runner可以注册多个executor")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/runner/register/")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('sudo gitlab-runner register\nEnter your GitLab instance URL (also known as the gitlab-ci coordinator URL). 如果是self host就是register token旁边的url即本地的gitlab server url，如果是gitlab则是https://gitlab.com\nEnter the token you obtained to register the runner. \n  //For a shared runner, have an administrator go to the GitLab Admin Area and click Overview > Runners\n  //For a group runner, go to Settings > CI/CD and expand the Runners section\n  //For a project-specific runner, go to Settings > CI/CD and expand the Runners section\nEnter a description for the runner. You can change this value later in the GitLab user interface.\nEnter the tags associated with the runner, separated by commas. You can change this value later in the GitLab user interface.\nEnter any optional maintenance note for the runner.\nProvide the runner executor. (https://docs.gitlab.com/runner/executors/index.html)\nIf you entered docker as your executor, you are asked for the default image to be used for projects that do not define one in .gitlab-ci.yml.\n\none line:\nsudo gitlab-runner register \\\n  --non-interactive \\\n  --url "https://gitlab.com/" \\\n  --registration-token "PROJECT_REGISTRATION_TOKEN" \\\n  --executor "docker" \\\n  --docker-image alpine:latest \\\n  --description "docker-runner" \\\n  --maintenance-note "Free-form maintainer notes about this runner" \\\n  --tag-list "docker,aws" \\\n  --run-untagged="true" \\\n  --locked="false" \\\n  --access-level="not_protected"\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\nAfter a runner is configured and available for your project, your CI/CD jobs can use the runner.\n\nSpecify the name of the runner or its tags in your .gitlab-ci.yml file. Then, when you commit to your repository, the pipeline runs, and the runner’s executor processes the commands.\n\n/home/gitlab-runner/builds/\n\n")])])]),a("p",[e._v("Advance config:\nhttps://docs.gitlab.com/runner/configuration/advanced-configuration.html\nGitLab Runner does not require a restart when you change most options. This includes parameters in the [[runners]] section and most parameters in the global section, except for listen_address.")]),e._v(" "),a("p",[e._v("issues:\nThis job is stuck because the project doesn't have any runners online assigned to it.Go to project CI settings")]),e._v(" "),a("p",[e._v("Run untagged jobs\nIndicates whether this runner can pick jobs without tags")]),e._v(" "),a("p",[e._v("troubleshoot gitlab-runner:\nhttps://docs.gitlab.com/runner/faq/")]),e._v(" "),a("h3",{attrs:{id:"deployment-approvals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deployment-approvals"}},[e._v("#")]),e._v(" Deployment approvals")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://gitlab.com/gitlab-org/gitlab/-/issues/344233",target:"_blank",rel:"noopener noreferrer"}},[e._v("Tech Evaluation"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("Step 1: Create Environment")]),e._v(" "),a("ul",[a("li",[e._v("static environment\nDeployments > Environments")]),e._v(" "),a("li",[e._v("dynamic environment")])]),e._v(" "),a("p",[e._v("Step 2: Set protected_environments:")]),e._v(" "),a("p",[e._v("Allowed to Deploy, Approvers")]),e._v(" "),a("p",[e._v("Step 3: Create a deployment job in the .gitlab-ci.yml")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/ee/ci/environments/index.html\nhttps://docs.gitlab.com/ee/ci/environments/protected_environments.html")]),e._v(" "),a("h3",{attrs:{id:"案例-create-react-app"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#案例-create-react-app"}},[e._v("#")]),e._v(" 案例：Create-react-app")]),e._v(" "),a("p",[e._v("https://dev.to/christianmontero/gitlab-ci-cd-example-with-a-dockerized-reactjs-app-1cda")]),e._v(" "),a("p",[e._v("https://medium.com/recraftrelic/automating-reactjs-app-deployment-using-gitlab-12e0bf92461b")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('image: node:latest\n# This folder is cached between builds\n# http://docs.gitlab.com/ee/ci/yaml/README.html#cache\ncache:\n  paths:\n    - node_modules/\n\nstages:\n  - build\n  - deploy\n\nbuild:dev:\n  stage: build\n  image: node:latest\n  script: \n    - echo "Start building App for dev"\n    - npm install --force\n    - npm run build\n    - echo "Build successfully!"\n  artifacts:\n    expire_in: 1 hour\n    paths:\n      - build\n  only:\n    - /^dev_.*$/\n\ndeploy:dev:\n  stage: deploy\n  needs: [\'build:dev\']\n  when: manual\n  script: \n    - echo "Start deploying App for dev"\n    - FOLDER=`date +"%y%m%d"`\n    - INSATLL_TARGET_DIR=/opt/html/$FOLDER\n    - ssh -q root@HOST "mkdir -p $INSATLL_TARGET_DIR"\n    - scp -rp ./build/* root@HOST:${INSATLL_TARGET_DIR}/;\n    - ssh -q root@HOST "cd $INSATLL_TARGET_DIR/.. && ln -nsf $FOLDER current"\n    - echo "Deploy successfully!"\n  only:\n    - /^dev_.*$/\n')])])]),a("p",[e._v("注意 script中的scp和ssh需要在gitlab-runner机器上设置到远程机器的免密登录：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("su - gitlab-runner\nssh-keygen -t rsa\nssh-copy-id -i id_rsa root@TargetHost\n")])])]),a("h3",{attrs:{id:"案例-maven-template-standard-core-lifecycle"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#案例-maven-template-standard-core-lifecycle"}},[e._v("#")]),e._v(" 案例：Maven template(standard core lifecycle)")]),e._v(" "),a("p",[e._v("https://gitlab.com/gitlab-org/gitlab-foss/-/blob/master/lib/gitlab/ci/templates/Maven.gitlab-ci.yml")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# Build JAVA applications using Apache Maven (http://maven.apache.org)\n# For docker image tags see https://hub.docker.com/_/maven/\n#\n# For general lifecycle information see https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html\n\n# This template will build and test your projects\n# * Caches downloaded dependencies and plugins between invocation.\n# * Verify but don't deploy merge requests.\n# * Deploy built artifacts from master branch only.\n\nvariables:\n  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.\n  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.\n  MAVEN_OPTS: \"-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true\"\n  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used\n  # when running from the command line.\n  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.\n  MAVEN_CLI_OPTS: \"--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true\"\n\n# This template uses jdk8 for verifying and deploying images\nimage: maven:3.3.9-jdk-8\n\n# Cache downloaded dependencies and plugins between builds.\n# To keep cache across branches add 'key: \"$CI_JOB_NAME\"'\ncache:\n  paths:\n    - .m2/repository\n\n# For merge requests do not `deploy` but only run `verify`.\n# See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html\n.verify: &verify\n  stage: test\n  script:\n    - 'mvn $MAVEN_CLI_OPTS verify'\n  except:\n    - master\n\n# Verify merge requests using JDK8\nverify:jdk8:\n  <<: *verify\n\n# To deploy packages from CI, create a ci_settings.xml file\n# For deploying packages to GitLab's Maven Repository: See https://docs.gitlab.com/ee/user/project/packages/maven_repository.html#creating-maven-packages-with-gitlab-cicd for more details.\n# Please note: The GitLab Maven Repository is currently only available in GitLab Premium / Ultimate.\n# For `master` branch run `mvn deploy` automatically.\ndeploy:jdk8:\n  stage: deploy\n  script:\n    - if [ ! -f ci_settings.xml ];\n        then echo \"CI settings missing\\! If deploying to GitLab Maven Repository, please see https://docs.gitlab.com/ee/user/project/packages/maven_repository.html#creating-maven-packages-with-gitlab-cicd for instructions.\";\n      fi\n    - 'mvn $MAVEN_CLI_OPTS deploy -s ci_settings.xml'\n  only:\n    - master\n")])])]),a("h3",{attrs:{id:"案例-maven-auto-release-non-lifecycle-tools-use-maven-release-plugin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#案例-maven-auto-release-non-lifecycle-tools-use-maven-release-plugin"}},[e._v("#")]),e._v(" 案例：Maven auto release(non-lifecycle, tools: use maven-release-plugin)")]),e._v(" "),a("h4",{attrs:{id:"初始版本-buggy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始版本-buggy"}},[e._v("#")]),e._v(" 初始版本(buggy)：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('.gitlab-ci.yml:\nimage: maven:3.3.9-jdk-8\n\ncache:\n  paths:\n    - .m2/repository\n\nstages:\n  - build\n  - release\n\nbuild:stag:\n  stage: build\n  script:\n    - echo "test1"\n    - POM_VERSION=$(mvn -q -Dexec.executable="echo" -Dexec.args=\'${project.version}\' --non-recursive org.codehaus.mojo:exec-maven-plugin:1.6.0:exec)\n    - echo "Package for stag $POM_VERSION"\n    - mvn package\n    - TARGET_DIR="$HOME/packages/$POM_VERSION"\n    - echo "Package successfully!"\n    - mkdir -p ${TARGET_DIR}\n    - echo "shipping artifacts to ${TARGET_DIR}";\n    - cp ${CI_PROJECT_DIR}/target/test-spring-redis*.jar ${TARGET_DIR};\n\nrelease:stag:\n  stage: release\n  needs: [\'build:stag\']\n  when: manual\n  script: \n    - echo "Prepare release for stag"\n    - TD=`date +"%Y%m%d"`\n    - ReleaseVersion=0.0.2\n    - NextVersion=0.0.3\n    - mvn clean -DskipTests -Darguments=-DskipTests release:prepare -e -DreleaseVersion=$ReleaseVersion -DdevelopmentVersion=$NextVersion-SNAPSHOT -Dtag="$TD-$ReleaseVersion" -DscmDevelopmentCommitComment="prepare for next development iteration $NextVersion-SNAPSHOT"\n    - echo "Prepare release successfully!"\n    - if [ ! -f ci_settings.xml ];\n        then echo "CI settings missing\\! If deploying to GitLab Maven Repository, please see https://docs.gitlab.com/ee/user/project/packages/maven_repository.html#creating-maven-packages-with-gitlab-cicd for instructions.";\n      fi\n    - if [ $? == 0 ]\n      then\n        echo "Perform release for stag"\n        mvn release:perform -e -Darguments="-Dmaven.javadoc.skip=true -Dmaven.test.skip=true" -s ci_settings.xml\n        echo "Perform release successfully!"\n      else\n        echo "Rollback release for stag"\n        mvn release:rollback\n        echo "Rollback release successfully!"\n      fi\n      \n      \npom.xml:\n<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>com.lyhistory.redis</groupId>\n\t<artifactId>test-spring-redis</artifactId>\n\t<version>0.0.9-SNAPSHOT</version>\n\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>2.2.6.RELEASE</version>\n\t</parent>\n\t<dependencies>\n\t\t\x3c!-- <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> \n\t\t\t<version>2.4.3</version> <type>pom</type> </dependency> --\x3e\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t\t\x3c!-- <version>2.4.3</version> --\x3e\n\t\t</dependency>\n\t\t<dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n        </dependency>\n          <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-test</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter-api</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.junit.platform</groupId>\n            <artifactId>junit-platform-runner</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>com.github.kstyrc</groupId>\n            <artifactId>embedded-redis</artifactId>\n            <version>0.6</version>\n        </dependency>\n        <dependency>\n            <groupId>redis.clients</groupId>\n            <artifactId>jedis</artifactId>\n            <type>jar</type>\n        </dependency>\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>fastjson</artifactId>\n            <version>1.2.71</version>\n        </dependency>\n\t</dependencies>\n\t\n    <build>\n        <plugins>\n            \x3c!-- JDK level --\x3e\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.1</version>\n                <configuration>\n                    <source>1.8</source>\n                    <target>1.8</target>\n                    <encoding>UTF-8</encoding>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-resources-plugin</artifactId>\n                <configuration>\n                    <nonFilteredFileExtensions>\n                        <nonFilteredFileExtension>dll</nonFilteredFileExtension>\n                        <nonFilteredFileExtension>so</nonFilteredFileExtension>\n                    </nonFilteredFileExtensions>\n                </configuration>\n            </plugin>\n\n            \x3c!-- 更新: mvn versions:set -DnewVersion=1.0.4-SNAPSHOT versions:update-child-modules\n                回滚: mvn versions:revert 提交: mvn versions:commit --\x3e\n            <plugin>\n                <groupId>org.codehaus.mojo</groupId>\n                <artifactId>versions-maven-plugin</artifactId>\n                <version>2.7</version>\n            </plugin>\n\t\t\t<plugin>\n\t\t\t   <groupId>org.apache.maven.plugins</groupId>\n\t\t\t   <artifactId>maven-release-plugin</artifactId>\n\t\t\t</plugin>\n        </plugins>\n\n    </build>\n    \x3c!-- 配置远程发布到私服,mvn deploy --\x3e\n    <distributionManagement>\n        <repository>\n            <id>nexus</id>\n            <name>Nexus Release Repository</name>\n            <url>http://NEXUS_IP:18081/repository/maven-releases/</url>\n        </repository>\n        <snapshotRepository>\n            <id>nexus</id>\n            <name>Nexus Snapshot Repository</name>\n            <url>http://NEXUS_IP:18081/repository/maven-snapshots/</url>\n        </snapshotRepository>\n    </distributionManagement>\n    <scm>\n        <connection>scm:git:http://GITLAB_IP/testci.git</connection>\n        <developerConnection>scm:git:http://GITLAB_IP/testci.git</developerConnection>\n        <url>http://GITLAB_IP/testci</url>\n        <tag>20211029-0.0.2</tag>\n    </scm>\n\n</project>\n\nci_settings.xml:\n<settings>\n  <servers>\n    <server>\n      <id>nexus</id>\n      <username>admin</username>\n      <password>admin</password>\n    </server>\n\t\x3c!--\n\t<server>\n      <id>origin</id>\n      <username>yue.liu</username>\n      <password>test@123456</password>\n    </server>\n\t--\x3e\n  </servers>\n  <mirrors>\n    <mirror>\n      <id>CN</id>\n      <name>Aliyun Nexus</name>\n      <url>http://NEXUS_IP:18081/repository/aliyun-repo/</url>\n      <mirrorOf>central</mirrorOf>\n    </mirror>\n    <mirror>\n      <id>mavenCentral</id>\n      <name>Maven Central</name>\n      <url>http://NEXUS_IP:18081/repository/maven-central/</url>\n      <mirrorOf>central</mirrorOf>\n    </mirror>\n  </mirrors>\n  <profiles>\n    <profile>\n      <id>nexus</id>\n      \x3c!--Enable snapshots for the built in central repo to direct --\x3e\n      \x3c!--all requests to nexus via the mirror --\x3e\n      <repositories>\n        <repository>\n          <id>central</id>\n          <url>http://central</url>\n          <releases>\n            <enabled>true</enabled>\n          </releases>\n          <snapshots>\n            <enabled>true</enabled>\n          </snapshots>\n        </repository>\n      </repositories>\n      <pluginRepositories>\n        <pluginRepository>\n          <id>central</id>\n          <url>http://central</url>\n          <releases>\n            <enabled>true</enabled>\n          </releases>\n          <snapshots>\n            <enabled>true</enabled>\n          </snapshots>\n        </pluginRepository>\n      </pluginRepositories>\n    </profile>\n  </profiles>\n  <activeProfiles>\n    \x3c!--make the profile active all the time --\x3e\n    <activeProfile>nexus</activeProfile>\n  </activeProfiles>\n</settings>\n')])])]),a("h4",{attrs:{id:"问题修复"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题修复"}},[e._v("#")]),e._v(" 问题修复：")]),e._v(" "),a("p",[e._v("首先先总结下问题修复之后的整个逻辑：\n要知道的是，cicd pipeline执行的过程是我们配置的gitlab-runner agent机器上执行这个ci脚本，大概是首先gitlab会默认在gitlabrunner机器上根据对应的git在builds路径下：env.CI_PROJECT_DIR=/home/gitlab-runner/builds/Mtn6kdk-/0/testci 创建这个testci目录，然后再通过env.CI_REPOSITORY_URL=http://gitlab-ci-token:[MASKED]@GITLAB_IP/testci.git 这个临时的？token来clone gitlab服务器上的git代码")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[]#git remote -v\norigin  http://gitlab-ci-token:mX2W8nN6WsMnzA_kWp1p@GITLAB_IP/testci.git (fetch)\norigin  http://gitlab-ci-token:mX2W8nN6WsMnzA_kWp1p@GITLAB_IP/testci.git (push)\n[]#git status\nHEAD detached at d8ae1db\nnothing to commit, working tree clean\nenv.GITLAB_USER_EMAIL=yue.liu@gitlab.com\nenv.GITLAB_USER_LOGIN=yue.liu\n\nenv.CI_SERVER_HOST=GITLAB_IP\nenv.CI_API_V4_URL=http://GITLAB_IP/api/v4\nenv.CI_SERVER_URL=http://GITLAB_IP\nenv.CI_PIPELINE_URL=http://GITLAB_IP/testci/-/pipelines/823\nenv.CI_PROJECT_URL=http://GITLAB_IP/testci\n\nenv.CI_REPOSITORY_URL=http://gitlab-ci-token:[MASKED]@GITLAB_IP/testci.git\nenv.CI_JOB_URL=http://GITLAB_IP/testci/-/jobs/2422\n")])])]),a("h5",{attrs:{id:"release-prepare"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#release-prepare"}},[e._v("#")]),e._v(" Release Prepare")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("?????????????????????????????????????????????????????????????????????????????????????????\n??? mvn clean -DskipTests -Darguments=-DskipTests release:prepare -e -DreleaseVersion=$ReleaseVersion -DdevelopmentVersion=$NextVersion-SNAPSHOT -Dtag=\"$TD-$ReleaseVersion\" -DscmDevelopmentCommitComment=\"prepare for next development iteration $NextVersion-SNAPSHOT\"\n?????????????????????????????????????????????????????????????????????????????????????????\n刚开始看到这几个帖子：\nhttps://forum.gitlab.com/t/getting-mvn-release-to-work-with-gitlab-ci/4904/2\nhttps://forum.gitlab.com/t/getting-mvn-release-to-work-with-gitlab-ci/4904\nhttps://forum.gitlab.com/t/git-push-from-inside-a-gitlab-runner/30554/5\nhttps://gitlab.com/gitlab-examples/ssh-private-key/\nhttps://www.tutorialspoint.com/gitlab/gitlab_ssh_key_setup.htm\nhttps://docs.gitlab.com/ee/ssh/\nhttps://docs.gitlab.com/ee/ci/ssh_keys/#verifying-the-ssh-host-keys\nhttps://docs.gitlab.com/ee/user/project/deploy_keys/index.html\n然后盲目的就想用ssh key的方式来搞，结果本地创建完id_rsa id_rsa.pub后，发现gitlab runner机器上~/.ssh下面有了，所以就直接在gitlab settings页面 cicd设置\tSSH_PRIVATE_KEY，但是并没有在repo配置上id_rsa.pub\n结果当然是出错：\n[INFO] Executing: /bin/sh -c cd /home/gitlab-runner/builds/Mtn6kdk-/0/testci && git push http://GITLAB_IP/test.git refs/heads/master:refs/heads/master\n[INFO] Working directory: /home/gitlab-runner/builds/Mtn6kdk-/0/testci\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  6.786 s\n[INFO] Finished at: 2021-10-28T10:08:09+08:00\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-release-plugin:2.5.3:prepare (default-cli) on project test-spring-redis: Unable to commit files\n[ERROR] Provider message:\n[ERROR] The git-push command failed.\n[ERROR] Command output:\n[ERROR] fatal: could not read Username for 'http://X.X.X.160': No such device or address\n[ERROR] \n[ERROR] -> [Help 1]\norg.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-release-plugin:2.5.3:prepare (default-cli) on project test-spring-redis: Unable to commit files\nProvider message:\nThe git-push command failed.\nCommand output:\nfatal: could not read Username for 'http://X.X.X.160': No such device or address\n\n后来才注意到官方有步骤（还没有测试，后面会尝试，即使使用ssh，应该也需要提供username和email）：\nhttps://docs.gitlab.com/ee/ci/ssh_keys/\nGitLab currently doesn’t have built-in support for managing SSH keys in a build environment (where the GitLab Runner runs).\nSSH keys when using the Shell executor\nIf you are using the Shell executor and not Docker, it is easier to set up an SSH key.\n\nYou can generate the SSH key from the machine that GitLab Runner is installed on, and use that key for all projects that are run on this machine.\n\nFirst, log in to the server that runs your jobs.\n\nThen, from the terminal, log in as the gitlab-runner user:\n\nsudo su - gitlab-runner\n\nGenerate the SSH key pair as described in the instructions to generate an SSH key. Do not add a passphrase to the SSH key, or the before_script will prompt for it.\n\nAs a final step, add the public key from the one you created earlier to the services that you want to have an access to from within the build environment. If you are accessing a private GitLab repository you must add it as a deploy key.\n\nAfter generating the key, try to sign in to the remote server to accept the fingerprint:\n\nssh example.com\n\nFor accessing repositories on GitLab.com, you would use git@gitlab.com\n\n接着我没有回到正常思路，而是之间登录gitlab runner机器，在env.CI_PROJECT_DIR=/home/gitlab-runner/builds/Mtn6kdk-/0/testci目录下一顿操作，具体就是改了remote origin，以及设置config user和email，\n然后再执行cicd，估计是因为我的改动通过了某些步骤，但是又遇到一个问题：\n[INFO] Executing: /bin/sh -c cd /home/gitlab-runner/builds/Mtn6kdk-/0/testci && git commit --verbose -F /tmp/maven-scm-1715089266.commit pom.xml\n[INFO] Working directory: /home/gitlab-runner/builds/Mtn6kdk-/0/testci\n[INFO] Executing: /bin/sh -c cd /home/gitlab-runner/builds/Mtn6kdk-/0/testci && git symbolic-ref HEAD\n[INFO] Working directory: /home/gitlab-runner/builds/Mtn6kdk-/0/testci\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  6.383 s\n[INFO] Finished at: 2021-10-26T09:45:23+08:00\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-release-plugin:2.5.3:prepare (default-cli) on project test-spring-redis: An error is occurred in the checkin process: Exception while executing SCM command.: Detecting the current branch failed: fatal: ref HEAD is not a symbolic ref -> [Help 1]\norg.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-release-plugin:2.5.3:prepare (default-cli) on project test-spring-redis: An error is occurred in the checkin process: Exception while executing SCM command.\n\n查了下，是说gitlab runner worked on detached header，需要checkout 到master，所以\n在mvn release prepare之前加了 git checkout master\n然后这个错误没有了，仍然是无法通过release prepare push changes，\n\n接着切换了思路，为什么非要ssh，我就用username password不行吗？\n所以我\n- git remote set-url origin http://yue.liu:test@123456@$CI_SERVER_HOST/workspace/testci.git\n发现错误提示是，无法解析123456@$CI_SERVER_HOST/workspace/testci.git\n原来密码中包含了@，git当成了后面的那个ip之前的@解析了，所以改成url encode\n- git remote set-url origin http://yue.liu:test%40123456@$CI_SERVER_HOST/workspace/testci.git\n仍然不成功，\n[INFO] Executing: /bin/sh -c cd /home/gitlab-runner/builds/Mtn6kdk-/0/testci && git commit --verbose -F /tmp/maven-scm-81988903.commit pom.xml\n[INFO] Working directory: /home/gitlab-runner/builds/Mtn6kdk-/0/testci\n[INFO] Executing: /bin/sh -c cd /home/gitlab-runner/builds/Mtn6kdk-/0/testci && git symbolic-ref HEAD\n[INFO] Working directory: /home/gitlab-runner/builds/Mtn6kdk-/0/testci\n[INFO] Executing: /bin/sh -c cd /home/gitlab-runner/builds/Mtn6kdk-/0/testci && git push http://yue.liu:********@GITLAB_IP/testci.git refs/heads/master:refs/heads/master\n[INFO] Working directory: /home/gitlab-runner/builds/Mtn6kdk-/0/testci\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  6.707 s\n[INFO] Finished at: 2021-10-29T08:59:46+08:00\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-release-plugin:2.5.3:prepare (default-cli) on project test-spring-redis: Unable to commit files\n[ERROR] Provider message:\n[ERROR] The git-push command failed.\n[ERROR] Command output:\n[ERROR] remote: HTTP Basic: Access denied\n[ERROR] fatal: Authentication failed for 'http://GITLAB_IP/testci.git/'\n[ERROR] -> [Help 1]\norg.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-release-plugin:2.5.3:prepare (default-cli) on project test-spring-redis: Unable to commit files\nProvider message:\nThe git-push command failed.\nCommand output:\nremote: HTTP Basic: Access denied\nfatal: Authentication failed for 'http://GITLAB_IP/testci.git/'\n    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:215)\n\n然后又试着改了这个：\n<scm>\n        <connection>scm:git:http://yue.liu:test%40123456@GITLAB_IP/testci.git</connection>\n        <developerConnection>scm:git:http://yue.liu:test%40123456@GITLAB_IP/testci.git\n        </developerConnection>\n        <url>http://GITLAB_IP/testci</url>\n        <tag>20211018-0.0.1</tag>\n    </scm>\n还是不行！  \n终于看到这个：\nhttps://stackoverflow.com/questions/29120076/maven-and-gitlab-releaseprepare-uses-the-wrong-scm-url/69766718#69766718\n改成origin：\n<scm>\n        <connection>scm:git:origin</connection>\n        <developerConnection>scm:git:origin</developerConnection>\n        <url>http://GITLAB_IP/testci</url>\n        <tag>20211018-0.0.1</tag>\n    </scm>\nrelease prepare成功！！！！\t\n")])])]),a("h5",{attrs:{id:"release-peform"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#release-peform"}},[e._v("#")]),e._v(" Release Peform")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("?????????????????????????????????????????????????????????????????????????????????????????\n???   - if [ $? == 0 ]\n?????????????????????????????????????????????????????????????????????????????????????????\n这段gitlab ci脚本里面的if statement写法不符合gitlab规范：\nhttps://stackoverflow.com/questions/54761464/how-to-use-if-else-condition-on-gitlabci\n\n?????????????????????????????????????????????????????????????????????????????????????????\n??? mvn release:perform -e -Darguments=\"-Dmaven.javadoc.skip=true -Dmaven.test.skip=true\" -s ci_settings.xml\n?????????????????????????????????????????????????????????????????????????????????????????\n\n[INFO] Executing: /bin/sh -c cd /home/gitlab-runner/builds/Mtn6kdk-/0/testci/target && git clone --branch 20211029-0.0.4 origin /home/gitlab-runner/builds/Mtn6kdk-/0/testci/target/checkout\n[INFO] Working directory: /home/gitlab-runner/builds/Mtn6kdk-/0/testci/target\n[ERROR] The git-clone command failed.\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  7.513 s\n[INFO] Finished at: 2021-10-29T11:52:57+08:00\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-release-plugin:2.5.3:perform (default-cli) on project test-spring-redis: Unable to checkout from SCM\n[ERROR] Provider message:\n[ERROR] The git-clone command failed.\n[ERROR] Command output:\n[ERROR] fatal: repository 'origin' does not exist\n[ERROR] -> [Help 1]\norg.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-release-plugin:2.5.3:perform (default-cli) on project test-spring-redis: Unable to checkout from SCM\nProvider message:\nThe git-clone command failed.\nCommand output:\nfatal: repository 'origin' does not exist\n\nshit！prepare可以识别origin，这里居然不识别，手动测试了下，果然不识别，改成\nmvn release:perform -DconnectionUrl='scm:git:http://yue.liu:test%40123456@GITLAB_IP/workspace/testci.git' \n还是不行！！！\n最后想到是不是可以把用户名密码传给mvn，我真是太聪明了！\nhttps://stackoverflow.com/questions/1255593/externalising-scm-credentials-with-maven\nmvn release:perform -Dusername=[username] -Dpassword=[password] \n成功！！！！\n\n")])])]),a("h4",{attrs:{id:"最终版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最终版本"}},[e._v("#")]),e._v(" 最终版本")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('pom.xml:\n<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>com.lyhistory.redis</groupId>\n\t<artifactId>test-spring-redis</artifactId>\n\t<version>0.0.9-SNAPSHOT</version>\n\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>2.2.6.RELEASE</version>\n\t</parent>\n\t<dependencies>\n\t\t\x3c!-- <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> \n\t\t\t<version>2.4.3</version> <type>pom</type> </dependency> --\x3e\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t\t\x3c!-- <version>2.4.3</version> --\x3e\n\t\t</dependency>\n\t\t<dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n        </dependency>\n          <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-test</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter-api</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.junit.platform</groupId>\n            <artifactId>junit-platform-runner</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>com.github.kstyrc</groupId>\n            <artifactId>embedded-redis</artifactId>\n            <version>0.6</version>\n        </dependency>\n        <dependency>\n            <groupId>redis.clients</groupId>\n            <artifactId>jedis</artifactId>\n            <type>jar</type>\n        </dependency>\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>fastjson</artifactId>\n            <version>1.2.71</version>\n        </dependency>\n\t</dependencies>\n\t\n    <build>\n        <plugins>\n            \x3c!-- JDK level --\x3e\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.1</version>\n                <configuration>\n                    <source>1.8</source>\n                    <target>1.8</target>\n                    <encoding>UTF-8</encoding>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-resources-plugin</artifactId>\n                <configuration>\n                    <nonFilteredFileExtensions>\n                        <nonFilteredFileExtension>dll</nonFilteredFileExtension>\n                        <nonFilteredFileExtension>so</nonFilteredFileExtension>\n                    </nonFilteredFileExtensions>\n                </configuration>\n            </plugin>\n\n            \x3c!-- 更新: mvn versions:set -DnewVersion=1.0.4-SNAPSHOT versions:update-child-modules\n                回滚: mvn versions:revert 提交: mvn versions:commit --\x3e\n            <plugin>\n                <groupId>org.codehaus.mojo</groupId>\n                <artifactId>versions-maven-plugin</artifactId>\n                <version>2.7</version>\n            </plugin>\n\t\t\t<plugin>\n\t\t\t   <groupId>org.apache.maven.plugins</groupId>\n\t\t\t   <artifactId>maven-release-plugin</artifactId>\n\t\t\t</plugin>\n        </plugins>\n\n    </build>\n    \x3c!-- 配置远程发布到私服,mvn deploy --\x3e\n    <distributionManagement>\n        <repository>\n            <id>nexus</id>\n            <name>Nexus Release Repository</name>\n            <url>http://NEXUS_IP:18081/repository/maven-releases/</url>\n        </repository>\n        <snapshotRepository>\n            <id>nexus</id>\n            <name>Nexus Snapshot Repository</name>\n            <url>http://NEXUS_IP:18081/repository/maven-snapshots/</url>\n        </snapshotRepository>\n    </distributionManagement>\n    <scm>\n        <connection>scm:git:origin</connection>\n        <developerConnection>scm:git:origin</developerConnection>\n        <url>http://GITLAB_IP/testci</url>\n        <tag>20211029-0.0.2</tag>\n    </scm>\n\n</project>\n')])])]),a("h5",{attrs:{id:"http-with-password"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-with-password"}},[e._v("#")]),e._v(" http with password")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('-----------------------------------------------------------------------------\n--- 用户名密码\n-----------------------------------------------------------------------------\n.gitlab-ci.yml:\nimage: maven:3.3.9-jdk-8\n  \ncache:\n  paths:\n    - .m2/repository\n\nstages:\n  - build\n  - release\n\nbuild:stag:\n  stage: build\n  script:\n    - echo "test1"\n    - POM_VERSION=$(mvn -q -Dexec.executable="echo" -Dexec.args=\'${project.version}\' --non-recursive org.codehaus.mojo:exec-maven-plugin:1.6.0:exec)\n    - echo "Package for stag $POM_VERSION"\n    - mvn clean -DskipTests -Darguments=-DskipTests package\n    - TARGET_DIR="$HOME/packages/$POM_VERSION"\n    - echo "Package successfully!"\n    - mkdir -p ${TARGET_DIR}\n    - echo "shipping artifacts to ${TARGET_DIR}";\n    - cp ${CI_PROJECT_DIR}/target/test-spring-redis*.jar ${TARGET_DIR};\n\nrelease:stag:\n  stage: release\n  needs: [\'build:stag\']\n  when: manual\n  script:\n    - echo "add private key"\n    #- eval $(ssh-agent -s)\n    #- ssh-add ~/.ssh/id_rsa\n    - echo "whoami:"\n    - whoami\n    #- echo "$SSH_PRIVATE_KEY" | tr -d \'\\r\' | ssh-add -\n    #- echo -e "Host *\\n\\tStrictHostKeyChecking no\\n\\n" >> ~/.ssh/config\n    #- chmod 600 ~/.ssh/config\n    #- git config --global user.email "gitlab-runner@gitlab.com"\n    #- git config --global user.name "gitlab-runner" \n    - git config --global user.email "yue.liu@gitlab.com"\n    - git config --global user.name "yue.liu"    \n    - echo "Prepare release for stag"\n    - TD=`date +"%Y%m%d"`\n    - ReleaseVersion=0.0.9\n    - NextVersion=0.1.0\n    - git checkout master && git pull\n    #- git remote set-url origin git@$CI_SERVER_HOST:workspace/testci.git\n    - git remote set-url origin http://yue.liu:test%40123456@$CI_SERVER_HOST/workspace/testci.git\n    - echo "ReleaseVersion $ReleaseVersion $NextVersion-SNAPSHOT"\n    - mvn clean -DskipTests -Darguments=-DskipTests release:prepare -e -DreleaseVersion=$ReleaseVersion -DdevelopmentVersion=$NextVersion-SNAPSHOT -Dtag="$TD-$ReleaseVersion" -DscmDevelopmentCommitComment="prepare for next development iteration $NextVersion-SNAPSHOT" -X -B\n    - echo "Prepare release successfully!"\n    - if [ ! -f ci_settings.xml ];\n        then echo "CI settings missing\\! If deploying to GitLab Maven Repository, please see https://docs.gitlab.com/ee/user/project/packages/maven_repository.html#creating-maven-packages-with-gitlab-cicd for instructions.";\n      fi\n    - >\n      if [ $? == 0 ]; then\n        echo "Perform release for stag"\n        #echo "CI_RELEASE_PASSWORD=$CI_RELEASE_PASSWORD"\n        mvn release:perform -DconnectionUrl=\'scm:git:http://GITLAB_IP/workspace/testci.git\' -Dusername="yue.liu" -Dpassword="test@123456" -e -Darguments="-Dmaven.javadoc.skip=true -Dmaven.test.skip=true" -s ci_settings.xml -B\n        echo "Perform release successfully!"\n      else\n        echo "Rollback release for stag"\n        mvn release:rollback\n        echo "Rollback release successfully!"\n      fi\n')])])]),a("h5",{attrs:{id:"ssh-paswordless"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ssh-paswordless"}},[e._v("#")]),e._v(" ssh paswordless")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('-----------------------------------------------------------------------------\n--- ssh\n-----------------------------------------------------------------------------      \n配置ssh key：\nhttps://docs.gitlab.com/ee/ci/ssh_keys/\n\n>> SSH keys when using the Shell executor\nIf you are using the Shell executor and not Docker, it is easier to set up an SSH key.\nYou can generate the SSH key from the machine that GitLab Runner is installed on, and use that key for all projects that are run on this machine.\n\nFirst, log in to the server that runs your jobs.\nThen, from the terminal, log in as the gitlab-runner user:\nsudo su - gitlab-runner\n\nGenerate the SSH key pair as described in the instructions to generate an SSH key. Do not add a passphrase to the SSH key, or the before_script will prompt for it.\n\nAs a final step, add the public key from the one you created earlier to the services that you want to have an access to from within the build environment. If you are accessing a private GitLab repository you must add it as a deploy key (Menu > Projects > Settings > Repository > Expand Deploy keyshttps://docs.gitlab.com/ee/user/project/deploy_keys/index.html).\n\nAfter generating the key, try to sign in to the remote server to accept the fingerprint:\nssh example.com\nFor accessing repositories on GitLab.com, you would use git@gitlab.com\n\n.gitlab_ci.yml:\nimage: maven:3.3.9-jdk-8\n  \ncache:\n  paths:\n    - .m2/repository\n\nstages:\n  - build\n  - release\n\nbuild:stag:\n  stage: build\n  script:\n    - echo "test1"\n    - POM_VERSION=$(mvn -q -Dexec.executable="echo" -Dexec.args=\'${project.version}\' --non-recursive org.codehaus.mojo:exec-maven-plugin:1.6.0:exec)\n    - echo "Package for stag $POM_VERSION"\n    - mvn clean -DskipTests -Darguments=-DskipTests package\n    - TARGET_DIR="$HOME/packages/$POM_VERSION"\n    - echo "Package successfully!"\n    - mkdir -p ${TARGET_DIR}\n    - echo "shipping artifacts to ${TARGET_DIR}";\n    - cp ${CI_PROJECT_DIR}/target/test-spring-redis*.jar ${TARGET_DIR};\n\nrelease:stag:\n  stage: release\n  needs: [\'build:stag\']\n  when: manual\n  script:\n    - echo "add private key"\n    - eval $(ssh-agent -s)\n    - ssh-add ~/.ssh/id_rsa\n    - cat ~/.ssh/id_rsa\n    - echo "whoami:"\n    - whoami\n    - git config --global user.email "yue.liu@gitlab.com"\n    - git config --global user.name "yue.liu"    \n    - echo "Prepare release for stag"\n    - TD=`date +"%Y%m%d"`\n    - ReleaseVersion=0.1.1\n    - NextVersion=0.1.2\n    - git checkout master && git pull\n    - git remote set-url origin git@$CI_SERVER_HOST:testci.git\n    - echo "ReleaseVersion $ReleaseVersion $NextVersion-SNAPSHOT"\n    - mvn clean -DskipTests -Darguments=-DskipTests release:prepare -e -DreleaseVersion=$ReleaseVersion -DdevelopmentVersion=$NextVersion-SNAPSHOT -Dtag="$TD-$ReleaseVersion" -DscmDevelopmentCommitComment="prepare for next development iteration $NextVersion-SNAPSHOT" -X -B\n    - echo "Prepare release successfully!"\n    - if [ ! -f ci_settings.xml ];\n        then echo "CI settings missing\\! If deploying to GitLab Maven Repository, please see https://docs.gitlab.com/ee/user/project/packages/maven_repository.html#creating-maven-packages-with-gitlab-cicd for instructions.";\n      fi\n    - >\n      if [ $? == 0 ]; then\n        echo "Perform release for stag"\n        echo "CI_RELEASE_PASSWORD=$CI_RELEASE_PASSWORD"\n        mvn release:perform -DconnectionUrl=\'scm:git:git@GITLAB_IP:testci.git\' -e -Darguments="-Dmaven.javadoc.skip=true -Dmaven.test.skip=true" -s ci_settings.xml -B\n        echo "Perform release successfully!"\n      else\n        echo "Rollback release for stag"\n        mvn release:rollback\n        echo "Rollback release successfully!"\n      fi\n')])])]),a("h4",{attrs:{id:"官方方案-gitlab-release-tool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#官方方案-gitlab-release-tool"}},[e._v("#")]),e._v(" 官方方案：Gitlab release tool")]),e._v(" "),a("p",[e._v("跟前面相比，限制是不能够更改pom文件为下一次release准备，只能打tag以及在gitlab项目页面上的release页面显示\nhttps://docs.gitlab.com/ee/ci/yaml/index.html#release\nhttps://docs.gitlab.com/ee/user/project/releases/index.html\nIn GitLab, a release enables you to create a snapshot of your project for your users, including installation packages and release notes. You can create a GitLab release on any branch. Creating a release also creates a Git tag to mark the release point in the source code.")]),e._v(" "),a("ul",[a("li",[a("p",[e._v('Using a job in your CI/CD pipeline.\n手动触发\ngit tag "tag-name" #触发job后，tag-name 会赋值给$CI_COMMIT_TAG')]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("release_job:\nstage: release\nimage: registry.gitlab.com/gitlab-org/release-cli:latest\nrules:\n  - if: $CI_COMMIT_TAG                  # Run this job when a tag is created manually\nscript:\n  - echo \"running release_job\"\nrelease:\n  name: 'Release $CI_COMMIT_TAG'\n  description: 'Created using the release-cli $EXTRA_DESCRIPTION'  # $EXTRA_DESCRIPTION must be defined\n  tag_name: '$CI_COMMIT_TAG'                                       # elsewhere in the pipeline.\n  ref: '$CI_COMMIT_TAG'\n  milestones:\n    - 'm1'\n    - 'm2'\n    - 'm3'\n  released_at: '2020-07-15T08:00:00Z'  # Optional, is auto generated if not defined, or can use a variable.\n  assets: # Optional, multiple asset links\n    links:\n      - name: 'asset1'\n        url: 'https://example.com/assets/1'\n      - name: 'asset2'\n        url: 'https://example.com/assets/2'\n        filepath: '/pretty/url/1' # optional\n        link_type: 'other' # optional\n")])])]),a("p",[e._v("自动触发：merge代码到某个branch后自动触发，tag名字写在git repo的VERSION中")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("prepare_job:\nstage: prepare                                              # This stage must run before the release stage\nrules:\n  - if: $CI_COMMIT_TAG\n    when: never                                             # Do not run this job when a tag is created manually\n  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH             # Run this job when commits are pushed or merged to the default branch\nscript:\n  - echo \"EXTRA_DESCRIPTION=some message\" >> variables.env  # Generate the EXTRA_DESCRIPTION and TAG environment variables\n  - echo \"TAG=v$(cat VERSION)\" >> variables.env             # and append to the variables.env file\nartifacts:\n  reports:\n    dotenv: variables.env                                   # Use artifacts:reports:dotenv to expose the variables to other jobs\n\nrelease_job:\n  stage: release\n  image: registry.gitlab.com/gitlab-org/release-cli:latest\n  needs:\n    - job: prepare_job\n      artifacts: true\n  rules:\n    - if: $CI_COMMIT_TAG\n      when: never                                  # Do not run this job when a tag is created manually\n    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH  # Run this job when commits are pushed or merged to the default branch\n  script:\n    - echo \"running release_job for $TAG\"\n  release:\n    name: 'Release $TAG'\n    description: 'Created using the release-cli $EXTRA_DESCRIPTION'  # $EXTRA_DESCRIPTION and the $TAG\n    tag_name: '$TAG'                                                 # variables must be defined elsewhere\n    ref: '$CI_COMMIT_SHA'                                            # in the pipeline. For example, in the\n    milestones:                                                      # prepare_job\n      - 'm1'\n      - 'm2'\n      - 'm3'\n    released_at: '2020-07-15T08:00:00Z'  # Optional, is auto generated if not defined, or can use a variable.\n    assets:\n      links:\n        - name: 'asset1'\n          url: 'https://example.com/assets/1'\n        - name: 'asset2'\n          url: 'https://example.com/assets/2'\n          filepath: '/pretty/url/1' # optional\n          link_type: 'other' # optional\n")])])])]),e._v(" "),a("li",[a("p",[e._v("In the Releases page.")])]),e._v(" "),a("li",[a("p",[e._v("In the Tags page.")])]),e._v(" "),a("li",[a("p",[e._v("Using the Releases API.\nhttps://docs.gitlab.com/ee/api/releases/index.html#create-a-release")])])]),e._v(" "),a("h3",{attrs:{id:"案例-自动生成merge-request"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#案例-自动生成merge-request"}},[e._v("#")]),e._v(" 案例：自动生成merge request")]),e._v(" "),a("p",[e._v("https://about.gitlab.com/blog/2017/09/05/how-to-automatically-create-a-new-mr-on-gitlab-with-gitlab-ci/")]),e._v(" "),a("h3",{attrs:{id:"案例-gitlab-pages"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#案例-gitlab-pages"}},[e._v("#")]),e._v(" 案例 gitlab pages")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/ee/user/project/pages/getting_started/pages_from_scratch.html")]),e._v(" "),a("p",[e._v("注意这里job的名字是特定的pages，而且不需要配置runner: GitLab executes it in the background and doesn’t use runner.")]),e._v(" "),a("h3",{attrs:{id:"troubshooting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#troubshooting"}},[e._v("#")]),e._v(" troubshooting")]),e._v(" "),a("p",[e._v("?# remote: You are not allowed to download code from this project.")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/ee/user/project/new_ci_build_permissions_model.html")]),e._v(" "),a("p",[e._v("默认是 triggered by Administrator，不是push代码的用户，retry就可以了？")]),e._v(" "),a("p",[e._v("?# npm: command not found")]),e._v(" "),a("p",[e._v("根据runner所使用的具体executor，比如docker可以使用node image，如果是普通的vm，需要安装nodejs")]),e._v(" "),a("h2",{attrs:{id:"_6-troubleshooting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-troubleshooting"}},[e._v("#")]),e._v(" 6. Troubleshooting")]),e._v(" "),a("p",[e._v("常用工具")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("gitlab-ctl tail\n")])])]),a("h3",{attrs:{id:"创建project以及浏览已有project出现500"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建project以及浏览已有project出现500"}},[e._v("#")]),e._v(" 创建project以及浏览已有project出现500")]),e._v(" "),a("p",[e._v("经过排查，放弃，重新安装，但是问题依旧，")]),e._v(" "),a("p",[e._v("通过gitlab-ctl tail查log")]),e._v(" "),a("p",[e._v("首先观察gitlab server log")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('==> /var/log/gitlab/gitlab-rails/production_json.log <==\n{"method":"POST","path":"/projects","format":"html","controller":"ProjectsController","action":"create","status":500,"time":"2020-08-21T06:41:34.153Z","params":[{"key":"utf8","value":"✓"},{"key":"authenticity_token","value":"[FILTERED]"},{"key":"project","value":{"ci_cd_only":"false","name":"helloworld","namespace_id":"1","path":"helloworld","description":"[FILTERED]","visibility_level":"0"}}],"remote_ip":"10.30.30.94","user_id":1,"username":"root","ua":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36","queue_duration_s":0.010634,"correlation_id":"s6jJ3TyP8a1","meta.user":"root","meta.caller_id":"ProjectsController#create","gitaly_calls":2,"gitaly_duration_s":0.011436,"redis_calls":14,"redis_duration_s":0.003358,"cpu_s":0.71,"exception.class":"ActionView::Template::Error","exception.message":"7:permission denied","exception.backtrace":["lib/gitlab/gitaly_client.rb:192:in `execute\'","lib/gitlab/gitaly_client.rb:170:in `block in call\'","lib/gitlab/gitaly_client.rb:198:in `measure_timings\'","lib/gitlab/gitaly_client.rb:169:in `call\'","lib/gitlab/gitaly_client/ref_service.rb:42:in `default_branch_name\'","lib/gitlab/git/repository.rb:90:in `root_ref\'","app/models/repository.rb:509:in `root_ref\'","lib/gitlab/repository_cache_adapter.rb:84:in `block (2 levels) in cache_method_asymmetrically\'","lib/gitlab/repository_cache.rb:44:in `fetch_without_caching_false\'","lib/gitlab/repository_cache_adapter.rb:179:in `block (2 levels) in cache_method_output_asymmetrically\'","lib/gitlab/safe_request_store.rb:12:in `fetch\'","lib/gitlab/repository_cache.rb:25:in `fetch\'","lib/gitlab/repository_cache_adapter.rb:178:in `block in cache_method_output_asymmetrically\'","lib/gitlab/utils/strong_memoize.rb:30:in `strong_memoize\'","lib/gitlab/repository_cache_adapter.rb:192:in `block in memoize_method_output\'","lib/gitlab/repository_cache_adapter.rb:201:in `no_repository_fallback\'","lib/gitlab/repository_cache_adapter.rb:191:in `memoize_method_output\'","lib/gitlab/repository_cache_adapter.rb:177:in `cache_method_output_asymmetrically\'","lib/gitlab/repository_cache_adapter.rb:83:in `block in cache_method_asymmetrically\'","app/models/repository.rb:646:in `head_commit\'","app/models/repository.rb:657:in `tree\'","app/models/repository.rb:1010:in `file_on_head\'","app/models/repository.rb:561:in `block in avatar\'","lib/gitlab/gitaly_client.rb:335:in `allow_n_plus_1_calls\'","app/models/repository.rb:560:in `avatar\'","lib/gitlab/repository_cache_adapter.rb:21:in `block (2 levels) in cache_method\'","lib/gitlab/repository_cache.rb:25:in `fetch\'","lib/gitlab/repository_cache_adapter.rb:152:in `block in cache_method_output\'","lib/gitlab/utils/strong_memoize.rb:30:in `strong_memoize\'","lib/gitlab/repository_cache_adapter.rb:192:in `block in memoize_method_output\'","lib/gitlab/repository_cache_adapter.rb:201:in `no_repository_fallback\'","lib/gitlab/repository_cache_adapter.rb:191:in `memoize_method_output\'","lib/gitlab/repository_cache_adapter.rb:151:in `cache_method_output\'","lib/gitlab/repository_cache_adapter.rb:20:in `block in cache_method\'","app/models/project.rb:1308:in `avatar_in_git\'","app/models/project.rb:1312:in `avatar_url\'","app/models/concerns/avatarable.rb:24:in `avatar_url\'","app/helpers/page_layout_helper.rb:52:in `page_image\'","app/views/layouts/_head.html.haml:27","app/views/layouts/application.html.haml:6","app/controllers/application_controller.rb:132:in `render\'","app/controllers/projects_controller.rb:68:in `create\'","app/controllers/application_controller.rb:496:in `set_current_admin\'","lib/gitlab/session.rb:11:in `with_session\'","app/controllers/application_controller.rb:487:in `set_session_storage\'","app/controllers/application_controller.rb:481:in `set_locale\'","lib/gitlab/error_tracking.rb:48:in `with_context\'","app/controllers/application_controller.rb:546:in `sentry_context\'","app/controllers/application_controller.rb:474:in `block in set_current_context\'","lib/gitlab/application_context.rb:52:in `block in use\'","lib/gitlab/application_context.rb:52:in `use\'","lib/gitlab/application_context.rb:20:in `with_context\'","app/controllers/application_controller.rb:467:in `set_current_context\'"],"db_duration_s":0.07781,"view_duration_s":0.0,"duration_s":0.77791}\n')])])]),a("p",[e._v("可以看到gitaly-client的permission denied error")]),e._v(" "),a("p",[e._v("然后从Praefect测试到Gitaly nodes的连通性")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("2020/08/21 15:25:38 [tcp://X.X.X.137:8075]: checking health...\n2020/08/21 15:25:38 [tcp://X.X.X.138:8075]: dialed successfully!\n2020/08/21 15:25:38 [tcp://X.X.X.138:8075]: checking health...\n2020/08/21 15:25:38 [tcp://X.X.X.136:8075]: dialed successfully!\n2020/08/21 15:25:38 [tcp://X.X.X.136:8075]: checking health...\n2020/08/21 15:25:38 [tcp://X.X.X.138:8075]: ERROR: unable to request health check: rpc error: code = PermissionDenied desc = permission denied\n2020/08/21 15:25:38 [tcp://X.X.X.137:8075]: ERROR: unable to request health check: rpc error: code = PermissionDenied desc = permission denied\n2020/08/21 15:25:38 [tcp://X.X.X.136:8075]: ERROR: unable to request health check: rpc error: code = PermissionDenied desc = permission denied\nrpc error: code = PermissionDenied desc = permission denied\n")])])]),a("p",[e._v("查到说不是shared secret就是clock drift问题 https://gitlab.com/gitlab-org/gitaly/-/issues/1762")]),e._v(" "),a("p",[e._v("我确认了配置无误，所以应该是clock drift，")]),e._v(" "),a("p",[e._v("通过ntp配置")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("yum install ntp\nvim /etc/ntp.conf\nsystemctl start ntpd\nsystemctl enable ntpd\n")])])]),a("p",[e._v("同步之后再测试，终于可以了")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("WARN[0000] ignoring configured election strategy as failover is disabled  election_strategy=local pid=6972\n2020/08/21 17:02:07 [tcp://X.X.X.138:8075]: dialing...\n2020/08/21 17:02:07 [tcp://X.X.X.136:8075]: dialing...\n2020/08/21 17:02:07 [tcp://X.X.X.137:8075]: dialing...\n2020/08/21 17:02:07 [tcp://X.X.X.138:8075]: dialed successfully!\n2020/08/21 17:02:07 [tcp://X.X.X.138:8075]: checking health...\n2020/08/21 17:02:07 [tcp://X.X.X.136:8075]: dialed successfully!\n2020/08/21 17:02:07 [tcp://X.X.X.136:8075]: checking health...\n[root@vm-cicd-proxy-v03 opt]# .101.137:8075]: dialed successfully!\n")])])]),a("p",[e._v("然后从前端访问测试，发现创建的时候报错503 not available，这又是啥，结果测试从gitlab server到Praefect的连通性，发现Praefect不通，最后发现Praefect忘记启动了！")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[root@vm-cicd-v01 opt]# gitlab-rake gitlab:gitaly:check\nChecking Gitaly ...\n\nGitaly: ... default ... OK\n\nChecking Gitaly ... Finished\n")])])]),a("p",[e._v("总结：")]),e._v(" "),a("p",[e._v("一定要确保连通性！")]),e._v(" "),a("h3",{attrs:{id:"repository-migration问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#repository-migration问题"}},[e._v("#")]),e._v(" repository migration问题")]),e._v(" "),a("p",[e._v("由于安装Gitaly cluster之前已经创建了一个repository，所以需要migration，")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/ee/administration/gitaly/praefect.html#migrating-existing-repositories-to-praefect")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('curl --request POST --header "Private-Token: <your_access_token>" --header "Content-Type: application/json" \\\n--data \'{"destination_storage_name":"praefect"}\' "https://gitlab.example.com/api/v4/projects/123/repository_storage_moves"\n')])])]),a("p",[e._v("这个token如何获取呢？")]),e._v(" "),a("p",[e._v("Admin头像->settings->Access Tokens，创建api权限获取token：测试")]),e._v(" "),a("p",[e._v("http://X.X.X.133/api/v4/projects?access_token=5L74k2hxQrKYdKNNG8Ne")]),e._v(" "),a("p",[e._v("api")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/ee/api/README.html")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/ee/api/api_resources.html")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html")]),e._v(" "),a("h3",{attrs:{id:"push失败问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#push失败问题"}},[e._v("#")]),e._v(" push失败问题")]),e._v(" "),a("p",[e._v("https://gitlab.com/gitlab-org/gitaly/-/issues/3327")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("λ git push upstream someBranch\nEnumerating objects: 40, done.\nCounting objects: 100% (40/40), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (16/16), done.\nWriting objects: 100% (26/26), 18.56 KiB | 1.33 MiB/s, done.\nTotal 26 (delta 6), reused 0 (delta 0)\nremote:\nremote: Create merge request for someBranch:\nremote:\nTo http://****.git\n   018fd712..ea76148f  someBranch -> someBranch\n这个成功了\nλ git push origin master\nEnumerating objects: 267, done.\nCounting objects: 100% (229/229), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (63/63), done.\nWriting objects: 100% (174/174), 49.63 KiB | 5.51 MiB/s, done.\nTotal 174 (delta 35), reused 162 (delta 24), pack-reused 0\nremote: Resolving deltas: 100% (35/35), completed with 12 local objects.\n这个就卡死在这里了\nλ git fsck\nChecking object directories: 100% (256/256), done.\nChecking objects: 100% (29945/29945), done.\ndangling blob 9706bd0d4e4b57714071d2f9cfb08461c0600fff\ndangling blob 9052226fc23fa9e83043335ea5ec13bc2f724bdc\n过了一天再执行就没有dangling blob了，所以这个应该没有什么关系\n")])])]),a("h4",{attrs:{id:"git-client排查"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-client排查"}},[e._v("#")]),e._v(" git client排查：")]),e._v(" "),a("p",[e._v("https://confluence.atlassian.com/bitbucketserverkb/git-push-fails-fatal-the-remote-end-hung-up-unexpectedly-779171796.html")]),e._v(" "),a("p",[e._v(".git/config")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('[core]\n\trepositoryformatversion = 0\n\tfilemode = false\n\tbare = false\n\tlogallrefupdates = true\n\tsymlinks = false\n\tignorecase = true\n\tpackedGitLimit = 512m \n\tpackedGitWindowSize = 512m\n[pack] \n\tdeltaCacheSize = 2047m \n\tpackSizeLimit = 2047m \n\twindowMemory = 2047m\t\n[remote "upstream"]\n\turl = http://****.git\n\tfetch = +refs/heads/*:refs/remotes/upstream/*\n[branch "master"]\n\tremote = upstream\n\tmerge = refs/heads/master\n[gui]\n\twmstate = zoomed\n\tgeometry = 1109x563+224+224 442 255\n[branch "someBranch"]\n\tremote = upstream\n\tmerge = refs/heads/someBranch\n[remote "origin"]\n\turl = http://*****.git\n\tfetch = +refs/heads/*:refs/remotes/origin/*\n')])])]),a("h4",{attrs:{id:"server端排查"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#server端排查"}},[e._v("#")]),e._v(" server端排查：")]),e._v(" "),a("p",[e._v("nginx\nhttps://docs.gitlab.com/omnibus/settings/nginx.html\nclient_max_body_size 200M;\nproxy_read_timeout")]),e._v(" "),a("p",[e._v("/var/log/gitlab/gitlab-workhorse/current")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{"correlation_id":"FiyLbvdSzA9","error":"handleReceivePack: smarthttp.ReceivePack: rpc error: code = Unavailable desc = PostReceivePack: exit status 128","level":"error","method":"POST","msg":"error","time":"2020-11-25T15:36:17+08:00","uri":"/test/git-receive-pack"}\n{"correlation_id":"FiyLbvdSzA9","duration_ms":932,"host":"X.X.X.160","level":"info","method":"POST","msg":"access","proto":"HTTP/1.1","referrer":"","remote_addr":"127.0.0.1:0","remote_ip":"127.0.0.1","status":200,"system":"http","time":"2020-11-25T15:36:17+08:00","uri":"/test/git-receive-pack","user_agent":"git/2.29.2.windows.2","written_bytes":779}\n                                                                                                                                                             \n{"correlation_id":"CRxXsx22P13","error":"handleReceivePack: smarthttp.ReceivePack: rpc error: code = Internal desc = failed proxying to secondary: rpc error: code = Unavailable desc = PostReceivePack: exit status 128","level":"error","method":"POST","msg":"error","time":"2020-11-25T16:32:25+08:00","uri":"/test/git-receive-pack"}\n{"correlation_id":"CRxXsx22P13","duration_ms":548,"host":"X.X.X.160","level":"info","method":"POST","msg":"access","proto":"HTTP/1.1","referrer":"","remote_addr":"127.0.0.1:0","remote_ip":"127.0.0.1","status":200,"system":"http","time":"2020-11-25T16:32:25+08:00","uri":"/test/git-receive-pack","user_agent":"git/2.29.2.windows.2","written_bytes":703}\n')])])]),a("p",[e._v("/var/log/gitlab/gitaly/current 或者通过 gitlab-ctl tail gitaly")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{"correlation_id":"guaTaM5Wcq4","grpc.code":"OK","grpc.meta.auth_version":"v2","grpc.meta.client_name":"gitlab-workhorse","grpc.meta.deadline_type":"none","grpc.method":"InfoRefsReceivePack","grpc.request.fullMethod":"/gitaly.SmartHTTPService/InfoRefsReceivePack","grpc.request.glProjectPath":"test/...","grpc.request.glRepository":"project-11","grpc.request.repoPath":"@hashed/4f/c8/4fc82b26aecb47d2868c4efbe3581732a3e7cbcc6c2efb32062c08170a05eeb8.git","grpc.request.repoStorage":"gitaly-1","grpc.request.topLevelGroup":"@hashed","grpc.service":"gitaly.SmartHTTPService","grpc.start_time":"2020-11-26T01:22:46Z","grpc.time_ms":4.995,"level":"info","msg":"finished streaming call with code OK","peer.address":"X.X.X.162:39070","pid":6702,"span.kind":"server","system":"grpc","time":"2020-11-26T01:22:46.594Z"}\n{"correlation_id":"mqo8zmozsw6","diskcache":"25dd57ac-cd11-46e1-9085-e7323e817a0d","grpc.meta.auth_version":"v2","grpc.meta.client_name":"gitlab-web","grpc.meta.deadline_type":"regular","grpc.method":"Cleanup","grpc.request.deadline":"2020-11-26T01:22:57Z","grpc.request.fullMethod":"/gitaly.RepositoryService/Cleanup","grpc.request.glProjectPath":"test/....","grpc.request.glRepository":"project-11","grpc.request.repoPath":"@hashed/4f/c8/4fc82b26aecb47d2868c4efbe3581732a3e7cbcc6c2efb32062c08170a05eeb8.git","grpc.request.repoStorage":"gitaly-1","grpc.request.topLevelGroup":"@hashed","grpc.service":"gitaly.RepositoryService","grpc.start_time":"2020-11-26T01:22:48Z","level":"info","msg":"diskcache state change","peer.address":"X.X.X.162:39070","pid":6702,"span.kind":"server","system":"grpc","time":"2020-11-26T01:22:48.683Z"}\n{"correlation_id":"mqo8zmozsw6","grpc.code":"OK","grpc.meta.auth_version":"v2","grpc.meta.client_name":"gitlab-web","grpc.meta.deadline_type":"regular","grpc.method":"Cleanup","grpc.request.deadline":"2020-11-26T01:22:57Z","grpc.request.fullMethod":"/gitaly.RepositoryService/Cleanup","grpc.request.glProjectPath":"test/....","grpc.request.glRepository":"project-11","grpc.request.repoPath":"@hashed/4f/c8/4fc82b26aecb47d2868c4efbe3581732a3e7cbcc6c2efb32062c08170a05eeb8.git","grpc.request.repoStorage":"gitaly-1","grpc.request.topLevelGroup":"@hashed","grpc.service":"gitaly.RepositoryService","grpc.start_time":"2020-11-26T01:22:48Z","grpc.time_ms":4.464,"level":"info","msg":"finished unary call with code OK","peer.address":"X.X.X.162:39070","pid":6702,"span.kind":"server","system":"grpc","time":"2020-11-26T01:22:48.683Z"}\n{"correlation_id":"mqo8zmozsw6","grpc.code":"OK","grpc.meta.auth_version":"v2","grpc.meta.client_name":"gitlab-web","grpc.meta.deadline_type":"regular","grpc.method":"GetNewLFSPointers","grpc.request.deadline":"2020-11-26T01:23:17Z","grpc.request.fullMethod":"/gitaly.BlobService/GetNewLFSPointers","grpc.request.glProjectPath":"test/....","grpc.request.glRepository":"project-11","grpc.request.repoPath":"@hashed/4f/c8/4fc82b26aecb47d2868c4efbe3581732a3e7cbcc6c2efb32062c08170a05eeb8.git","grpc.request.repoStorage":"gitaly-1","grpc.request.topLevelGroup":"@hashed","grpc.service":"gitaly.BlobService","grpc.start_time":"2020-11-26T01:22:48Z","grpc.time_ms":10.164,"level":"info","msg":"finished streaming call with code OK","peer.address":"X.X.X.162:39070","pid":6702,"span.kind":"server","system":"grpc","time":"2020-11-26T01:22:48.777Z"}\n{"correlation_id":"BSJbCoB1SJ8","duration_ms":568,"level":"info","method":"POST","msg":"Finished HTTP request","status":200,"time":"2020-11-26T01:22:48.813Z","url":"http://X.X.X.160/api/v4/internal/allowed"}\n{"correlation_id":"UxinibJuxD","duration_ms":45,"level":"info","method":"POST","msg":"Finished HTTP request","status":200,"time":"2020-11-26T01:22:48.859Z","url":"http://X.X.X.160/api/v4/internal/pre_receive"}\n{"grpc.code":"OK","grpc.meta.auth_version":"v2","grpc.meta.deadline_type":"none","grpc.method":"PreReceiveHook","grpc.request.fullMethod":"/gitaly.HookService/PreReceiveHook","grpc.request.glProjectPath":"test/....","grpc.request.glRepository":"project-11","grpc.request.repoPath":"@hashed/4f/c8/4fc82b26aecb47d2868c4efbe3581732a3e7cbcc6c2efb32062c08170a05eeb8.git","grpc.request.repoStorage":"gitaly-1","grpc.request.topLevelGroup":"@hashed","grpc.service":"gitaly.HookService","grpc.start_time":"2020-11-26T01:22:48Z","grpc.time_ms":616.497,"level":"info","msg":"finished streaming call with code OK","peer.address":"@","pid":6702,"span.kind":"server","system":"grpc","time":"2020-11-26T01:22:48.860Z"}\n{"grpc.code":"OK","grpc.meta.auth_version":"v2","grpc.meta.deadline_type":"none","grpc.method":"UpdateHook","grpc.request.fullMethod":"/gitaly.HookService/UpdateHook","grpc.request.glProjectPath":"test/....","grpc.request.glRepository":"project-11","grpc.request.repoPath":"@hashed/4f/c8/4fc82b26aecb47d2868c4efbe3581732a3e7cbcc6c2efb32062c08170a05eeb8.git","grpc.request.repoStorage":"gitaly-1","grpc.request.topLevelGroup":"@hashed","grpc.service":"gitaly.HookService","grpc.start_time":"2020-11-26T01:22:48Z","grpc.time_ms":0.222,"level":"info","msg":"finished streaming call with code OK","peer.address":"@","pid":6702,"span.kind":"server","system":"grpc","time":"2020-11-26T01:22:48.877Z"}\n\n{"error":"error voting on transaction: error voting on transaction: transaction was aborted","grpc.code":"Internal","grpc.meta.auth_version":"v2","grpc.meta.deadline_type":"none","grpc.method":"ReferenceTransactionHook","grpc.request.fullMethod":"/gitaly.HookService/ReferenceTransactionHook","grpc.request.glProjectPath":"test/....","grpc.request.glRepository":"project-11","grpc.request.repoPath":"@hashed/4f/c8/4fc82b26aecb47d2868c4efbe3581732a3e7cbcc6c2efb32062c08170a05eeb8.git","grpc.request.repoStorage":"gitaly-1","grpc.request.topLevelGroup":"@hashed","grpc.service":"gitaly.HookService","grpc.start_time":"2020-11-26T01:22:48Z","grpc.time_ms":14.148,"level":"error","msg":"finished streaming call with code Internal","peer.address":"@","pid":6702,"span.kind":"server","system":"grpc","time":"2020-11-26T01:22:48.905Z"}\n{"error":"error voting on transaction: error voting on transaction: rpc error: code = Internal desc = subtransaction has failed","grpc.code":"Internal","grpc.meta.auth_version":"v2","grpc.meta.deadline_type":"none","grpc.method":"ReferenceTransactionHook","grpc.request.fullMethod":"/gitaly.HookService/ReferenceTransactionHook","grpc.request.glProjectPath":"test/....","grpc.request.glRepository":"project-11","grpc.request.repoPath":"@hashed/4f/c8/4fc82b26aecb47d2868c4efbe3581732a3e7cbcc6c2efb32062c08170a05eeb8.git","grpc.request.repoStorage":"gitaly-1","grpc.request.topLevelGroup":"@hashed","grpc.service":"gitaly.HookService","grpc.start_time":"2020-11-26T01:22:48Z","grpc.time_ms":1.25,"level":"error","msg":"finished streaming call with code Internal","peer.address":"@","pid":6702,"span.kind":"server","system":"grpc","time":"2020-11-26T01:22:48.919Z"}\n{"correlation_id":"CqyeiP2Iyc8","grpc.meta.auth_version":"v2","grpc.meta.client_name":"gitlab-workhorse","grpc.meta.deadline_type":"none","grpc.method":"PostReceivePack","grpc.request.fullMethod":"/gitaly.SmartHTTPService/PostReceivePack","grpc.request.glProjectPath":"test/....","grpc.request.glRepository":"project-11","grpc.request.repoPath":"@hashed/4f/c8/4fc82b26aecb47d2868c4efbe3581732a3e7cbcc6c2efb32062c08170a05eeb8.git","grpc.request.repoStorage":"gitaly-1","grpc.request.topLevelGroup":"@hashed","grpc.service":"gitaly.SmartHTTPService","grpc.start_time":"2020-11-26T01:22:48Z","level":"error","msg":"error executing git hookerror executing git hookfatal: ref updates aborted by hook\\\\n","peer.address":"X.X.X.162:39070","pid":6702,"span.kind":"server","system":"grpc","time":"2020-11-26T01:22:48.920Z"}\n{"correlation_id":"CqyeiP2Iyc8","diskcache":"3764ffdd-944a-4977-b2ee-faa1360827ca","grpc.meta.auth_version":"v2","grpc.meta.client_name":"gitlab-workhorse","grpc.meta.deadline_type":"none","grpc.method":"PostReceivePack","grpc.request.fullMethod":"/gitaly.SmartHTTPService/PostReceivePack","grpc.request.glProjectPath":"test/....","grpc.request.glRepository":"project-11","grpc.request.repoPath":"@hashed/4f/c8/4fc82b26aecb47d2868c4efbe3581732a3e7cbcc6c2efb32062c08170a05eeb8.git","grpc.request.repoStorage":"gitaly-1","grpc.request.topLevelGroup":"@hashed","grpc.service":"gitaly.SmartHTTPService","grpc.start_time":"2020-11-26T01:22:48Z","level":"info","msg":"diskcache state change","peer.address":"X.X.X.162:39070","pid":6702,"span.kind":"server","system":"grpc","time":"2020-11-26T01:22:48.922Z"}\n')])])]),a("p",[e._v("log的时区不同？\nhttps://docs.gitlab.com/ee/administration/timezone.html")]),e._v(" "),a("p",[e._v("又尝试清缓存 通过rail console try to clear cache")]),e._v(" "),a("p",[e._v("gitlab-rails console\nhttps://docs.gitlab.com/ee/administration/troubleshooting/gitlab_rails_cheat_sheet.html")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("p=Project.find_by(id:11)\n\nirb(main):026:0> pp p.statistics\n\nirb(main):027:0> p.statistics.refresh!\n\nirb(main):028:0> pp p.statistics\n\n=> #<ProjectStatistics id: 10, project_id: 11, namespace_id: 12, commit_count: 1355, storage_size: 8074035, repository_size: 7990149, lfs_objects_size: 0, build_artifacts_size: 0, shared_runners_seconds: 0, shared_runners_seconds_last_reset: nil, packages_size: 0, wiki_size: 83886, snippets_size: 0, pipeline_artifacts_size: 0>\nirb(main):029:0>\n")])])]),a("p",[e._v("经过搜索最接近的是这里 https://gitlab.com/gitlab-org/gitaly/-/issues/3128 大概意思因为gitlab今年好像引入了Gitaly的新voting策略 所以看到不少类似问题，我们的不是primary failed vote，而是直接是vote error，因为我们的版本是13.4 他这里说是13.5做了一些关于voting的修正，这也许是为啥gitlab提醒我们 upgrade asap的原因")]),e._v(" "),a("h4",{attrs:{id:"最终重现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最终重现"}},[e._v("#")]),e._v(" 最终重现")]),e._v(" "),a("p",[e._v("回想过程，想起来是先推送的其他分支，然后才推送了master，重现成功，虽然git client端错误有点不同，不再卡死，而是报错：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("λ git push origin master\nTotal 0 (delta 0), reused 0 (delta 0), pack-reused 0\nerror: RPC failed; HTTP 500 curl 22 The requested URL returned error: 500\nfatal: the remote end hung up unexpectedly\nfatal: the remote end hung up unexpectedly\nEverything up-to-date\n")])])]),a("p",[e._v("但是服务器端是相同的错误")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{"correlation_id":"WurcwnEEsXa","error":"handleReceivePack: smarthttp.ReceivePack: rpc error: code = Unavailable desc = PostReceivePack: exit status 128","level":"error","method":"POST","msg":"error","time":"2020-11-26T17:47:48+08:00","uri":"/yue.liu/test-mgr.git/git-receive-pack"}\n{"correlation_id":"WurcwnEEsXa","duration_ms":534,"host":"X.X.X.160","level":"info","method":"POST","msg":"access","proto":"HTTP/1.1","referrer":"","remote_addr":"127.0.0.1:0","remote_ip":"127.0.0.1","status":500,"system":"http","time":"2020-11-26T17:47:48+08:00","uri":"/yue.liu/test-mgr.git/git-receive-pack","user_agent":"git/2.29.2.windows.2","written_bytes":0}\n\n{"grpc.code":"OK","grpc.meta.auth_version":"v2","grpc.meta.deadline_type":"none","grpc.method":"PreReceiveHook","grpc.request.fullMethod":"/gitaly.HookService/PreReceiveHook","grpc.request.glProjectPath":"yue.liu/test-mgr","grpc.request.glRepository":"project-15","grpc.request.repoPath":"@hashed/e6/29/e629fa6598d732768f7c726b4b621285f9c3b85303900aa912017db7617d8bdb.git","grpc.request.repoStorage":"gitaly-2","grpc.request.topLevelGroup":"@hashed","grpc.service":"gitaly.HookService","grpc.start_time":"2020-11-26T09:47:58Z","grpc.time_ms":236.395,"level":"info","msg":"finished streaming call with code OK","peer.address":"@","pid":6188,"span.kind":"server","system":"grpc","time":"2020-11-26T09:47:58.387Z"}\n{"grpc.code":"OK","grpc.meta.auth_version":"v2","grpc.meta.deadline_type":"none","grpc.method":"UpdateHook","grpc.request.fullMethod":"/gitaly.HookService/UpdateHook","grpc.request.glProjectPath":"yue.liu/test-mgr","grpc.request.glRepository":"project-15","grpc.request.repoPath":"@hashed/e6/29/e629fa6598d732768f7c726b4b621285f9c3b85303900aa912017db7617d8bdb.git","grpc.request.repoStorage":"gitaly-2","grpc.request.topLevelGroup":"@hashed","grpc.service":"gitaly.HookService","grpc.start_time":"2020-11-26T09:47:58Z","grpc.time_ms":0.369,"level":"info","msg":"finished streaming call with code OK","peer.address":"@","pid":6188,"span.kind":"server","system":"grpc","time":"2020-11-26T09:47:58.410Z"}\n{"error":"error voting on transaction: error voting on transaction: transaction was aborted","grpc.code":"Internal","grpc.meta.auth_version":"v2","grpc.meta.deadline_type":"none","grpc.method":"ReferenceTransactionHook","grpc.request.fullMethod":"/gitaly.HookService/ReferenceTransactionHook","grpc.request.glProjectPath":"yue.liu/test-mgr","grpc.request.glRepository":"project-15","grpc.request.repoPath":"@hashed/e6/29/e629fa6598d732768f7c726b4b621285f9c3b85303900aa912017db7617d8bdb.git","grpc.request.repoStorage":"gitaly-2","grpc.request.topLevelGroup":"@hashed","grpc.service":"gitaly.HookService","grpc.start_time":"2020-11-26T09:47:58Z","grpc.time_ms":4.137,"level":"error","msg":"finished streaming call with code Internal","peer.address":"@","pid":6188,"span.kind":"server","system":"grpc","time":"2020-11-26T09:47:58.429Z"}\n{"error":"error voting on transaction: error voting on transaction: rpc error: code = Internal desc = subtransaction has failed","grpc.code":"Internal","grpc.meta.auth_version":"v2","grpc.meta.deadline_type":"none","grpc.method":"ReferenceTransactionHook","grpc.request.fullMethod":"/gitaly.HookService/ReferenceTransactionHook","grpc.request.glProjectPath":"yue.liu/test-mgr","grpc.request.glRepository":"project-15","grpc.request.repoPath":"@hashed/e6/29/e629fa6598d732768f7c726b4b621285f9c3b85303900aa912017db7617d8bdb.git","grpc.request.repoStorage":"gitaly-2","grpc.request.topLevelGroup":"@hashed","grpc.service":"gitaly.HookService","grpc.start_time":"2020-11-26T09:47:58Z","grpc.time_ms":1.062,"level":"error","msg":"finished streaming call with code Internal","peer.address":"@","pid":6188,"span.kind":"server","system":"grpc","time":"2020-11-26T09:47:58.444Z"}\n{"correlation_id":"WurcwnEEsXa","grpc.meta.auth_version":"v2","grpc.meta.client_name":"gitlab-workhorse","grpc.meta.deadline_type":"none","grpc.method":"PostReceivePack","grpc.request.fullMethod":"/gitaly.SmartHTTPService/PostReceivePack","grpc.request.glProjectPath":"yue.liu/test-mgr","grpc.request.glRepository":"project-15","grpc.request.repoPath":"@hashed/e6/29/e629fa6598d732768f7c726b4b621285f9c3b85303900aa912017db7617d8bdb.git","grpc.request.repoStorage":"gitaly-2","grpc.request.topLevelGroup":"@hashed","grpc.service":"gitaly.SmartHTTPService","grpc.start_time":"2020-11-26T09:47:58Z","level":"error","msg":"error executing git hookerror executing git hookfatal: ref updates aborted by hook\\\\n","peer.address":"X.X.X.162:54626","pid":6188,"span.kind":"server","system":"grpc","time":"2020-11-26T09:47:58.446Z"}\n{"correlation_id":"WurcwnEEsXa","diskcache":"e0a52ce2-2bda-474f-8df5-5ca5537df98c","grpc.meta.auth_version":"v2","grpc.meta.client_name":"gitlab-workhorse","grpc.meta.deadline_type":"none","grpc.method":"PostReceivePack","grpc.request.fullMethod":"/gitaly.SmartHTTPService/PostReceivePack","grpc.request.glProjectPath":"yue.liu/test-mgr","grpc.request.glRepository":"project-15","grpc.request.repoPath":"@hashed/e6/29/e629fa6598d732768f7c726b4b621285f9c3b85303900aa912017db7617d8bdb.git","grpc.request.repoStorage":"gitaly-2","grpc.request.topLevelGroup":"@hashed","grpc.service":"gitaly.SmartHTTPService","grpc.start_time":"2020-11-26T09:47:58Z","level":"info","msg":"diskcache state change","peer.address":"X.X.X.162:54626","pid":6188,"span.kind":"server","system":"grpc","time":"2020-11-26T09:47:58.448Z"}\n{"correlation_id":"WurcwnEEsXa","error":"rpc error: code = Canceled desc = rpc error: code = Unavailable desc = PostReceivePack: exit status 128","grpc.code":"Canceled","grpc.meta.auth_version":"v2","grpc.meta.client_name":"gitlab-workhorse","grpc.meta.deadline_type":"none","grpc.method":"PostReceivePack","grpc.request.fullMethod":"/gitaly.SmartHTTPService/PostReceivePack","grpc.request.glProjectPath":"yue.liu/test-mgr","grpc.request.glRepository":"project-15","grpc.request.repoPath":"@hashed/e6/29/e629fa6598d732768f7c726b4b621285f9c3b85303900aa912017db7617d8bdb.git","grpc.request.repoStorage":"gitaly-2","grpc.request.topLevelGroup":"@hashed","grpc.service":"gitaly.SmartHTTPService","grpc.start_time":"2020-11-26T09:47:58Z","grpc.time_ms":328.75,"level":"info","msg":"finished streaming call with code Canceled","peer.address":"X.X.X.162:54626","pid":6188,"span.kind":"server","system":"grpc","time":"2020-11-26T09:47:58.448Z"}\n{"correlation_id":"ldjgtuTb099","grpc.code":"OK","grpc.meta.auth_version":"v2","grpc.meta.client_name":"gitlab-web","grpc.meta.deadline_type":"regular","grpc.method":"FindCommit","grpc.request.deadline":"2020-11-26T09:48:28Z","grpc.request.fullMethod":"/gitaly.CommitService/FindCommit","grpc.request.glProjectPath":"test/...","grpc.request.glRepository":"project-9","grpc.request.repoPath":"@hashed/19/58/19581e27de7ced00ff1ce50b2047e7a567c76b1cbaebabe5ef03f7c3017bb5b7.git","grpc.request.repoStorage":"gitaly-2","grpc.request.topLevelGroup":"@hashed","grpc.service":"gitaly.CommitService","grpc.start_time":"2020-11-26T09:47:59Z","grpc.time_ms":6.662,"level":"info","msg":"finished unary call with code OK","peer.address":"X.X.X.162:54626","pid":6188,"span.kind":"server","system":"grpc","time":"2020-11-26T09:47:59.660Z"}\n')])])]),a("h3",{attrs:{id:"版本升级后出现500无法访问project"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#版本升级后出现500无法访问project"}},[e._v("#")]),e._v(" 版本升级后出现500无法访问project")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('还是常规操作查看gitlab server日志，刚开始我是一个个日志去/var/log/gitlab里面看，结果没发现异常，然后又去到Praefect和Gitaly都没异常，说明从gitlab server到Praefect到Gitaly一路畅通，最后其实是我漏了gitlab server的一些日志，通过这个命令可以看全面：\ngitlab-ctl tail\n==> /var/log/gitlab/nginx/gitlab_access.log <==\n10.30.30.94 - - [11/Dec/2020:11:15:26 +0800] "GET /assets/favicon-7901bd695fb93edb07975966062049829afb56cf11511236e61bcf425070e36e.png HTTP/1.1" 200 1611 "http://X.X.X.133/dummyproject/dummy_project" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.67 Safari/537.36" -\n\n==> /var/log/gitlab/puma/puma_stdout.log <==\n{"timestamp":"2020-12-11T03:15:27.086Z","pid":10524,"message":"PumaWorkerKiller: Consuming 7400.09765625 mb with master and 8 workers."}\n\n==> /var/log/gitlab/gitlab-rails/production.log <==\nStarted GET "/dummyproject/dummy_project" for 10.30.30.94 at 2020-12-11 11:15:30 +0800\nProcessing by ProjectsController#show as HTML\n  Parameters: {"namespace_id"=>"dummyproject", "id"=>"dummy_project"}\nCompleted 500 Internal Server Error in 123ms (ActiveRecord: 11.4ms | Elasticsearch: 0.0ms | Allocations: 30989)\n\n==> /var/log/gitlab/gitlab-rails/production_json.log <==\n{"method":"GET","path":"/dummyproject/dummy_project","format":"html","controller":"ProjectsController","action":"show","status":500,"time":"2020-12-11T03:15:30.561Z","params":[{"key":"namespace_id","value":"dummyproject"},{"key":"id","value":"dummy_project"}],"remote_ip":"10.30.30.94","user_id":1,"username":"root","ua":"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) Gecko/20100101 Firefox/83.0","correlation_id":"QlUs3cmwEw6","meta.user":"root","meta.project":"dummyproject/dummy_project","meta.root_namespace":"dummyproject","meta.caller_id":"ProjectsController#show","meta.feature_category":"projects","gitaly_calls":2,"gitaly_duration_s":0.015953,"redis_calls":18,"redis_duration_s":0.0048839999999999995,"redis_read_bytes":2804,"redis_write_bytes":2499,"redis_cache_calls":17,"redis_cache_duration_s":0.004227,"redis_cache_read_bytes":2621,"redis_cache_write_bytes":973,"redis_shared_state_calls":1,"redis_shared_state_duration_s":0.000657,"redis_shared_state_read_bytes":183,"redis_shared_state_write_bytes":1526,"queue_duration_s":0.136449,"cpu_s":0.26,"exception.class":"ActionView::Template::Error","exception.message":"undefined method `change_reviewer_merge_request\' for #<NotificationSetting:0x00007f75ceb68438>","exception.backtrace":["app/views/shared/notifications/_custom_notifications.html.haml:29:in `public_send\'","app/views/shared/notifications/_custom_notifications.html.haml:29","app/views/shared/notifications/_custom_notifications.html.haml:25:in `each\'","app/views/shared/notifications/_custom_notifications.html.haml:25:in `each_with_index\'","app/views/shared/notifications/_custom_notifications.html.haml:25","app/views/shared/notifications/_custom_notifications.html.haml:14","app/views/shared/notifications/_new_button.html.haml:34","app/views/shared/notifications/_new_button.html.haml:33","app/views/shared/notifications/_new_button.html.haml:12","app/views/projects/_home_panel.html.haml:47","app/views/projects/show.html.haml:12","app/controllers/application_controller.rb:134:in `render\'","app/controllers/application_controller.rb:548:in `block in allow_gitaly_ref_name_caching\'","lib/gitlab/gitaly_client.rb:318:in `allow_ref_name_caching\'","app/controllers/application_controller.rb:547:in `allow_gitaly_ref_name_caching\'","ee/lib/gitlab/ip_address_state.rb:10:in `with\'","ee/app/controllers/ee/application_controller.rb:44:in `set_current_ip_address\'","app/controllers/application_controller.rb:493:in `set_current_admin\'","lib/gitlab/session.rb:11:in `with_session\'","app/controllers/application_controller.rb:484:in `set_session_storage\'","lib/gitlab/i18n.rb:73:in `with_locale\'","lib/gitlab/i18n.rb:79:in `with_user_locale\'","app/controllers/application_controller.rb:478:in `set_locale\'","lib/gitlab/error_tracking.rb:52:in `with_context\'","app/controllers/application_controller.rb:543:in `sentry_context\'","app/controllers/application_controller.rb:471:in `block in set_current_context\'","lib/gitlab/application_context.rb:54:in `block in use\'","lib/gitlab/application_context.rb:54:in `use\'","lib/gitlab/application_context.rb:21:in `with_context\'","app/controllers/application_controller.rb:463:in `set_current_context\'","lib/gitlab/metrics/elasticsearch_rack_middleware.rb:16:in `call\'","lib/gitlab/middleware/rails_queue_duration.rb:33:in `call\'","lib/gitlab/metrics/rack_middleware.rb:16:in `block in call\'","lib/gitlab/metrics/transaction.rb:61:in `run\'","lib/gitlab/metrics/rack_middleware.rb:16:in `call\'","lib/gitlab/request_profiler/middleware.rb:17:in `call\'","lib/gitlab/jira/middleware.rb:19:in `call\'","lib/gitlab/middleware/go.rb:20:in `call\'","lib/gitlab/etag_caching/middleware.rb:13:in `call\'","lib/gitlab/middleware/multipart.rb:218:in `call\'","lib/gitlab/middleware/handle_null_bytes.rb:19:in `call\'","lib/gitlab/middleware/read_only/controller.rb:51:in `call\'","lib/gitlab/middleware/read_only.rb:18:in `call\'","lib/gitlab/middleware/same_site_cookies.rb:27:in `call\'","lib/gitlab/middleware/basic_health_check.rb:25:in `call\'","lib/gitlab/middleware/handle_ip_spoof_attack_error.rb:25:in `call\'","lib/gitlab/middleware/request_context.rb:23:in `call\'","config/initializers/fix_local_cache_middleware.rb:9:in `call\'","lib/gitlab/metrics/requests_rack_middleware.rb:49:in `call\'","lib/gitlab/middleware/release_env.rb:12:in `call\'"],"db_duration_s":0.01144,"view_duration_s":0.0,"duration_s":0.12355,"db_count":26,"db_write_count":0,"db_cached_count":4}\n==> /var/log/gitlab/gitlab-rails/production.log <==\n\nActionView::Template::Error (undefined method `change_reviewer_merge_request\' for #<NotificationSetting:0x00007f75ceb68438>):\n    26:                   - field_id = "#{notifications_menu_identifier("modal", notification_setting)}_notification_setting[#{event}]"\n    27:                   .form-group\n    28:                     .form-check{ class: ("gl-mt-0" if index == 0) }\n    29:                       = check_box("notification_setting", event, id: field_id, class: "js-custom-notification-event form-check-input", checked: notification_setting.public_send(event))\n    30:                       %label.form-check-label{ for: field_id }\n    31:                         %strong\n    32:                           = notification_event_name(event)\n\napp/views/shared/notifications/_custom_notifications.html.haml:29:in `public_send\'\napp/views/shared/notifications/_custom_notifications.html.haml:29\napp/views/shared/notifications/_custom_notifications.html.haml:25:in `each\'\napp/views/shared/notifications/_custom_notifications.html.haml:25:in `each_with_index\'\napp/views/shared/notifications/_custom_notifications.html.haml:25\napp/views/shared/notifications/_custom_notifications.html.haml:14\napp/views/shared/notifications/_new_button.html.haml:34\napp/views/shared/notifications/_new_button.html.haml:33\napp/views/shared/notifications/_new_button.html.haml:12\napp/views/projects/_home_panel.html.haml:47\napp/views/projects/show.html.haml:12\napp/controllers/application_controller.rb:134:in `render\'\napp/controllers/application_controller.rb:548:in `block in allow_gitaly_ref_name_caching\'\nlib/gitlab/gitaly_client.rb:318:in `allow_ref_name_caching\'\napp/controllers/application_controller.rb:547:in `allow_gitaly_ref_name_caching\'\nee/lib/gitlab/ip_address_state.rb:10:in `with\'\nee/app/controllers/ee/application_controller.rb:44:in `set_current_ip_address\'\napp/controllers/application_controller.rb:493:in `set_current_admin\'\nlib/gitlab/session.rb:11:in `with_session\'\napp/controllers/application_controller.rb:484:in `set_session_storage\'\nlib/gitlab/i18n.rb:73:in `with_locale\'\nlib/gitlab/i18n.rb:79:in `with_user_locale\'\napp/controllers/application_controller.rb:478:in `set_locale\'\nlib/gitlab/error_tracking.rb:52:in `with_context\'\napp/controllers/application_controller.rb:543:in `sentry_context\'\napp/controllers/application_controller.rb:471:in `block in set_current_context\'\nlib/gitlab/application_context.rb:54:in `block in use\'\nlib/gitlab/application_context.rb:54:in `use\'\nlib/gitlab/application_context.rb:21:in `with_context\'\napp/controllers/application_controller.rb:463:in `set_current_context\'\nlib/gitlab/metrics/elasticsearch_rack_middleware.rb:16:in `call\'\nlib/gitlab/middleware/rails_queue_duration.rb:33:in `call\'\nlib/gitlab/metrics/rack_middleware.rb:16:in `block in call\'\nlib/gitlab/metrics/transaction.rb:61:in `run\'\nlib/gitlab/metrics/rack_middleware.rb:16:in `call\'\nlib/gitlab/request_profiler/middleware.rb:17:in `call\'\nlib/gitlab/jira/middleware.rb:19:in `call\'\nlib/gitlab/middleware/go.rb:20:in `call\'\nlib/gitlab/etag_caching/middleware.rb:13:in `call\'\nlib/gitlab/middleware/multipart.rb:218:in `call\'\nlib/gitlab/middleware/handle_null_bytes.rb:19:in `call\'\nlib/gitlab/middleware/read_only/controller.rb:51:in `call\'\nlib/gitlab/middleware/read_only.rb:18:in `call\'\nlib/gitlab/middleware/same_site_cookies.rb:27:in `call\'\nlib/gitlab/middleware/basic_health_check.rb:25:in `call\'\nlib/gitlab/middleware/handle_ip_spoof_attack_error.rb:25:in `call\'\nlib/gitlab/middleware/request_context.rb:23:in `call\'\nconfig/initializers/fix_local_cache_middleware.rb:9:in `call\'\nlib/gitlab/metrics/requests_rack_middleware.rb:49:in `call\'\nlib/gitlab/middleware/release_env.rb:12:in `call\'\n\n==> /var/log/gitlab/gitlab-workhorse/current <==\n{"content_type":"text/html; charset=utf-8","correlation_id":"QlUs3cmwEw6","duration_ms":297,"host":"X.X.X.133","level":"info","method":"GET","msg":"access","proto":"HTTP/1.1","referrer":"http://X.X.X.133/","remote_addr":"127.0.0.1:0","remote_ip":"127.0.0.1","status":500,"system":"http","time":"2020-12-11T11:15:30+08:00","uri":"/dummyproject/dummy_project","user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) Gecko/20100101 Firefox/83.0","written_bytes":2926}\n\n很容易就发现：\nActionView::Template::Error (undefined method `change_reviewer_merge_request\'这段，通过在gitlab.com 搜索后面的详情第一个error：“app/views/shared/notifications/_custom_notifications.html.haml:29:in `public_send\'”\n得到：\nhttps://gitlab.com/gitlab-org/gitlab/-/issues/5752\n然后根据提示检查db migration：\n\ngitlab-rake db:migrate:status\n发现很多down的\n[root@vm-cicd-v01 opt]# gitlab-rake db:migrate:status|grep notification\n   up     20190115054216  Add error notification sent to remote mirrors\n   up     20190320174702  Add lets encrypt notification email to application settings\n   up     20190327163904  Add notification email to notification settings\n   up     20190606014128  Add last ci minutes notification at to namespaces\n   up     20190621022810  Add last ci minutes usage notification level to namespaces\n   up     20190930082942  Add new release to notification settings\n   up     20191014123159  Add expire notification delivered to personal access tokens\n   up     20191111165017  Add fixed pipeline to notification settings\n   up     20200311192351  Add index on noteable type and noteable id to sent notifications\n   up     20200717163656  Add moved project to notification settings\n   up     20200729151021  Add after expiry notification delivered to personal access tokens\n  down    20200909083339  Add change reviewer merge request to notification settings\n  down    20200912152943  Rename admin notification email application setting\n  down    20200912153218  Cleanup admin notification email application setting rename\n  \ngitlab-rails dbconsole\n\\d notification_settings\n确实没有 change_reviewer_merge_request\n然后 gitlab-rake db:migrate:status|grep notification_settings 会看到相关的脚本基本都down\n修复很简单，执行\ngitlab-rake db:migrate\n\t\n')])])]),a("h3",{attrs:{id:"malformed-configuration-json-file-found-at-opt-gitlab-embedded-nodes-xxxx-json"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#malformed-configuration-json-file-found-at-opt-gitlab-embedded-nodes-xxxx-json"}},[e._v("#")]),e._v(" Malformed configuration JSON file found at /opt/gitlab/embedded/nodes/XXXX.json")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# yum history info 21\nLoaded plugins: product-id, search-disabled-repos, subscription-manager\n\nThis system is not registered with an entitlement server. You can use subscription-manager to register.\n\nTransaction ID : 21\nBegin time     : Wed Dec 23 10:30:02 2020\nBegin rpmdb    : 428:92019b90dfb62522e2602a67ec8bb622df3d807c\nEnd time       :            10:30:10 2020 (8 seconds)\nEnd rpmdb      : 428:92019b90dfb62522e2602a67ec8bb622df3d807c\nUser           : root <root>\nReturn-Code    : Failure: 1\nCommand Line   : -d 2 -y install /opt/gitlab-ee-13.5.1-ee.0.el7.x86_64.rpm\nTransaction performed with:\n    Installed     rpm-4.11.3-43.el7.x86_64                    @APX\n    Installed     subscription-manager-1.24.26-3.el7_8.x86_64 @APX\n    Installed     yum-3.4.3-167.el7.noarch                    @APX\nPackages Altered:\n ** Updated gitlab-ee-13.5.0-ee.0.el7.x86_64 @/gitlab-ee-13.5.0-ee.0.el7.x86_64\n ** Update            13.5.1-ee.0.el7.x86_64 ?\nScriptlet output:\n   1 Malformed configuration JSON file found at /opt/gitlab/embedded/nodes/xxxxx.json.\n   2 This usually happens when your last run of `gitlab-ctl reconfigure` didn't complete successfully.\n   3 This file is used to check if any of the unsupported configurations are enabled,\n   4 and hence require a working reconfigure before upgrading.\n   5 Please run `sudo gitlab-ctl reconfigure` to fix it and try again.\n   6 error: %pre(gitlab-ee-13.5.1-ee.0.el7.x86_64) scriptlet failed, exit status 1\n")])])]),a("ol",[a("li",[e._v("升级报错“Malformed configuration JSON file found at /opt/gitlab/embedded/nodes/XXX.json.”")]),e._v(" "),a("li",[e._v("然后根据这个错误我看了下这个文件内只是一个简单的hostname，而且是正常Jason格式，根据 https://gitlab.com/gitlab-org/omnibus-gitlab/-/issues/4385 中有人提到删除该文件即可正常升级")]),e._v(" "),a("li",[e._v("然后根据log提示 “Please run "),a("code",[e._v("sudo gitlab-ctl reconfigure")]),e._v(' to fix it and try again”决定执行 reconfigure看看，结果仍然报错，不过错误信息是：“ruby_block[directory resource: /var/opt/gitlab/git-data/repositories] (/opt/gitlab/embedded/cookbooks/cache/cookbooks/package/resources/storage_directory.rb line 34) had an error: Mixlib::ShellOut::ShellCommandFailed: Failed asserting that mode permissions on "/var/opt/gitlab/git-data/repositories"”\n4.根据第3的错误搜索，发现 https://gitlab.com/gitlab-org/omnibus-gitlab/-/issues/5743，确定是版本13.5.0自己的问题，说是升级到13.5.1就解决了')]),e._v(" "),a("li",[e._v("所以，13.5.0的一个bug造成无法reconfigure，只能通过升级解决，但是升级又遇到所谓malformed json错误，提示reconfigure解决，deadlock！")]),e._v(" "),a("li",[e._v("最终解决，采用别人提到的尝试删除/opt/gitlab/embedded/nodes/XXXX.json，再次升级成功！")])]),e._v(" "),a("h3",{attrs:{id:"gitlab-backup备份定时任务失败"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-backup备份定时任务失败"}},[e._v("#")]),e._v(" gitlab-backup备份定时任务失败")]),e._v(" "),a("p",[e._v("通过查crontab的相关日志以及 /var/mail/root，发现是配置的目录没有权限")]),e._v(" "),a("p",[e._v("但是实际上改目录已经chown给了git用户，最后发现是git对这个目录的父目录没有权限！")]),e._v(" "),a("h3",{attrs:{id:"磁盘用尽"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#磁盘用尽"}},[e._v("#")]),e._v(" 磁盘用尽")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("备份文件忘记设置 keeping time，造成默认的/var用尽")])]),e._v(" "),a("li",[a("p",[e._v("prometheus监控数据，每天大概1.28G 上下，retention貌似是2 weeks")]),e._v(" "),a("p",[e._v("https://docs.gitlab.com/ee/operations/metrics/dashboards/#annotation-retention-policy")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('(time() - prometheus_tsdb_lowest_timestamp_seconds) / 86400\n\nhttp://XXXXX-/grafana/explore?orgId=1&left=["now-1h","now","GitLab Omnibus",{"expr":"(time() - prometheus_tsdb_lowest_timestamp_seconds) %2F 86400"},{"mode":"Metrics"},{"ui":[true,true,true,"none"]}]\n\n可以看到结果是15，差不多就是2个礼拜多一天，所以/var尽量要大一些，至少50G以上\n\n ls -ltrh $(find /var/opt/gitlab/prometheus/data/wal/* -not -empty)\n \n https://gitlab.com/gitlab-org/omnibus-gitlab/-/issues/4166\n \n \n最后发现可能是由于之前磁盘出现过问题，造成prometheus出错：\n tail -f /var/log/gitlab/prometheus/current\n2021-02-09_05:00:02.10666 level=info ts=2021-02-09T05:00:02.106Z caller=head.go:804 component=tsdb msg="Head GC completed" duration=57.012153ms\n2021-02-09_05:00:02.10697 level=error ts=2021-02-09T05:00:02.106Z caller=db.go:685 component=tsdb msg="compaction failed" err="reload blocks: head truncate failed: truncate chunks.HeadReadWriter: maxt of the files are not set"\n2021-02-09_07:00:01.99667 level=info ts=2021-02-09T07:00:01.995Z caller=compact.go:495 component=tsdb msg="write block" mint=1612843200000 maxt=1612850400000 ulid=01EY2SDZ0QD07844YCTAQ8S55Z duration=1.332421074s\n\n尝试使用prometheus api，发现admin api被gitlab禁用\nhttps://prometheus.io/docs/prometheus/latest/querying/api/#tsdb-stats\n$ curl -XPOST http://localhost:9090/api/v1/admin/tsdb/clean_tombstones\n\nhttps://github.com/prometheus/prometheus/issues/7753\ngitlab-ctl stop prometheus\nDelete the chunks_head directory\ngitlab-ctl start prometheus\n\n')])])])])]),e._v(" "),a("h3",{attrs:{id:"web访问404-500-503-pull-timeout"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#web访问404-500-503-pull-timeout"}},[e._v("#")]),e._v(" web访问404/500/503, pull timeout")]),e._v(" "),a("h4",{attrs:{id:"观察"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#观察"}},[e._v("#")]),e._v(" 观察")]),e._v(" "),a("p",[e._v("现象是repo无法pull，偶尔有个别repo可以pull，主要报错如下")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ git pull\nfatal: unable to access 'http://X.X.X.160/test.git/': Failed to connect to X.X.X.160 port 80: Timed out\n\n$ git pull\nerror: RPC failed; HTTP 500 curl 22 The requested URL returned error: 500\nfatal: expected flush after ref listing\n\n$ git pull\nfatal: the remote end hung up unexceptedly\n")])])]),a("p",[e._v("另外通过web访问project，会不断出现404/500/503等页面，多次刷新才能渲染，而且渲染页面出现奇怪提示：")]),e._v(" "),a("p",[e._v("首先是黄色warn：")]),e._v(" "),a("p",[a("code",[e._v("You won't be able to pull or push project code via SSH until you add an SSH key to your profile")])]),e._v(" "),a("p",[e._v("但是我跑到Admin Area->settings->Enabled Git Access Protocol 明明是Both SSH and HTTP(S)")]),e._v(" "),a("p",[e._v("然后有时候渲染出来还有红色error：")]),e._v(" "),a("p",[a("code",[e._v("An error occurred while fetching folder content")])]),e._v(" "),a("h4",{attrs:{id:"开始排查"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开始排查"}},[e._v("#")]),e._v(" 开始排查：")]),e._v(" "),a("p",[e._v("首先从gitlab server入手，\ngitlab-ctl tail\n看到很多gitlab-runner日志\nhttps://gitlab.com/gitlab-org/omnibus-gitlab/-/issues/3324\n修改了 gitlab-runner机器上的 /etc/gitlab-runner/config.toml，将check_interval 从0（默认3秒）改成30秒")]),e._v(" "),a("p",[e._v("没有什么影响，只是让其频率不要太高")]),e._v(" "),a("p",[e._v("然后继续看到gitlab-server上很多 PermissionDenied")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('vim /var/log/gitlab/gitlab-workhorse/current\n\n{"error":"rpc error: code = PermissionDenied desc = permission denied","level":"error","msg":"GetInfoRefsHandler: error copying gitaly response","time":"2021-05-11T15:52:40+08:00"}\n{"content_type":"application/x-git-upload-pack-advertisement","correlation_id":"ukeIGrLRj09","duration_ms":145,"host":"X.X.X.160","level":"info","method":"GET","msg":"access","proto":"HTTP/1.1","referrer":"","remote_addr":"127.0.0.1:0","remote_ip":"127.0.0.1","status":200,"system":"http","time":"2021-05-11T15:52:40+08:00","uri":"/test.git/info/refs?service=git-upload-pack","user_agent":"git/2.18.0.windows.1","written_bytes":23}\n\n')])])]),a("p",[e._v("其实下一步应该自然去查下Praefect，不过还是先碰运气看看有没有exception")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('\n[root@vm-gitlab-v01 gitlab]# grep -r -l "exception" /var/log/gitlab/\n/var/log/gitlab/gitlab-rails/production_json.log\n/var/log/gitlab/gitlab-rails/exceptions_json.log\n/var/log/gitlab/sidekiq/current\n\n{"method":"GET","path":"/frontend","format":"html","controller":"ProjectsController","action":"show","status":500,"time":"2021-05-11T06:16:37.525Z","params":[{"key":"namespace_id","value":"XXXX"},{"key":"id","value":"test-frontend"}],"remote_ip":"172.16.200.106","user_id":5,"username":"yue.liu","ua":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36","correlation_id":"SjP5M2qxjT2","meta.user":"yue.liu","meta.project":"frontend","meta.root_namespace":"test","meta.caller_id":"ProjectsController#show","meta.feature_category":"projects","gitaly_calls":8,"gitaly_duration_s":0.039444,"redis_calls":26,"redis_duration_s":0.008223,"redis_read_bytes":3442,"redis_write_bytes":3001,"redis_cache_calls":25,"redis_cache_duration_s":0.007496,"redis_cache_read_bytes":3259,"redis_cache_write_bytes":1471,"redis_shared_state_calls":1,"redis_shared_state_duration_s":0.000727,"redis_shared_state_read_bytes":183,"redis_shared_state_write_bytes":1530,"queue_duration_s":0.004365,"cpu_s":0.18,"exception.class":"ActionView::Template::Error","exception.message":"7:permission denied. debug_error_string:{\\"created\\":\\"@1620713797.523463298\\",\\"description\\":\\"Error received from peer ipv4:X.X.X.162:2305\\",\\"file\\":\\"src/core/lib/surface/call.cc\\",\\"file_line\\":1055,\\"grpc_message\\":\\"permission denied\\",\\"grpc_status\\":7}","exception.backtrace":[],"db_duration_s":0.02671,"view_duration_s":0.0,"duration_s":0.20744,"db_count":45,"db_write_count":0,"db_cached_count":7}\n')])])]),a("p",[e._v("既然 Error received from peer ipv4:X.X.X.162:2305，那就继续看看Praefect")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('ssh root@PraefectServer\n\ngitlab-ctl tail\n==> /var/log/gitlab/praefect/current <==\n{"correlation_id":"pFeuwxhtCj9","error":"rpc error: code = PermissionDenied desc = permission denied","grpc.code":"PermissionDenied","grpc.meta.auth_version":"v2","grpc.meta.client_name":"gitlab-web","grpc.meta.deadline_type":"regular","grpc.method":"FindCommit","grpc.request.deadline":"2021-05-11T15:05:23+08:00","grpc.service":"gitaly.CommitService","grpc.start_time":"2021-05-11T15:04:54+08:00","grpc.time_ms":0.182,"level":"warning","msg":"finished streaming call with code PermissionDenied","peer.address":"X.X.X.160:39862","pid":30377,"span.kind":"server","system":"grpc","time":"2021-05-11T15:04:54.334Z"}\n\n')])])]),a("p",[e._v("虽然这里没有提gitaly，还是确认下")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('ssh root@X.X.X.164\ngitlab-ctl tail\n\n==> /var/log/gitlab/gitaly/gitaly_hooks.log <==\ntime="2021-01-09T07:32:48Z" level=fatal msg="error when receiving data for \\"reference-transaction\\": rpc error: code = Internal desc = error voting on transaction: error voting on transaction: transaction was aborted"\ntime="2021-01-09T07:33:24Z" level=fatal msg="error when receiving data for \\"reference-transaction\\": rpc error: code = Internal desc = error voting on transaction: error voting on transaction: transaction was aborted"\ntime="2021-01-10T16:14:12Z" level=fatal msg="error when receiving data for \\"reference-transaction\\": stdin send error: EOF"\n\n==> /var/log/gitlab/logrotate/state <==\n\n==> /var/log/gitlab/logrotate/current <==\n2021-05-10_16:22:45.32977 error: error opening /var/log/gitlab/gitlab-shell//gitlab-shell.log: Permission denied\n\n注意时间，前面的是很久之前的问题，直接忽略，然后最新的是这个文件的权限问题，\nchown git:root /var/log/gitlab/gitlab-shell/gitlab-shell.log \n当然这里不是问题来源\n')])])]),a("p",[e._v("最后根据最开始gitlab-server上的")]),e._v(" "),a("p",[a("code",[e._v("permission GetInfoRefsHandler: error copying gitaly response")])]),e._v(" "),a("p",[e._v("搜索到https://docs.gitlab.com/ee/administration/gitaly/ 的 Permission denied errors appearing in Gitaly or Praefect logs when accessing repositories 部分，可以基本上确定是 clock drift问题（因为我很确定没有更改过任何token配置以及用户名密码都是对的）")]),e._v(" "),a("p",[e._v("马后炮：实际上，根据前面Praefect的日志信息：")]),e._v(" "),a("p",[a("code",[e._v('"msg":"finished streaming call with code PermissionDenied"')])]),e._v(" "),a("p",[e._v("就也可以找到https://docs.gitlab.com/ee/administration/gitaly/ 上面的答案")]),e._v(" "),a("h3",{attrs:{id:"troubleshooting-ldap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#troubleshooting-ldap"}},[e._v("#")]),e._v(" troubleshooting ldap")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("sudo gitlab-rake gitlab:ldap:check\n\nBy default, the task returns a sample of 100 LDAP users. Change this limit by passing a number to the check task:\n\nsudo gitlab-rake gitlab:ldap:check[50]\n\nsudo gitlab-rake gitlab:ldap:group_sync\n\n")])])]),a("p",[e._v("https://docs.gitlab.com/ee/administration/auth/ldap/ldap-troubleshooting.html")]),e._v(" "),a("h2",{attrs:{id:"appendix"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#appendix"}},[e._v("#")]),e._v(" Appendix")]),e._v(" "),a("p",[e._v("防火墙状态：")]),e._v(" "),a("p",[e._v("sudo firewall-cmd --list-all")]),e._v(" "),a("h3",{attrs:{id:"gitlab-ctl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-ctl"}},[e._v("#")]),e._v(" gitlab-ctl")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[liuyue@vm-cicd-v02 ~]$ gitlab-ctl help\nomnibus-ctl: command (subcommand)\ncheck-config\n  Check if there are any configuration in gitlab.rb that is removed in specified version\ndeploy-page\n  Put up the deploy page\ndiff-config\n  Compare the user configuration with package available configuration\nget-redis-master\n  Get connection details to Redis master\nprometheus-upgrade\n  Upgrade the Prometheus data to the latest supported version\nremove-accounts\n  Delete *all* users and groups used by this package\nreset-grafana\n  Reset Grafana instance to its initial state by removing the data directory\nset-grafana-password\n  Reset admin password for Grafana\nupgrade\n  Run migrations after a package upgrade\nGeneral Commands:\n  cleanse\n    Delete *all* gitlab data, and start from scratch.\n  help\n    Print this help message.\n  reconfigure\n    Reconfigure the application.\n  show-config\n    Show the configuration that would be generated by reconfigure.\n  uninstall\n    Kill all processes and uninstall the process supervisor (data will be preserved).\nService Management Commands:\n  graceful-kill\n    Attempt a graceful stop, then SIGKILL the entire process group.\n  hup\n    Send the services a HUP.\n  int\n    Send the services an INT.\n  kill\n    Send the services a KILL.\n  once\n    Start the services if they are down. Do not restart them if they stop.\n  restart\n    Stop the services if they are running, then start them again.\n  service-list\n    List all the services (enabled services appear with a *.)\n  start\n    Start services if they are down, and restart them if they stop.\n  status\n    Show the status of all the services.\n  stop\n    Stop the services, and do not restart them.\n  tail\n    Watch the service logs of all enabled services.\n  term\n    Send the services a TERM.\n  usr1\n    Send the services a USR1.\n  usr2\n    Send the services a USR2.\nBackup Commands:\n  backup-etc\n    Backup GitLab configuration [accepts directory path]\nLet's Encrypt Commands:\n  renew-le-certs\n    Renew the existing Let's Encrypt certificates\nDatabase Commands:\n  pg-password-md5\n    Generate MD5 Hash of user password in PostgreSQL format\n  pg-upgrade\n    Upgrade the PostgreSQL DB to the latest supported version\n  revert-pg-upgrade\n    Run this to revert to the previous version of the database\n  set-replication-password\n    Set database replication password\nContainer Registry Commands:\n  registry-garbage-collect\n    Run Container Registry garbage collection.\n")])])]),a("h3",{attrs:{id:"gitlab-rails"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-rails"}},[e._v("#")]),e._v(" gitlab-rails")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('[liuyue@vm-cicd-v02 opt]$ sudo gitlab-rails help\n[sudo] password for liuyue:\nThe most common rails commands are:\n generate     Generate new code (short-cut alias: "g")\n console      Start the Rails console (short-cut alias: "c")\n server       Start the Rails server (short-cut alias: "s")\n test         Run tests except system tests (short-cut alias: "t")\n test:system  Run system tests\n dbconsole    Start a console for the database specified in config/database.yml\n              (short-cut alias: "db")\n\n new          Create a new Rails application. "rails new my_app" creates a\n              new application called MyApp in "./my_app"\n\n\nAll commands can be run with -h (or --help) for more information.\nIn addition to those commands, there are:\n\n--------------------------------------------------------------------------------\n GitLab:       13.0.7 (bcfbac449a7) FOSS\n GitLab Shell: 13.2.0\n PostgreSQL:   11.7\n--------------------------------------------------------------------------------\n  about\n  acts_as_taggable_on_engine:install:migrations\n  acts_as_taggable_on_engine:tag_names:collate_bin\n  acts_as_taggable_on_engine:tag_names:collate_ci\n  app:template\n  app:update\n  assets:clean[keep]\n  assets:clobber\n  assets:environment\n  assets:precompile                                              \nbrakeman                                                       \ncache:clear:redis                                              \ncache_digests:dependencies                                     \ncache_digests:nested_dependencies                              \nci:cleanup:builds                                              \nclean                                                          \nclobber                                                        \nconfig_lint                                                    \ncredentials:edit                                               \ncredentials:show                                               \ndanger_local                                                   \ndb:create                                                      \ndb:drop                                                        \ndb:environment:set                                             \ndb:fixtures:load                                               \ndb:load_config                                                 \ndb:migrate                                                     \ndb:migrate:status                                              \ndb:obsolete_ignored_columns                                    \ndb:prepare                                                     \ndb:rollback                                                    \ndb:schema:cache:clear                                          \ndb:schema:cache:dump                                           \ndb:schema:dump                                                 \ndb:schema:load                                                 \ndb:seed                                                        \ndb:seed:replant                                                \ndb:seed_fu                                                     \ndb:setup                                                       \ndb:structure:dump                                              \ndb:structure:load                                              \ndb:system:change                                               \ndb:version                                                     \ndestroy                                                        \ndev:cache                                                      \ndev:load                                                       \ndev:setup                                                      \ndowntime_check                                                 \nencrypted:edit                                                 \nencrypted:show                                                 \nfile_hooks:validate\n  gemojione:aliases\n  gemojione:install_assets\n  gettext:add_language[language]\n  gettext:find\n  gettext:lint\n  gettext:pack\n  gettext:po_to_json\n  gettext:regenerate\n  gettext:store_model_attributes\n  gitlab:app:check\n  gitlab:artifacts:check\n  gitlab:artifacts:migrate\n  gitlab:assets:clean\n  gitlab:assets:compile\n  gitlab:assets:compile_webpack_if_needed\n  gitlab:assets:fix_urls\n  gitlab:assets:purge\n  gitlab:assets:purge_modules\n  gitlab:assets:vendor\n  gitlab:backup:create\n  gitlab:backup:restore\n  gitlab:check\n  gitlab:cleanup:block_removed_ldap_users\n  gitlab:cleanup:moved\n  gitlab:cleanup:orphan_job_artifact_files\n  gitlab:cleanup:orphan_lfs_file_references\n  gitlab:cleanup:orphan_lfs_files\n  gitlab:cleanup:project_uploads\n  gitlab:cleanup:remote_upload_files\n  gitlab:cleanup:sessions:active_sessions_lookup_keys\n  gitlab:db:clean_structure_sql\n  gitlab:db:composite_primary_keys_add\n  gitlab:db:composite_primary_keys_drop\n  gitlab:db:configure\n  gitlab:db:downtime_check[ref]\n  gitlab:db:drop_tables\n  gitlab:db:mark_migration_complete[version]\n  gitlab:db:setup_ee\n   gitlab:env:info\n  gitlab:exclusive_lease:clear[scope]\n  gitlab:features:enable_rugged\n  gitlab:generate_sample_prometheus_data[environment_id]\n  gitlab:git:fsck\n  gitlab:gitaly:check\n  gitlab:gitaly:install[dir,storage_path,repo]\n  gitlab:gitlab_shell:check\n  gitlab:import:all_users_to_all_groups\n  gitlab:import:all_users_to_all_projects\n  gitlab:import:repos[import_path]\n  gitlab:import:user_to_groups[email]\n  gitlab:import:user_to_projects[email]\n  gitlab:import_export:bump_version\n  gitlab:import_export:data\n  gitlab:import_export:export[username,namespace_path,project_path,archive_path]\n  gitlab:import_export:import[username,namespace_path,project_path,archive_path]\n  gitlab:import_export:version\n  gitlab:incoming_email:check\n  gitlab:ldap:rename_provider[old_provider,new_provider]\n  gitlab:lfs:check\n  gitlab:lfs:migrate\n  gitlab:orphans:check\n  gitlab:orphans:check_namespaces\n  gitlab:orphans:check_repositories\n  gitlab:praefect:replicas[project_id]\n  gitlab:seed:group_seed[subgroups_depth,username]\n  gitlab:seed:issues[project_full_path,backfill_weeks,average_issues_per_week]\n  gitlab:setup\n  gitlab:shell:build_missing_projects\n  gitlab:shell:install[repo]\n  gitlab:shell:setup\n  gitlab:sidekiq:check\n  gitlab:snippets:list_non_migrated\n  gitlab:snippets:migrate[ids]\n  gitlab:snippets:migration_status\n  gitlab:storage:hashed_attachments\n  gitlab:storage:hashed_projects\n  gitlab:storage:legacy_attachments\n  gitlab:storage:legacy_projects\n  gitlab:storage:list_hashed_attachments\n  gitlab:storage:list_hashed_projects\n   gitlab:storage:list_legacy_attachments\n  gitlab:storage:list_legacy_projects\n  gitlab:storage:migrate_to_hashed\n  gitlab:storage:rollback_to_legacy\n  gitlab:tcp_check[host,port]\n  gitlab:test\n  gitlab:two_factor:disable_for_all_users\n  gitlab:two_factor:rotate_key:apply\n  gitlab:two_factor:rotate_key:rollback\n  gitlab:update_project_templates\n  gitlab:update_templates\n  gitlab:uploads:check\n  gitlab:uploads:migrate:all\n  gitlab:uploads:migrate[uploader_class,model_class,mounted_as]\n  gitlab:uploads:migrate_to_local:all\n  gitlab:uploads:migrate_to_local[uploader_class,model_class,mounted_as]\n  gitlab:uploads:sanitize:remove_exif[start_id,stop_id,dry_run,sleep_time,uploader,since]\n  gitlab:web_hook:add\n  gitlab:web_hook:list\n  gitlab:web_hook:rm\n  gitlab:workhorse:install[dir,repo]\n  gitlab:x509:update_signatures\n  grape:path_helpers\n  grape:routes\n  hipchat:send[message]\n  import:github[token,gitlab_username,project_path]\n  initializers\n  jira:generate_consumer_key\n  jira:generate_public_cert\n  log:clear\n  metrics:setup_common_metrics\n  middleware\n  migrate_iids\n  notes\n  postgresql_md5_hash\n  restart\n  routes\n  runner\n  secret\n  secrets:edit\n  secrets:setup\n  secrets:show\n  setup\n  stats\n  test:db\n  time:zones[country_or_offset]\n  tmp:clear\n  tmp:create\n  tokens:reset_all_email\n  tokens:reset_all_feed\n  version\n  webpack:compile\n  yarn\n  yarn:available\n  yarn:check\n  yarn:clobber\n  yarn:install\n  zeitwerk:check\n')])])]),a("disqus")],1)}),[],!1,null,null,null);t.default=n.exports}}]);