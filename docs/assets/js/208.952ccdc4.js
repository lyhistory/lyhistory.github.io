(window.webpackJsonp=window.webpackJsonp||[]).push([[208],{637:function(e,t,n){"use strict";n.r(t);var s=n(65),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[n("a",{attrs:{href:"/docs/software"}},[e._v("回目录")]),e._v("  《mysql实用基础》")]),e._v(" "),n("h2",{attrs:{id:"_0-knowledge-base"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_0-knowledge-base"}},[e._v("#")]),e._v(" 0. Knowledge Base")]),e._v(" "),n("p",[e._v("default storage engine: "),n("strong",[e._v("InnoDB")])]),e._v(" "),n("p",[e._v("https://dev.mysql.com/doc/refman/5.6/en/innodb-introduction.html")]),e._v(" "),n("p",[e._v("other engine:")]),e._v(" "),n("p",[n("strong",[e._v("MyISAM")]),e._v(": https://kinsta.com/knowledgebase/convert-myisam-to-innodb/")]),e._v(" "),n("p",[n("strong",[e._v("ndb")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("mysqlshow -uroot -pP@ssw0rd -i DBNAME;\n")])])]),n("h2",{attrs:{id:"_1-setup"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-setup"}},[e._v("#")]),e._v(" 1.Setup")]),e._v(" "),n("h3",{attrs:{id:"_1-1-install-on-centos"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-install-on-centos"}},[e._v("#")]),e._v(" 1.1 Install on centos")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://dev.mysql.com/doc/mysql-installation-excerpt/8.0/en/linux-installation-rpm.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Installing MySQL on Linux Using RPM Packages from Oracle"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("strong",[e._v("Method 1: Using rpm")])]),e._v(" "),n("p",[n("strong",[e._v("Method 2: Using tar")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("tar -xvf mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar\n•\tmysql-community-client-5.7.32-1.el7.x86_64.rpm\n•\tmysql-community-common-5.7.32-1.el7.x86_64.rpm\n•\tmysql-community-libs-5.7.32-1.el7.x86_64.rpm\n•\tmysql-community-libs-compat-5.7.32-1.el7.x86_64.rpm\n•\tmysql-community-server-5.7.32-1.el7.x86_64.rpm\n\n\nyum localinstall mysql-community-{server,client,common,libs}-* mysql-5.*­\n\n?#Install error\nhttps://princetonits.com/centos7-mysql-install-fails-due-conflict-libmysqlclient/\nyum list installed mariadb\\*\nyum remove mariadb-libs.x86_64\n\nvim /etc/my.cnf\nBind-address:0.0.0.0\nservice mysqld stop/start\n")])])]),n("p",[e._v("Mysql默认密码：\n/var/log/mysqld.log\nA temporary password\nhttps://www.techietown.info/2017/08/mysql-default-root-password-on-centos7/")]),e._v(" "),n("p",[e._v("password policy:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("mysql -uroot -p\nSET PASSWORD = PASSWORD(‘1qaz#EDC’);\nSHOW VARIABLES LIKE 'validate_password%';\nSET GLOBAL validate_password_length = 6;\nSET GLOBAL validate_password_number_count = 0;\nSET PASSWORD = PASSWORD(‘123456’);\n")])])]),n("p",[e._v("create database:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("CREATE USER 'newuser'@'%' IDENTIFIED BY 'password';\nGRANT ALL PRIVILEGES ON dbname.* TO 'newuser'@'%' identified by 'password';\n#GRANT ALL PRIVILEGES ON *.* TO 'newuser'@'localhost';\nFLUSH PRIVILEGES;\n\nSHOW GRANTS FOR 'root'@'localhost';\nSELECT user, host FROM mysql.user;\nDROP USER ''@'localhost';\n\ncreate database dbname;\n\n")])])]),n("h3",{attrs:{id:"_1-2-install-on-windows"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-install-on-windows"}},[e._v("#")]),e._v(" 1.2 Install on windows")]),e._v(" "),n("p",[n("img",{attrs:{src:"/docs/docs_image/software/mysql/mysql01.png",alt:""}})]),e._v(" "),n("p",[e._v("Setup replication\nhttps://lyhistory.com/mysql_replication/#")]),e._v(" "),n("h3",{attrs:{id:"_1-3-client-tools"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-client-tools"}},[e._v("#")]),e._v(" 1.3 Client Tools")]),e._v(" "),n("p",[n("strong",[e._v("mysql built-in tools:")])]),e._v(" "),n("p",[e._v("mysql")]),e._v(" "),n("p",[e._v("mysqldump")]),e._v(" "),n("p",[e._v("mysqladmin")]),e._v(" "),n("p",[e._v("验证配置："),n("code",[e._v("mysqld --verbose --help | grep skip-slave-start")])]),e._v(" "),n("p",[e._v("mysqlbinlog:")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/66501464",target:"_blank",rel:"noopener noreferrer"}},[e._v("mysqlbinlog命令详解"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("--verbose\n--base64-output=DECODE-ROWS")]),e._v(" "),n("p",[e._v("https://dev.mysql.com/doc/refman/8.0/en/mysqlbinlog.html")]),e._v(" "),n("p",[e._v("https://www.zhihu.com/tardis/sogou/art/66501464")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("sudo mysqlbinlog --verbose --start-position=653218764 --stop-position=653263629 /var/lib/mysql/mysql-bin.000007 > check-mysql-bin.000007-14\n\n--verbose 在BINLOG '之后打印sql语句\n")])])]),n("p",[n("strong",[e._v("3rd party:")])]),e._v(" "),n("p",[e._v("http://sqlfiddle.com/")]),e._v(" "),n("p",[e._v("Dbeaver export mysql\nExport without data https://github.com/dbeaver/dbeaver/issues/2176")]),e._v(" "),n("p",[e._v("mysql workbench")]),e._v(" "),n("ul",[n("li",[e._v("DBeaver\n"),n("strong",[e._v("offline install")]),e._v("\nsettings:\nclass name: com.mysql.cj.jdbc.Driver\ntemplate: jdbc:mysql://{host}:{port}/{database}\nlibraries: "),n("a",{attrs:{href:"https://dev.mysql.com/downloads/connector/j/",target:"_blank",rel:"noopener noreferrer"}},[e._v("add postgres drivers"),n("OutboundLink")],1)])]),e._v(" "),n("h2",{attrs:{id:"_2-db-management"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-db-management"}},[e._v("#")]),e._v(" 2. DB Management")]),e._v(" "),n("h3",{attrs:{id:"_2-1-mysql-cli"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-mysql-cli"}},[e._v("#")]),e._v(" 2.1 mysql-cli")]),e._v(" "),n("p",[e._v("vertical format:")]),e._v(" "),n("p",[e._v("mysql> select * from table limit 1 \\G;")]),e._v(" "),n("p",[e._v("千万不要用双引号，尤其是password，所有的-u -p -e等等后面不要加空格！")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("mysql -uroot -p123456\nmysql --login-path=XXXX\n\n\nmysql_config_editor/login-path\nmysql_config_editor print --all\nmysql_config_editor set --login-path=host-rpl --host=localhost --port=3306 --user=replicator --password\n\n找回密码:\nmy_print_defaults -s client (需要安装mysql-server)\n或者可以\ndecrypt ~/.mylogin.cnf\nhttps://github.com/PyMySQL/myloginpath\n")])])]),n("p",[e._v("grep:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("pager grep ***\n\\n\nhttps://stackoverflow.com/questions/10177465/grep-in-mysql-cli-interpretter\n")])])]),n("h3",{attrs:{id:"_2-2-database-management"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-database-management"}},[e._v("#")]),e._v(" 2.2 database management")]),e._v(" "),n("h4",{attrs:{id:"house-keeping-disk-space-var-lib-mysql"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#house-keeping-disk-space-var-lib-mysql"}},[e._v("#")]),e._v(" house keeping disk space /var/lib/mysql/")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("[ERROR] Disk is full writing './mysql-bin.000099' (Errcode: 16062400 - No space left on device). Waiting for someone to free space...\n")])])]),n("p",[n("strong",[e._v("expire_logs_days")]),e._v("\nThe number of days for automatic binary log file removal. The default is 0, which means “no automatic removal.” Possible removals happen at startup and when the binary log is flushed. Log flushing occurs as indicated in Section 5.4, “MySQL Server Logs”.")]),e._v(" "),n("p",[e._v("To remove binary log files manually, use the PURGE BINARY LOGS statement. See Section 13.4.1.1, “PURGE BINARY LOGS Statement”.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("mysql> show variables like 'expire_logs_days';\n+------------------+-------+\n| Variable_name    | Value |\n+------------------+-------+\n| expire_logs_days | 0     |\n+------------------+-------+\n1 row in set (0.00 sec)\n\nmysql> show variables like 'max_binlog_size';\n+-----------------+------------+\n| Variable_name   | Value      |\n+-----------------+------------+\n| max_binlog_size | 1073741824 |\n+-----------------+------------+\n1 row in set (0.01 sec)\n\nFor the binary log, you can set the expire_logs_days system variable to expire binary log files automatically after a given number of days (see Section 5.1.7, “Server System Variables”). If you are using replication, you should set the variable no lower than the maximum number of days your replicas might lag behind the source. To remove binary logs on demand, use the PURGE BINARY LOGS statement (see Section 13.4.1.1, “PURGE BINARY LOGS Statement”).\n\nTo force MySQL to start using new log files, flush the logs. Log flushing occurs when you execute a FLUSH LOGS statement or a mysqladmin flush-logs, mysqladmin refresh, mysqldump --flush-logs, or mysqldump --master-data command. See Section 13.7.6.3, “FLUSH Statement”, Section 4.5.2, “mysqladmin — A MySQL Server Administration Program”, and Section 4.5.4, “mysqldump — A Database Backup Program”. In addition, the server flushes the binary log automatically when current binary log file size reaches the value of the max_binlog_size system variable.\n\n\n自动清除：\n[mysqld]\nexpire_logs_days=7\n\n> flush logs\n\n手动清除：\nManually prune bin log:\nmysql>purge binary logs to 'bin.XXX';\n\nmysql>purge binary logs before '2022-01-01 23:59:59';\n\n")])])]),n("h4",{attrs:{id:"users-permissions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#users-permissions"}},[e._v("#")]),e._v(" Users & Permissions")]),e._v(" "),n("p",[e._v("https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://stackoverflow.com/questions/11634084/are-users-user-and-userlocalhost-not-the-same",target:"_blank",rel:"noopener noreferrer"}},[e._v(" 'User'@'%' and 'User'@'localhost'"),n("OutboundLink")],1)]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("SELECT user,host FROM mysql.user;\n\nSHOW GRANTS FOR 'test'@'localhost';\nGRANT ALL PRIVILEGES ON *.* TO 'test'@'localhost' WITH GRANT OPTION;\nREVOKE ALL ON *.* FROM 'test'@'localhost';\nflush privileges;\n\nDROP USER 'test'@'localhost';\n")])])]),n("h4",{attrs:{id:"global-status"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#global-status"}},[e._v("#")]),e._v(" Global Status")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("show global variables like '%timeout'; \nshow variables like '%engine%';\nSHOW VARIABLES LIKE \"max_connections\";\nselect @@wait_timeout;\nshow variables like '%error%';\n\nshow global status like '%connection%';\nshow global status like '%errors%';\nshow global status like '%thread%';\nshow processlist;\n\nselect * from mysql.user;\n\nshow variables like \"%time_zone%\";\nshow processlist;\nselect substring_index(host,':' ,1) as client_ip,Command,Time from information_schema.processlist;\nshow variables like 'max_connections';\nSHOW GLOBAL STATUS LIKE \"Threads_connected\";\nshow variables like 'log_error';\n\nuse mysql;\nSHOW CREATE TABLE innodb_index_stats;\n")])])]),n("h4",{attrs:{id:"security-hardening"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#security-hardening"}},[e._v("#")]),e._v(" Security hardening")]),e._v(" "),n("p",[n("strong",[e._v("disable remote Access")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');\nFLUSH PRIVILEGES;\n\nmy.ini:\n[mysqld]\n.....\nskip-networking\n\nvim /etc/my.cnf\nBind-address:127.0.0.1\nservice mysqld stop/start\n")])])]),n("p",[n("strong",[e._v("turn off local_infile")])]),e._v(" "),n("p",[e._v("https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_local_infile\nhttps://dev.mysql.com/doc/refman/8.0/en/load-data-local-security.html")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("SHOW VARIABLES WHERE Variable_name = 'local_infile';\nSET GLOBAL local_infile = 'OFF';\n")])])]),n("p",[e._v("应该主要是禁用 select into lcoalfile, loaddata from localfile")]),e._v(" "),n("p",[n("strong",[e._v("disable log-raw")]),e._v("\n比如一些敏感的 statement 如果 log-raw=ON 则会日志记下original statement，否则会进行一定的修改掩盖")]),e._v(" "),n("p",[e._v("https://dev.mysql.com/doc/refman/5.7/en/server-options.html#option_mysqld_log-raw")]),e._v(" "),n("h4",{attrs:{id:"backup-restore"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#backup-restore"}},[e._v("#")]),e._v(" backup&restore")]),e._v(" "),n("p",[e._v("backup https://dev.mysql.com/doc/refman/5.7/en/mysqldump-sql-format.html")]),e._v(" "),n("p",[e._v("基本用法")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("--------------------------------------------------------------\n--- all db\n--------------------------------------------------------------\nmysqldump -uroot -p123456 --all-databases > mysqldump_20190524.sql\n\nmysqldump -uroot -p123456 <dbname> > mysqldump_20190524.sql\n\n--------------------------------------------------------------\n--- schema only\n--------------------------------------------------------------\nmysqldump -uXXX -pXXX --no-tablespaces --routines --events --no-data --set-gtid-purged=OFF DBName > schema.sql\n\nmysql -uXXX -pXXX  DBName < schema.sql\n\n--------------------------------------------------------------\n--- options\n--------------------------------------------------------------\nIf you used the **–set-gtid-purged=ON** option, you would see the value of the [Global Transaction Identifier’s](http://dev.mysql.com/doc/refman/5.6/en/replication-gtids-concepts.html) (GTID’s):\n--\n--GTID state at the beginning of the backup \n--\n\nSET @@GLOBAL.GTID_PURGED='';\n\n-routines\nInclude stored routines (procedures and functions) \n")])])]),n("p",[e._v("脚本：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('-----------------------------------------------------------------\n--- db_backup.sh\n-----------------------------------------------------------------\n#!/bin/bash\n# Shell script to backup MySQL database\n\n# Set variables\nV_USER="root"\t# DB_USERNAME\nV_PASS="123456"\t# DB_PASSWORD\n\nV_DBS="db1\ndb2"\n\nV_DEST="/opt/backup/" # Backup Dest directory\nV_DAYS=365 # How many days old files must be to be removed\n\n# Linux bin paths\nMYSQL="$(which mysql)"\nMYSQLDUMP="$(which mysqldump)"\nGZIP="$(which gzip)"\n\n# Create Backup sub-directories\nNOW="$(date +"%Y%m%d")"\nMBD="$V_DEST/$NOW/mysql"\ninstall -d $MBD\n\n\n# Archive database dumps\nfor db in $V_DBS\ndo\n    FILE="$MBD/$db.sql"\n    echo "Start to backup $db ...."\n    $MYSQLDUMP -u$V_USER -p$V_PASS $db > $FILE\n    echo "Done!"\ndone\n\n# Archive the directory, send mail and cleanup\ncd $V_DEST\ntar -cf $NOW.tar $NOW\n$GZIP -9 $NOW.tar\n\necho "MySQL backup is completed! Backup name is $NOW.tar.gz"\n#echo "MySQL backup is completed! Backup name is $NOW.tar.gz" | mail -s "MySQL backup" $EMAIL\nrm -rf $NOW\n\n# Remove old files\nfind $V_DEST -mtime +$V_DAYS -exec rm -f {} \\;\n\n-----------------------------------------------------------------\n--- db_restore.sh\n-----------------------------------------------------------------\n#!/bin/bash - \n# Shell script to restore MySQL database\n\n# Set Variables\nV_USER="root"\nV_SOURCE="/opt/backup/"\n\nMYSQL="$(which mysql)"\nMYSQLADMIN="$(which mysqladmin)"\n\npushd ${V_SOURCE} &> /dev/null\n\nif [ $# -eq 0 ]\n  then\n    echo "Please speicifed the date, USAGE:./db_restore 20200101"\n    exit 0\nfi\n\n# Look for sql.gz files:\nif [ "$(ls -A $1.tar.gz 2> /dev/null)" ]  ; then\n  echo "sql.gz files found extracting..."\n  tar -zxvf $1.tar.gz\nelse\n  echo "target file $1.tar.gz not found in ${V_SOURCE}"\n  exit 0\nfi\npushd ${V_SOURCE}/$1/mysql &> /dev/null\n# Exit when folder doesn\'t have .sql files:\nif [ "$(ls -A *.sql 2> /dev/null | wc -l)" == 0 ]; then\n  echo "No *.sql files found in $(pwd)"\n  exit 0\nfi\n\n# Read mysql root password:\necho -n "Type mysql $V_USER password: "\nread -s V_PASS\necho ""\n\n\n# Get all database list first\nDBS="$($MYSQL -u$V_USER -p$V_PASS -Bse \'show databases\')"\n\n# Ignore list, won\'t restore the following list of DB:\nSKIP="db2"\n\n\n# Restore DBs:\nfor filename in *.sql\ndo\n  dbname=${filename%.sql}\n  \n  skipdb=-1\n  if [ "$SKIP" != "" ]; then\n    for ignore in $SKIP\n    do\n        [ "$dbname" == "$ignore" ] && skipdb=1 || :\n        \n    done\n  fi      \n\n  # If not in ignore list, restore:\n  if [ "$skipdb" == "-1" ] ; then\n  \n    skip_create=-1\n    for existing in $DBS\n    do      \n      [ "$dbname" == "$existing" ] && skip_create=1 || :\n    done\n  \n    if [ "$skip_create" ==  "1" ] ; then \n      echo "Database: $dbname already exist, skiping create"\n    else\n      echo "Creating DB: $dbname"\n      #mysqladmin create $dbname -u $V_USER -p$V_PASS\n    fi\n    \n    echo "Importing DB: $dbname from $filename"\n    #mysql $dbname < $filename -u $V_USER -p$V_PASS\n  fi    \ndone\n\n')])])]),n("h4",{attrs:{id:"upgrade"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#upgrade"}},[e._v("#")]),e._v(" upgrade")]),e._v(" "),n("p",[e._v("EXAMPLE: from 5.7.18 to 5.7.26")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('SHOW VARIABLES WHERE Variable_name LIKE "version";\n\nhttps://dev.mysql.com/doc/refman/5.7/en/upgrading.html\nyum list installed | grep "^mysql"\n\n$ yum list installed | grep "^mysql"\nRepodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fast\nmysql-community-client.x86_64         5.7.18-1.el7                @/mysql-community-client-5.7.18-1.el7.x86_64\nmysql-community-common.x86_64         5.7.18-1.el7                @/mysql-community-common-5.7.18-1.el7.x86_64\nmysql-community-libs.x86_64           5.7.18-1.el7                @/mysql-community-libs-5.7.18-1.el7.x86_64\nmysql-community-server.x86_64         5.7.18-1.el7                @/mysql-community-server-5.7.18-1.el7.x86_64\n\n$ find / -name "mysql" -o -name "mysqld" -type f -print 2>/dev/null\n/usr/sbin/mysqld\n$ find / -name "mysql" -type d -print 2>/dev/null\n/var/lib/mysql\n/usr/lib64/mysql\n/usr/share/mysql\n\n')])])]),n("p",[e._v("Upgrading MySQL with Directly-Downloaded RPM Packages\nhttps://dev.mysql.com/doc/refman/5.7/en/updating-direct-rpms.html\nhttps://dev.mysql.com/doc/refman/5.7/en/linux-installation-rpm.html")]),e._v(" "),n("p",[e._v("https://dev.mysql.com/downloads/mysql/")]),e._v(" "),n("p",[e._v("??rpm -qpl mysql-community-server-5.7.26-1.el7.x86_64.rpm\nFor Red Hat Enterprise Linux/Oracle Linux/CentOS systems:\nyum install mysql-community-{server,client,common,libs}-* mysql-5.*­")]),e._v(" "),n("p",[e._v("For Red Hat Enterprise Linux, Oracle Linux, CentOS, and Fedora systems, use the following command to start MySQL:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("service mysqld start\nmysql-upgrade -uroot -pPassword //[Warning] InnoDB: Table mysql/innodb_table_stats has length mismatch in the column name table_name.  Please run mysql_upgrade\n")])])]),n("p",[e._v("Once the server restarts, run mysql_upgrade to check and possibly resolve any incompatibilities between the old data and the upgraded software. mysql_upgrade also performs other functions; see Section 4.4.7, “mysql_upgrade — Check and Upgrade MySQL Tables” for details.\nIf you use replication, review Section 16.4.3, “Upgrading a Replication Setup”.\nwarning Table mysql/innodb_table_stats has length mismatch in the column name table_name. Please run mysql_upgrade\nhttps://dev.mysql.com/doc/relnotes/mysql/5.7/en/news-5-7-23.html")]),e._v(" "),n("p",[e._v("Installation of previous versions of MySQL using older packages might have created a configuration file named /usr/my.cnf. It is highly recommended that you examine the contents of the file and migrate the desired settings inside to the file /etc/my.cnf file, then remove /usr/my.cnf.")]),e._v(" "),n("h4",{attrs:{id:"plugins"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#plugins"}},[e._v("#")]),e._v(" plugins")]),e._v(" "),n("p",[e._v("https://dev.mysql.com/doc/refman/5.7/en/server-plugins.html\nhttps://dev.mysql.com/doc/refman/5.7/en/plugin-loading.html#server-plugin-installing")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("SHOW VARIABLES WHERE Variable_name = 'plugin_dir';\n\t/usr/lib64/mysql/plugin/\nSELECT * FROM INFORMATION_SCHEMA.PLUGINS\\G \nSELECT * FROM mysql.plugin;\nINSTALL PLUGIN myplugin SONAME 'validate_password.so';\n\nSELECT PLUGIN_NAME, PLUGIN_STATUS\n       FROM INFORMATION_SCHEMA.PLUGINS\n       WHERE PLUGIN_NAME LIKE 'validate%';\n\t   \nThe following lines should be present in the global configuration:\nplugin-load=validate_password.so\nvalidate-password=FORCE_PLUS_PERMANENT\nhttps://dev.mysql.com/doc/refman/5.7/en/validate-password-installation.html\n\nvim /etc/my.cnf\n[mysqld]\nplugin-load-add=validate_password.so\nvalidate-password=FORCE_PLUS_PERMANENT\n")])])]),n("p",[e._v("If it is desired to prevent the server from running without the password-validation plugin, use --validate-password with a value of FORCE or FORCE_PLUS_PERMANENT to force server startup to fail if the plugin does not initialize successfully.")]),e._v(" "),n("p",[e._v("service mysqld start --validate-password=FORCE_PLUS_PERMANENT")]),e._v(" "),n("h2",{attrs:{id:"_4-sql"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-sql"}},[e._v("#")]),e._v(" 4. SQL")]),e._v(" "),n("h3",{attrs:{id:"basic"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#basic"}},[e._v("#")]),e._v(" Basic")]),e._v(" "),n("p",[e._v("a mysql db can have many schema,"),n("strong",[e._v("like a building have many rooms, and users can get access to different room, so schema can have more than one user.")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("SELECT DATE_FORMAT(date_add(date_column,INTERVAL 8 HOUR),'%b %d %Y %h %p'),COUNT(distinct(count_column))\nFROM db.table\nwhere date_add(date_column,INTERVAL 8 HOUR) between '2015-02-01 00:00:00' and '2015-03-01 00:00:00'\nGROUP BY DATE_FORMAT(date_column,'%b %d %Y %h %p')\norder by DATE_FORMAT(date_add(date_column,INTERVAL 8 HOUR),'%b %d %Y %h %p');\n")])])]),n("p",[e._v("CRUD")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("insert into phoenix.`program-slot`(duration,dateOfProgram,startTime,`weekly-schedule_id`,presenter_id,producer_id,program_id)\nselect duration,date_add(dateOfProgram,INTERVAL 2 DAY), IFNULL(date_add(startTime,INTERVAL 2 DAY),null) ,100,presenter_id,producer_id,program_id from phoenix.`program-slot` where `weekly-schedule_id` =3;\n\n")])])]),n("h3",{attrs:{id:"advance"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#advance"}},[e._v("#")]),e._v(" Advance")]),e._v(" "),n("p",[n("strong",[e._v("批量生成truncate")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('mysql -h\'HOST\' -u\'USERNAME\' -p\'PASSWORD\' -e\'SELECT CONCAT("TRUNCATE TABLE ",TABLE_NAME,";") FROM information_schema.TABLES WHERE TABLE_SCHEMA="db01" into outfile "/var/lib/mysql-files/truncate_db01.sql";\'\n\nSHOW VARIABLES LIKE "secure_file_priv" 查看能写到哪个目录\n')])])]),n("p",[n("strong",[e._v("Performance on index : when join a large table")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("bad:\nselect user.*, log.LoginTime\nfrom users user\nleft join login_log log on user.id=log.userid and log.LoginTime=(select max(LoginTime) from login_log where userid=log.userid and status='true');\ngood:\nselect user.*, log.LoginTime\nfrom users user\nleft join (\nselect max(LoginTime) LoginTime,userid from login_log\nwhere  status='true'\ngroup by userid) temp on temp.userid=user.userid;\n")])])]),n("p",[n("strong",[e._v("存储过程互相调用")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("DELIMITER $$\nCREATE DEFINER=`dbuser`@`%` PROCEDURE `PROCE1`(\nin _param varchar(50)\n)\nroot:BEGIN\ndeclare _count int;\nselect count(1) into _count from table where column=_param;\nif _count<>1 then\nselect -1 as result;\nleave root;\nend if;\ncall PROCE2(_param);\ndo something else\nselect 0 as result;\nEND\n\nDELIMITER $$\nCREATE DEFINER=`dbuser`@`%` PROCEDURE `PROCE2`(\nin _param int\n)\nBEGIN\nDECLARE done INT DEFAULT FALSE;\ndeclare _variable1 int;\ndeclare _variable2 decimal(10,2);\ndeclare resultCur cursor for select column1,column2 from table where column=_param;\nDECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;\nDECLARE exit handler for sqlexception\nBEGIN\nROLLBACK;\nget diagnostics condition 1 @p1 = MESSAGE_TEXT;\nselect -1 as result, @p1 as message from dual;\nEND;\nopen resultCur;\noperaLoop:Loop\nfetch resultCur into _variable1,_variable2;\nif done then\nleave operaLoop;\nend if;\ndo something...\nend Loop;\nclose resultCur;\nEND\n\n")])])]),n("p",[n("strong",[e._v("Multiple cursors in mysql stored procedure")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('DROP PROCEDURE IF EXISTS `multipleCursorsAtOne`;\nDELIMITER $$\nCREATE PROCEDURE `multipleCursorsAtOne`()\nBEGIN\nDROP TABLE IF EXISTS userNames;\nCREATE TEMPORARY TABLE userNames\n(userName varchar(200) NOT NULL);\nBEGIN\nDECLARE done BOOLEAN DEFAULT false;\nDECLARE p_first_name VARCHAR(200);\nDECLARE cursor_a CURSOR FOR SELECT user_name FROM user_info LIMIT 1,3;\nDECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;\nOPEN cursor_a;\ncursor_a_loop: LOOP\nFETCH cursor_a INTO p_first_name;\nIF done THEN\nLEAVE cursor_a_loop;\nEND IF;\n-- cursor loop statements\nIF p_first_name IS NOT NULL AND p_first_name <> "" THEN\nINSERT INTO userNames(userName) VALUES(p_first_name);\nEND IF;\nEND LOOP;\nCLOSE cursor_a;\nEND;\nBEGIN\nDECLARE done BOOLEAN DEFAULT false;\nDECLARE p_first_name VARCHAR(200);\nDECLARE cursor_a CURSOR FOR SELECT user_name FROM user_info LIMIT 4,3;\nDECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;\nOPEN cursor_a;\ncursor_a_loop: LOOP\nFETCH cursor_a INTO p_first_name;\nIF done THEN\nLEAVE cursor_a_loop;\nEND IF;\n-- cursor loop statements\nIF p_first_name IS NOT NULL AND p_first_name <> "" THEN\nINSERT INTO userNames(userName) VALUES(p_first_name);\nEND IF;\nEND LOOP;\nCLOSE cursor_a;\nEND;\nSELECT * FROM userNames;\nEND\n')])])]),n("p",[n("strong",[e._v("Recursive query")])]),e._v(" "),n("p",[e._v("就是针对存在parent id的存在层级关系的表")]),e._v(" "),n("p",[e._v("Hierarchical data in MySQL: parents and children in one query")]),e._v(" "),n("p",[e._v("https://stackoverflow.com/questions/20215744/how-to-create-a-mysql-hierarchical-recursive-query")]),e._v(" "),n("p",[e._v("Managing Hierarchical Data in MySQL")]),e._v(" "),n("p",[e._v("https://www.mysqltutorial.org/mysql-adjacency-list-tree/")]),e._v(" "),n("p",[n("strong",[e._v("Partition")])]),e._v(" "),n("p",[e._v("mysql> show create table TABLE_NAME\\G;")]),e._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("createPartition")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("String")]),e._v(" theDate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("String")]),e._v(" sql "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("\"SELECT count(partition_name) FROM INFORMATION_SCHEMA.PARTITIONS WHERE  TABLE_SCHEMA =SCHEMA() AND TABLE_NAME='t_xxx';\"")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Integer")]),e._v(" result "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" jdbcTemplate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("queryForObject")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("sql"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Integer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("result "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n            sql "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("format")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("\"ALTER TABLE t_xxx PARTITION BY LIST COLUMNS(CreateDate) (PARTITION p%s VALUES IN ('%s'));\"")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" theDate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" theDate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n            jdbcTemplate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("execute")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("sql"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("else")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n            sql "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("format")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("\"SELECT count(partition_name) FROM INFORMATION_SCHEMA.PARTITIONS WHERE  TABLE_SCHEMA =SCHEMA() AND TABLE_NAME='t_xxx' AND PARTITION_NAME = 'p%s' \"")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" theDate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n            "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Integer")]),e._v(" count "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" jdbcTemplate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("queryForObject")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("sql"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Integer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("count "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n                sql "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("format")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("\"ALTER TABLE t_xxx ADD PARTITION(PARTITION p%s VALUES IN ('%s'));\"")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" theDate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" theDate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n                jdbcTemplate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("execute")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("sql"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),n("h2",{attrs:{id:"_5-ha"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-ha"}},[e._v("#")]),e._v(" 5. HA")]),e._v(" "),n("h3",{attrs:{id:"理论"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#理论"}},[e._v("#")]),e._v(" 理论")]),e._v(" "),n("p",[e._v("https://dev.mysql.com/doc/refman/8.0/en/replication.html")]),e._v(" "),n("p",[e._v("In MySQL, replication involves the source database writing down every  change made to the data held within one or more databases in a special  file known as the "),n("em",[e._v("binary log")])]),e._v(" "),n("p",[e._v("Once the replica instance has been initialized, it creates two threaded processes:")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("master-binary log=>slave-relay log")]),e._v(" "),n("p",[e._v("The first, called the "),n("em",[e._v("IO thread")]),e._v(", connects to the source MySQL instance and reads the binary log events  line by line, and then copies them over to a local file on the replica’s server called the "),n("em",[e._v("relay log")]),e._v(".")])]),e._v(" "),n("li",[n("p",[e._v("slave-relay log=>slave db changes")]),e._v(" "),n("p",[e._v("The second thread, called the "),n("em",[e._v("SQL thread")]),e._v(", reads events from the relay log and then applies them to the replica instance as fast as possible.")])])]),e._v(" "),n("h3",{attrs:{id:"两种模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#两种模式"}},[e._v("#")]),e._v(" 两种模式")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("基于binary log, "),n("em",[e._v("binary log file position-based replication")])]),e._v(" "),n("p",[e._v("When you turn a MySQL instance into a replica using this method, you  must provide it with a set of binary log coordinates. These consist of  the name of the binary log file on the source which the replica must  read and a specific position within that file which represents the first database event the replica should copy to its own MySQL instance.")]),e._v(" "),n("p",[e._v("These coordinates are important since replicas receive a copy of their  source’s entire binary log and, without the right coordinates, they will begin replicating every database event recorded within it. This can  lead to problems if you only want to replicate data after a certain  point in time or only want to replicate a subset of the source’s data.")]),e._v(" "),n("p",[e._v("Binary log file position-based replication is viable for many use cases, but this method can become clunky in more complex setups.")])]),e._v(" "),n("li",[n("p",[e._v("基于 global transaction identifier GTID [starting with version 5.6 and above]")]),e._v(" "),n("p",[e._v("GTID stands for global transaction identifier (GTID) which uniquely  identifies a transaction committed on the server of origin (master). A  unique GTID is created when any transaction occurs. The GTID is not  just unique to the server on which it originates, but also across the  servers in any given replication setup. In other words, each transaction is mapped to a GTID.")]),e._v(" "),n("p",[e._v("MySQL GTIDs are displayed as a pair of coordinates, separated by a colon character (😃 "),n("code",[e._v("GTID = source_id(noramlly server uuid):transaction_id(sequential integer,start from 1, representing the order a transaction was committed on the source)")])]),e._v(" "),n("p",[e._v("server uuid: /var/lib/mysql/auto.cnf")]),e._v(" "),n("p",[e._v("GTID Set")]),e._v(" "),n("p",[e._v("rather than just a single transaction id, an interval is given a range of transactions like "),n("code",[e._v("baecf819-a6a5-11e9-a78d-566f18fa0007:1-699")]),e._v(" or")]),e._v(" "),n("p",[e._v("two ranges with a gap "),n("code",[e._v("baecf819-a6a5-11e9-a78d-566f18fa0007:1-699, 702-900")])]),e._v(" "),n("ul",[n("li",[e._v("Retrieved _Gtid_Set:\n"),n("ul",[n("li",[e._v("All GTIDs received from the master")]),e._v(" "),n("li",[e._v("Resets on:\n"),n("ul",[n("li",[e._v("CHANGE MASTER")]),e._v(" "),n("li",[e._v("RESET SLAVE")]),e._v(" "),n("li",[e._v("server restart(if relay-log-recovery is on)")])])])])]),e._v(" "),n("li",[e._v("Executed_Gtid_Set:\n"),n("ul",[n("li",[e._v("All GTIDs written to binary log")]),e._v(" "),n("li",[e._v("Same value seen in:\n"),n("ul",[n("li",[e._v("SHOW MASTER STATUS")]),e._v(" "),n("li",[e._v("SHOW SLAVE STATUS")]),e._v(" "),n("li",[e._v("show global variables like 'gtid_executed';")])])])])])]),e._v(" "),n("p",[e._v("This method involves creating a global transaction identifier (GTID)  for each transaction — or, an isolated piece of work performed by a  database — that the source MySQL instance executes.")]),e._v(" "),n("p",[e._v("The mechanics of transaction-based replication are similar to binary log file-based replication: whenever a database transaction occurs on the  source, MySQL assigns and records a GTID for the transaction in the  binary log file along with the transaction itself. The GTID and the  transaction are then transmitted to the source’s replicas for them to  process.")]),e._v(" "),n("p",[e._v("When the replication takes place, the slave makes use of the same  GTIDs, irrespective of whether it acts as a master for any other nodes  or not. With each transaction replication, the same GTIDs and  transaction numbers also come along from the master and the slave will  write these to the binlog if it’s configured to write its data events.")]),e._v(" "),n("p",[e._v("To ensure a smooth, consistent and fault-tolerant replication, the  slave will then inform the master of the GTIDs that were a part of the  execution, which helps master node identify if any transaction did not  take place. The master node then informs the slave to carry out the  left-over transactions and thereby ensures that data replication takes  place accurately.")]),e._v(" "),n("p",[e._v("MySQL’s transaction-based replication has a number of benefits over its  traditional replication method. For example, because both a source and  its replicas preserve GTIDs, if either the source or a replica encounter a transaction with a GTID that they have processed before they will  skip that transaction. This helps to ensure consistency between the  source and its replicas. Additionally, with transaction-based  replication replicas don’t need to know the binary log coordinates of  the next database event to process. This means that starting new  replicas or changing the order of replicas in a replication chain is far less complicated.")])])]),e._v(" "),n("h3",{attrs:{id:"相关权限"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#相关权限"}},[e._v("#")]),e._v(" 相关权限")]),e._v(" "),n("p",[e._v("REPLICATION CLIENT权限: replication user使用shell命令 SHOW MASTER STATUS, SHOW SLAVE STATUS和 SHOW BINARY LOGS来确定复制状态。")]),e._v(" "),n("p",[e._v("REPLICATION SLAVE权限: SLAVE 进行replication，使用 show slave hosts ，show binlog events;等命令；")]),e._v(" "),n("p",[e._v('假设想要在Slave上有权限运行"LOAD TABLE FROM MASTER" 或 "LOAD DATA FROM MASTER"语句的话，必须授予全局的 FILE 和 SELECT 权限：')]),e._v(" "),n("p",[e._v("RELOAD 权限：Reset slave: Access denied; you need (at least one of) the RELOAD privilege(s) for this operation")]),e._v(" "),n("p",[e._v("super权限：start slave，stop slave；")]),e._v(" "),n("h3",{attrs:{id:"replication-solution"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#replication-solution"}},[e._v("#")]),e._v(" Replication Solution")]),e._v(" "),n("p",[e._v("主机器需要允许从机器访问其3306端口")]),e._v(" "),n("h4",{attrs:{id:"主从-基于file-based-binary-log-replication"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#主从-基于file-based-binary-log-replication"}},[e._v("#")]),e._v(" 主从 - 基于file based / binary log replication")]),e._v(" "),n("p",[e._v("https://www.digitalocean.com/community/tutorials/how-to-set-up-replication-in-mysql")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("----------------------------------------------------------------------------\nstep 1: config master and slave /etc/my.cnf And restart:\n----------------------------------------------------------------------------\nMaster:\nserver-id=1\nlog-bin=mysql-bin #This defines the base name and location of MySQL’s binary log file,When commented out, as this directive is by default, binary logging is disabled. Your replica server must read the source’s binary log file so it knows when and how to replicate the source’s data\n\nbinlog_do_db          = include_database_name 需要复制的数据库\nbinlog_do_db          = db_1\nbinlog_do_db          = db_2\n\nreplicate-ignore-db = mysql  #忽略数据库，不需要复制\nreplicate-ignore-db = information_schema\nreplicate-ignore-db = performance_schema\nreplicate-ignore-db = sys\n\nSlave:\n[mysqld]\nserver-id=2\nlog_bin                 = /var/log/mysql/mysql-bin.log\nbinlog_do_db            =  跟master一致\nrelay-log               = /var/log/mysql/mysql-relay-bin.log\n\n> sudo systemctl restart mysqld\n\n----------------------------------------------------------------------------\nstep 2: on master, create and grant repl user\n----------------------------------------------------------------------------\n\ngood:\nmysql> CREATE USER 'replica_user'@'replica_server_ip' IDENTIFIED WITH mysql_native_password BY 'password';\n# Note that this command specifies that replica_user will use the mysql_native_password authentication plugin. It’s possible to instead use MySQL’s default authentication mechanism, caching_sha2_password, but this would require setting up an encrypted connection between the source and the replica. This kind of setup would be optimal for production environment: https://dev.mysql.com/doc/refman/8.0/en/replication-solutions-encrypted-connections.html\n\nbad: 任意ip都可以访问，不安全\nmysql> CREATE USER 'replica_user'@'%' IDENTIFIED BY '123456';\n\n\nmysql> GRANT REPLICATION SLAVE ON *.* TO 'replica_user'@'replica_server_ip';\n\n----------------------------------------------------------------------------\nstep 3: on master: Retrieving Binary Log Coordinates from the Source\n----------------------------------------------------------------------------\nTo make sure that no users change any data while you retrieve the coordinates, which could lead to problems, you’ll need to lock the database to prevent any clients from reading or writing data as you obtain the coordinates. \n\nmysql> FLUSH TABLES WITH READ LOCK;\nmysql> SHOW MASTER STATUS; # return the current status information for the source’s binary log files\n\nOutput\n+------------------+----------+--------------+------------------+-------------------+\n| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |\n+------------------+----------+--------------+------------------+-------------------+\n| mysql-bin.000001 |      899 | db           |                  |                   |\n+------------------+----------+--------------+------------------+-------------------+\n1 row in set (0.00 sec)\n\n输出的file和position即下面用到的MASTER_LOG_FILE和MASTER_LOG_POS\n\nsudo find / -name mysql-bin.000001\nmysqlbinlog /var/lib/mysql/mysql-bin.000001\n\n----------------------------------------------------------------------------\nstep 4: dump and import, If Your Source Has Existing Data to Migrate\n----------------------------------------------------------------------------\non master::\nIf you have data on your source MySQL instance that you want to migrate to your replicas, you can do so by creating a snapshot of the database with the mysqldump utility. However, your database should still be currently locked. If you make any new changes in the same window, the database will automatically unlock. Likewise, the tables will automatically unlock if you exit the client. \nFor this reason, you must open a new terminal window or tab on your local machine so you can create the database snapshot without unlocking MySQL.\n\n> mysqldump -u root db > db.sql\nor\n> mysqldump -u repl -p 123456 --all-databases --master-data > dbdump.db\n\n\nFollowing that you can close this terminal window or tab and return to your first one, which should still have the MySQL shell open, then:\nmysql> UNLOCK TABLES;\n\n\non slave:: import data\n> mysql -u root -p < dbdump.db\nor\nmysql> CREATE DATABASE db; \n> mysql db < /tmp/db.sql\n\n\n----------------------------------------------------------------------------\nstep 5: Slave: setting and start\n----------------------------------------------------------------------------\n\nmysql> CHANGE MASTER TO MASTER_HOST='source_server_ip',MASTER_PORT=3306,MASTER_USER='replica_user',MASTER_PASSWORD='password',MASTER_LOG_FILE='mysql-bin.000001',MASTER_LOG_POS=52113;\n\nmysql> START SLAVE;\n \nmysql> SHOW SLAVE STATUS\\G;\nMaster_Log_File:\t# source bin log\nRead_Master_Log_Pos: # source bin log position\nRelay_Log_File:\t\t# slave relay log\nRelay_Log_Pos: \t\t# salve relay log position\nRelay_Master_Log_File:\n        \n其中，Slave_IO_Running和Slave_SQL_Running均显示yes表示Replication工作正常，可通过其余参数来了解Replication的工作状态。\n\n\n\nNote: If your replica has an issue in connecting or replication stops unexpectedly, it may be that an event in the source’s binary log file is preventing replication. In such cases, you could run the SET GLOBAL SQL_SLAVE_SKIP_COUNTER command to skip a certain number of events following the binary log file position you defined in the previous command. This example only skips the first event:\nmysql> SET GLOBAL SQL_SLAVE_SKIP_COUNTER = 1;\n\nFollowing that, you’d need to start the replica again:\nmysql> START REPLICA;\n\n\n")])])]),n("h4",{attrs:{id:"主从-基于gtid-based-replication"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#主从-基于gtid-based-replication"}},[e._v("#")]),e._v(" 主从 - 基于GTID based replication")]),e._v(" "),n("p",[e._v("https://hevodata.com/learn/mysql-gtids-and-replication-set-up/")]),e._v(" "),n("p",[e._v("https://dev.mysql.com/doc/refman/5.7/en/replication-gtids-howto.html")]),e._v(" "),n("p",[e._v("gtid_executed：这个是已经执行过的所有的事务的GTID的一个系列串，也就是binary log里面已经落库的事务的序列号。这个参数是只读的，不能够进行设置。")]),e._v(" "),n("p",[e._v("gtid_purged：subsets of gtid_executed that are no longer in the binary logs 这个序列是指我们在binary log删除的事务的GTID的序列号。我们可以手动进行设置，方便我们做一些管理。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("----------------------------------------------------------------------------\nstep 1: lock master&slave\n----------------------------------------------------------------------------\non both master & slave:\nmysql> SET @@GLOBAL.read_only = ON;\nmysql> show global variables like 'read_only';\n这次跟前面的lock方法不同，注意**不会影响slave同步复制的功能**\n\nmysqladmin -uroot -p shutdown\n\n----------------------------------------------------------------------------\nstep 2: config master and slave /etc/my.cnf And restart:\n----------------------------------------------------------------------------\nmysqld --defaults-file=/etc/my.cnf --validate-config\n\nfor master: \nThe Master server needs to be started with GTID mode enabled by setting the gtid_mode variable to ON. It is also essential that the enforce_gtid_consistency variable is enabled to make sure that only the statements which are safe for MySQL GTIDs Replication are logged. \n[mysqld]\nserver-id=1\nlog-bin = mysql-bin\n#binlog_format = row\ngtid-mode=ON\nenforce-gtid-consistency=ON\n#read-only = ON #另一种方式设置readonly\n\n> systemctl restart mysqld\n\nfor slave:\n[mysqld]\nserver-id = 2\nlog-bin = mysql-bin\ngtid-mode=ON\nenforce-gtid-consistency=ON\nlog-slave-updates\n#read-only = ON #另一种方式设置readonly\n#relay-log = relay-log-server\nskip-slave-start #！！！！Important In addition, you should start replicas with the --skip-slave-start option before configuring the replica settings. Tells the replica server not to start the replication threads when the server starts. To start the threads later, use a START SLAVE statement. \n\n> systemctl restart mysqld\n----------------------------------------------------------------------------\nstep 3: on master create replicator user\n----------------------------------------------------------------------------\n\n> mysql -uroot -p\n\nmysql> DROP USER 'replicator'@'localhost';\n--- mysql> REVOKE ALL ON *.* FROM 'replicator'@'localhost';\n\n# replicator@localhost可以管理master本机\nmysql> CREATE USER replicator@localhost IDENTIFIED BY 'password';\nmysql> GRANT SUPER,RELOAD,REPLICATION SLAVE ON *.* TO 'replicator'@'localhost' IDENTIFIED BY 'password';\n\n# 'replicator'@'replication_server_ip'在slave机器上replication_server_ip远程连接管理master以及进行基本的复制（最低需要REPLICATION SLAVE权限）\nmysql> CREATE USER replicator@replication_server_ip IDENTIFIED BY 'password';\nmysql> GRANT SUPER,RELOAD,REPLICATION SLAVE ON *.* TO 'replicator'@'replication_server_ip' IDENTIFIED BY 'password';\n\nmysql> flush privileges;\n\nmysql_config_editor set --login-path=host-rpl --host=localhost --port=3306 --user=replicator --password\n\n----------------------------------------------------------------------------\n(no need) step 4: on master: Retrieving Binary Log Coordinates from the Source\n----------------------------------------------------------------------------\n\nmysql> show master status\nmysql> show global variables like 'gtid_executed';\n两者输出的gtid_executed应该是一样的\nselect * from mysql.gtid_executed;\n\nGTID = source_id(noramlly server uuid):transaction_id(sequential integer,start from 1, representing the order a transaction was committed on the source)\n\nmysqlbinlog /var/lib/mysql/mysql-bin.000001\n内容基本跟上面的file based replication的bin log一样，只不过多了：\n                    #210621 16:50:01 server id 2  end_log_pos 259 CRC32 0x7b8ba749  GTID    last_committed=0        sequence_number=1\n                    SET @@SESSION.GTID_NEXT= '878556a6-ff0e-11ea-bf92-566f18fa0008:3'/*!*/;\n                    # at 259\n----------------------------------------------------------------------------\nstep 5: dump and import, If Your Source Has Existing Data to Migrate\n----------------------------------------------------------------------------\n\n> mysqldump --all-databases -flush-privileges --single-transaction --flush-logs --triggers --routines --events -hex-blob --host=54.89.xx.xx --port=3306 --user=root  --password=XXXXXXXX > mysqlbackup_dump.sql\n# head -n30 mysqlbackup_dump.sql\n\n> mysqldump -flush-privileges --single-transaction --flush-logs --triggers --routines --events -hex-blob --host=localhost --user=root --password --databases db1 db2> source_dump.sql\n\n            SET @MYSQLDUMP_TEMP_LOG_BIN = @@SESSION.SQL_LOG_BIN;\n            SET @@SESSION.SQL_LOG_BIN= 0;\n\n            --\n            -- GTID state at the beginning of the backup \n            --\n\n            SET @@GLOBAL.GTID_PURGED='baecf819-a6a5-11e9-a78d-566f18fa0007:1-594';\n\n\non slave:: import data\nmysql> show global variables like 'gtid_executed';\n如果是第一次，应该是空的\nmysql> SET @@GLOBAL.read_only = OFF;\nmysql> source source_dump.sql ;\nmysql> show global variables like 'gtid_executed';\n\n导入完应该跟master一样了? 跟file based replication不同，两台机器上产生的gtid本来就不同的，只不过slave会复制master上面产生的gtid transaction，\n\n另外发现readonly也变成了off，我以为第一步设置readonly会一直有效，看来是中间某一步改变了readonly（重启或者其他操作），再做一次Step 1\n\n----------------------------------------------------------------------------\nstep 6: Slave: setting and start\t\n----------------------------------------------------------------------------\nThe slave should be configured to use the master with GTID based transactions as the source for data replication and to use GTID-based auto-positioning rather than file-based positioning.\n\n> mysql -uroot -p\nmysql> CHANGE MASTER TO\nMASTER_HOST = '54.89.xx.xx',\nMASTER_PORT = 3306,\nMASTER_USER = 'repl_user',\nMASTER_PASSWORD = 'XXXXXXXXX',\nMASTER_AUTO_POSITION = 1;\n\nTake a new backup.  Existing backups that were made before you enabled GTIDs can no longer be used on these servers now that you have enabled GTIDs. Take a new backup at this point, so that you are not left without a usable backup. \n\nmysql> start slave;\nmysql> show slave status\\G\n\n\t\t\tRetrieved_Gtid_Set:\n            Executed_Gtid_Set: baecf819-a6a5-11e9-a78d-566f18fa0007:\n                Auto_Position: 1\n----------------------------------------------------------------------------\nstep 6: Finally touch: unlock\n----------------------------------------------------------------------------\nmysql> SET @@GLOBAL.read_only = OFF;\n\nON SLAVE:\n> vim /etc/my.cnf\n #skip-slave-start\n\n")])])]),n("p",[e._v("https://www.cnblogs.com/shengdimaya/p/6897584.html")]),e._v(" "),n("h4",{attrs:{id:"主主-基于gtid-replication"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#主主-基于gtid-replication"}},[e._v("#")]),e._v(" 主主 - 基于GTID replication")]),e._v(" "),n("p",[e._v("https://www.huaweicloud.com/articles/e85563c3c3c75c7d980466d800a8c43c.html")]),e._v(" "),n("p",[e._v("上面的操作反过来操作一遍即可，但是注意：")]),e._v(" "),n("p",[e._v("两个主自增id要分别为奇数偶数，不然有冲突")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("----------------------------------------------------------------------------\nstep 1: lock master&slave\n----------------------------------------------------------------------------\non both master & slave:\nmysql> SET @@GLOBAL.read_only = ON;\nmysql> show global variables like 'read_only';\n这次跟前面的lock方法不同，注意**不会影响slave同步复制的功能**\n\nmysqladmin -uroot -p shutdown\n\n----------------------------------------------------------------------------\nstep 2: config master & slave /etc/my.cnf And restart:\n----------------------------------------------------------------------------\nmaster:\n\n[mysqld]\nserver-id = 1\nauto_increment_offset = 1\nauto_increment_increment = 2  #奇数ID\n\n\nlog-bin = mysql-bin  #打开二进制功能,MASTER主服务器必须打开此项\nbinlog-format=ROW\nlog-slave-updates=true\ngtid-mode=ON\nenforce-gtid-consistency=ON\nmaster-info-repository=TABLE\nrelay-log-info-repository=TABLE\nsync-master-info=1\nslave-parallel-workers=0\nsync_binlog=0\nbinlog-checksum=CRC32\nmaster-verify-checksum=1\nslave-sql-verify-checksum=1\nbinlog-rows-query-log_events=1\nmax_binlog_size=1024M       #binlog单文件最大值\n\nreplicate-ignore-db = mysql  #忽略不同步主从的数据库\nreplicate-ignore-db = information_schema\nreplicate-ignore-db = performance_schema\nreplicate-ignore-db = sys\n\nmax_connections = 3000\nmax_connect_errors = 30\n\nlower_case_table_names=1      \nskip-name-resolve\n\nskip-slave-start #！！！！Important In addition, you should start replicas with the --skip-slave-start option before configuring the replica settings. Tells the replica server not to start the replication threads when the server starts. To start the threads later, use a START SLAVE statement. \n\n> systemctl restart mysqld\n\nslave:\n[mysqld]\nserver-id = 2\nauto_increment_offset = 2\nauto_increment_increment = 2    #偶数ID\n\n\nlog-bin = mysql-bin    #打开二进制功能,MASTER主服务器必须打开此项\nbinlog-format=ROW\nlog-slave-updates=true\ngtid-mode=ON\nenforce-gtid-consistency=ON\nmaster-info-repository=TABLE\nrelay-log-info-repository=TABLE\nsync-master-info=1\nslave-parallel-workers=0\nsync_binlog=0\nbinlog-checksum=CRC32\nmaster-verify-checksum=1\nslave-sql-verify-checksum=1\nbinlog-rows-query-log_events=1\nmax_binlog_size=1024M         #binlog单文件最大值\n\nreplicate-ignore-db = mysql   #忽略不同步主从的数据库\nreplicate-ignore-db = information_schema\nreplicate-ignore-db = performance_schema\nreplicate-ignore-db = sys\n\nmax_connections = 3000\nmax_connect_errors = 30\n\nlower_case_table_names=1      \nskip-name-resolve\n\nskip-slave-start #！！！！Important In addition, you should start replicas with the --skip-slave-start option before configuring the replica settings. Tells the replica server not to start the replication threads when the server starts. To start the threads later, use a START SLAVE statement. \n\nNote：\n1. 另外一种方式就是\nsystemctl edit mysqld.service\nand then adding --skip-slave-start\nhttps://stackoverflow.com/questions/65434207/start-mysql-replication-server-with-skip-slave-start\n2. 配置完成主主复制之后一定要注释掉my.cnf里面的skip-slave-start，不然每次启动之后都要手动start slave\n\n> systemctl restart mysqld\n\n----------------------------------------------------------------------------\nstep 3: on BOTH two masters create replicator user\n----------------------------------------------------------------------------\n\n> mysql -uroot -p\n\nON BOTH SERVER:\n# replicator@localhost可以管理master本机\nmysql> CREATE USER replicator@localhost IDENTIFIED BY 'password';\nmysql> GRANT SUPER,RELOAD,REPLICATION SLAVE ON *.* TO 'replicator'@'localhost' IDENTIFIED BY 'password';\n\n# 'replicator'@'replication_server_ip'在slave机器上replication_server_ip远程连接管理master以及进行基本的复制（最低需要REPLICATION SLAVE权限）\nON SERVER 1:\nmysql> CREATE USER replicator@replication_server2_ip IDENTIFIED BY 'password';\nmysql> GRANT SUPER,RELOAD,REPLICATION SLAVE ON *.* TO 'replicator'@'replication_server2_ip' IDENTIFIED BY 'password';\nmysql_config_editor set --login-path=host-rpl --host=replication_server2_ip --port=3306 --user=replicator --password\n\nON SERVER 2:\nmysql> CREATE USER replicator@replication_server1_ip IDENTIFIED BY 'password';\nmysql> GRANT SUPER,RELOAD,REPLICATION SLAVE ON *.* TO 'replicator'@'replication_server1_ip' IDENTIFIED BY 'password';\nmysql_config_editor set --login-path=host-rpl --host=replication_server1_ip --port=3306 --user=replicator --password\n\n\nmysql> flush privileges;\n\n----------------------------------------------------------------------------\nstep 4: on BOTH two master: Retrieving Binary Log Coordinates from the Source\n----------------------------------------------------------------------------\n\nmysql> show master status\nmysql> show global variables like 'gtid_executed';\n两者输出的gtid_executed应该是一样的\n\n----------------------------------------------------------------------------\nstep 5: dump and import, If Your Source Has Existing Data to Migrate\n----------------------------------------------------------------------------\n\nMethod 1：\n> mysqldump --all-databases -flush-privileges --single-transaction --flush-logs --triggers --routines --events -hex-blob --host=54.89.xx.xx --port=3306 --user=root  --password=XXXXXXXX > mysqlbackup_dump.sql\n# head -n30 mysqlbackup_dump.sql\n\n\non slave:: import data\nmysql> show global variables like 'gtid_executed';\n如果是第一次，应该是空的\nmysql> SET @@GLOBAL.read_only = OFF;\nmysql> source mysqlbackup_dump.sql ;\nmysql> show global variables like 'gtid_executed';\n导入完应该跟master一样了\n\nMethod 2：\nCreate a dump file using mysqldump on the source server. Set the mysqldump option --master-data (with the default value of 1) to include a CHANGE MASTER TO statement with binary logging information. Set the --set-gtid-purged option to AUTO (the default) or ON, to include information about executed transactions in the dump. Then use the mysql client to import the dump file on the target server. \n\n--master-data[=value]\n\nUse this option to dump a source replication server to produce a dump file that can be used to set up another server as a replica of the source. It causes the dump output to include a CHANGE MASTER TO statement that indicates the binary log coordinates (file name and position) of the dumped server. These are the source server coordinates from which the replica should start replicating after you load the dump file into the replica.\n\nIf the option value is 2, the CHANGE MASTER TO statement is written as an SQL comment, and thus is informative only; it has no effect when the dump file is reloaded. If the option value is 1, the statement is not written as a comment and takes effect when the dump file is reloaded. If no option value is specified, the default value is 1. \n\n----------------------------------------------------------------------------\nstep 6: Both two Slave: setting and start\n----------------------------------------------------------------------------\nThe slave should be configured to use the master with GTID based transactions as the source for data replication and to use GTID-based auto-positioning rather than file-based positioning.\n\n> mysql -uroot -p\nmysql> CHANGE MASTER TO\nMASTER_HOST = '54.89.xx.xx',\nMASTER_PORT = 3306,\nMASTER_USER = 'repl_user',\nMASTER_PASSWORD = 'XXXXXXXXX',\nMASTER_AUTO_POSITION = 1;\n\nTake a new backup.  Existing backups that were made before you enabled GTIDs can no longer be used on these servers now that you have enabled GTIDs. Take a new backup at this point, so that you are not left without a usable backup. \n\nmysql> start slave;\nmysql> show slave status\\G\n\n----------------------------------------------------------------------------\nstep 6: Finally touch: unlock\n----------------------------------------------------------------------------\nmysql> SET @@GLOBAL.read_only = OFF;\n\n> vim /etc/my.cnf\n #skip-slave-start\n\n")])])]),n("h4",{attrs:{id:"reset-replication"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#reset-replication"}},[e._v("#")]),e._v(" Reset Replication")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("on slave:\nmysql > stop slave;\nmysql > reset slave (all);\n\tRESET SLAVE 不会改变复制连接使用的参数，例如master host, master port, master user, or master password\n\tRESET SLAVE ALL 则会；\n    清除slave 复制时的master binlog的位置\n    清空master info, relay log info\n    删除所有的relay log文件，并创建一个新的relay log文件。\n    重置复制延迟(CHANGE MASTER TO 的 MASTER_DELAY参数指定的)为0。\n\n功能说明：用于删除SLAVE数据库的relaylog日志文件，并重新启用新的relaylog文件；\n\nreset slave 将使slave 忘记主从复制关系的位置信息。该语句将被用于干净的启动, 它删除master.info文件和relay-log.info 文件以及所有的relay log 文件并重新启用一个新的relaylog文件。\n\n使用reset slave之前必须使用stop slave 命令将复制进程停止。\n\n\non master:\n\nmysql > RESET MASTER\n\n    删除binlog索引文件中列出的所有binlog文件\n    清空binlog索引文件\n    创建一个新的binlog文件\n    清空系统变量gtid_purged和gtid_executed\n    在MySQL 5.7.5 及后续版本中, RESET MASTER还会会清空 mysql.gtid_executed 数据表。\n\n功能说明：删除所有的binglog日志文件，并将日志索引文件清空，重新开始所有新的日志文件。用于第一次进行搭建主从库时，进行主库binlog初始化工作；\n\n 注意reset master 不同于purge binary log的两处地方\n1. reset master 将删除日志索引文件中记录的所有binlog文件，创建一个新的日志文件 起始值从000001 开始，然而purge binary log 命令并不会修改记录binlog的顺序的数值\n2. reset master 不能用于有任何slave 正在运行的主从关系的主库。因为在slave 运行时刻 reset master 命令不被支持，reset master 将master 的binlog从000001 开始记录,slave 记录的master log 则是reset master 时主库的最新的binlog,从库会报错无法找的指定的binlog文件。\n")])])]),n("h3",{attrs:{id:"sync-replication"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sync-replication"}},[e._v("#")]),e._v(" Sync Replication")]),e._v(" "),n("p",[e._v("Synchronize both servers by setting them to read-only if the replication is running already by using the following command:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("mysql> SET @@GLOBAL.read_only = ON;\n")])])]),n("p",[e._v("解释：")]),e._v(" "),n("p",[e._v('对于Mysql数据库读写状态，主要靠"read_only"全局参数来设定；默认情况下, 数据库是用于'),n("strong",[e._v("读写操作")]),e._v("的，所以read_only参数也是0或faluse状态，这时候不论是本地用户还是远程访问数据库的用户，都可以进行读写操作；")]),e._v(" "),n("p",[e._v("如需设置为"),n("strong",[e._v("只读状态")]),e._v("，将该read_only参数设置为1或TRUE状态，但设置 read_only=1 状态有两个需要注意的地方：")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("read_only=1只读模式，"),n("strong",[e._v("不会影响slave同步复制的功能")]),e._v('，所以在MySQL slave库中设定了read_only=1后，通过 "show slave status\\G" 命令查看salve状态，可以看到salve仍然会读取master上的日志，并且在slave库中应用日志，保证主从数据库同步一致；')])]),e._v(" "),n("li",[n("p",[e._v('read_only=1只读模式，限定的是普通用户进行数据修改的操作，但不会限定具有super权限的用户的数据修改操作 (但是如果设置了"'),n("strong",[e._v("super_read_only=on")]),e._v('"， 则就会限定具有super权限的用户的数据修改操作了)；在MySQL中设置read_only=1后，普通的应用用户进行insert、update、delete等会产生数据变化的DML操作时，都会报出数据库处于只读模式不能发生数据变化的错误，但具有super权限的用户，例如在本地或远程通过root用户登录到数据库，还是可以进行数据变化的DML操作；'),n("strong",[e._v('(也就是说"real_only"只会禁止普通用户权限的mysql写操作，不能限制super权限用户的写操作； 如果要想连super权限用户的写操作也禁止，就使用"flush tables with read lock;"，这样设置也会阻止主从同步复制！)')])])])]),e._v(" "),n("p",[e._v("https://www.cnblogs.com/kevingrace/p/10095332.html")]),e._v(" "),n("h3",{attrs:{id:"replication-troubleshooting"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#replication-troubleshooting"}},[e._v("#")]),e._v(" Replication Troubleshooting")]),e._v(" "),n("h4",{attrs:{id:"gtid"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gtid"}},[e._v("#")]),e._v(" gtid")]),e._v(" "),n("p",[n("strong",[e._v("GTID Set Gaps:")])]),e._v(" "),n("p",[e._v("Executed_Gtid_Set")]),e._v(" "),n("p",[e._v("uuid:1-111,113-120")]),e._v(" "),n("p",[e._v("occur when slave_parrallel_workers > 1, A transaction is missing;")]),e._v(" "),n("p",[n("strong",[e._v("Finding transactions:")])]),e._v(" "),n("p",[e._v("mysqlbinlog --no-defaults -vvv --base64-output=DECODE-ROWS --include-gtids='uuid:112' /var/lib/mysql/mysql-bin.xxxxx")]),e._v(" "),n("p",[e._v("result: SET @@SESSION.GTID_NEXT='uuid:112'")]),e._v(" "),n("p",[n("strong",[e._v("Faking transactions:")])]),e._v(" "),n("p",[e._v("set gtid_next='uuid:112'; BEGIN; COMMIT;")]),e._v(" "),n("p",[n("strong",[e._v("Skipping transactions:")])]),e._v(" "),n("p",[e._v("sql_slave_skip_counter")]),e._v(" "),n("h4",{attrs:{id:"other"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#other"}},[e._v("#")]),e._v(" other")]),e._v(" "),n("p",[e._v("https://dev.mysql.com/doc/mysql-replication-excerpt/8.0/en/replication-problems.html")]),e._v(" "),n("p",[e._v("不要轻易在两种不同的replication模式间切换：")]),e._v(" "),n("p",[e._v("MySQL 5.7复制配置不规范修改导致的坑：http://blog.itpub.net/28218939/viewspace-2142235/")]),e._v(" "),n("p",[e._v("https://www.cnblogs.com/shengdimaya/p/6897584.html")]),e._v(" "),n("p",[e._v("ref:")]),e._v(" "),n("p",[e._v("https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-centos-7")]),e._v(" "),n("p",[e._v("benchmark: http://www.itsecure.hu/library/image/CIS_Oracle_MySQL_Enterprise_Edition_5.7_Benchmark_v1.0.0.pdf")]),e._v(" "),n("h3",{attrs:{id:"keepalived-mysql-高可用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#keepalived-mysql-高可用"}},[e._v("#")]),e._v(" Keepalived+ mysql 高可用")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('-------------------------------------------------------------------------------\n1.\t两台服务都安装nginx和keepalived\n-------------------------------------------------------------------------------\nyum install nginx\nyum install keepalived\n\n\n-------------------------------------------------------------------------------\n2. MYSQL check linux scripts\n-------------------------------------------------------------------------------\nvim /etc/keepalived/scripts/check_mysql.sh\n\nMYSQL=/usr/bin/mysql\nMYSQL_HOST=localhost\nMYSQL_USER=root\nMYSQL_PASSWORD=redhat\n\n$MYSQL -h $MYSQL_HOST -u $MYSQL_USER -p$MYSQL_PASSWORD -e "show status;" >/dev/null 2>&1\n\nif [ $? == 0 ]\nthen\n  echo " $host mysql login successfully"\n  exit 0\nelse\n  #echo " $host mysql login faild" #若mysql关闭，则keepalived关闭\n  killall keepalived\n  exit 2\nfi\n\n-------------------------------------------------------------------------------\n4. 修改keepalived配置文件\n-------------------------------------------------------------------------------\nsudo vim /etc/keepalived/keepalived.conf \n\n! Configuration File for keepalived \n\nglobal_defs {\n   router_id MYSQL0001    # router_id可随意配置，主备服务器配置需不同 #运行keepalived的机器的一个标识，通常可设为hostname。故障发生时，发邮件时显示在邮件主题中的信息。\n}\n\nvrrp_script chk_mysql {\n    script "/etc/keepalived/scripts/check_mysql.sh"    #脚步地址\n    interval 300  #脚本执行间隔 300秒\n    weight -5                    #脚本结果导致的优先级变更，检测失败（脚本返回非0）则优先级 -5\n    fall 2                    #检测连续2次失败才算确定是真失败。会用weight减少优先级（1-255之间）\n    rise 1                    #检测1次成功就算成功。但不修改优先级\n}\n\nvrrp_instance VI_1 { #keepalived在同一virtual_router_id中priority（0-255）最大的会成为master，也就是接管VIP，当priority最大的主机发生故障后次priority将会接管\n    state BACKUP    # 主备keepalived节点此处必须都设置成BACKUP，否则非抢占模式不生效\n    interface eth0 #指定HA监测网络的接口。实例绑定的网卡，因为在配置虚拟IP的时候必须是在已有的网卡上添加的\n    virtual_router_id 54  # 同一个VIP的virtual_router_id必须一致 #虚拟路由标识，这个标识是一个数字，同一个vrrp实例使用唯一的标识。即同一vrrp_instance下，MASTER和BACKUP必须是一致的\n    priority 100     # 优先级配置，数字越大，优先级越高（主的大，从的小）\n    advert_int 1\t#设定MASTER与BACKUP负载均衡器之间同步检查的时间间隔，单位是秒\n    authentication {\t#设置验证类型和密码。主从必须一样\n        auth_type PASS\t#设置vrrp验证类型，主要有PASS和AH两种\n        auth_pass 1111\t#设置vrrp验证密码，在同一个vrrp_instance下，MASTER与BACKUP必须使用相同的密码才能正常通信\n    }\n    nopreempt        # 非抢占模式，即master失效后，如重新上线，将不抢占VIP（主的需要，从的不需要）\n    track_script {\n        chk_mysql\n    }\n    track_interface {\n        eth0    \n    }\n    virtual_ipaddress {\n        192.168.100.150    虚拟Ip  #根据情况配置虚拟ip\n    }\n    notify_master /etc/keepalived/scripts/mysql_master.sh     #脚步地址\n    notify_backup /etc/keepalived/scripts/mysql_slave.sh\n    notify_fault /etc/keepalived/scripts/mysql_fault.sh\n#    notify_stop /etc/keepalived/scripts/mysql_stop.sh\n}\n\n\n在x.x.x.49上，只需要改变:\nrouter_id MYSQL0001->MYSQL0002\npriority 101 -> priority 100，\nmcast_src_ip x.x.x.48 -> mcast_src_ip x.x.x.49即可。\n\n-------------------------------------------------------------------------------\n5. 启动\n-------------------------------------------------------------------------------\n\nsystemctl start keepalived\n\nip addr show eth0\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP qlen 1000\n    link/ether 56:6f:18:fa:00:08 brd ff:ff:ff:ff:ff:ff\n    inet x.x.x.49/24 brd x.x.x.255 scope global eth0\n       valid_lft forever preferred_lft forever\n    inet x.x.x.44/32 scope global eth0\n       valid_lft forever preferred_lft forever\n\n再启动另外一个机器的keepalived，执行 ip addr show eth0 并不会有类似上面的输出，除非是在前面的机器上执行 systemctl stop keepalived\n\n某台机器被选中的时候会出现如下日志，/var/log/messages ：\n\nJun 15 17:01:08 vm2-devclr-v08 Keepalived_vrrp[4850]: VRRP_Instance(VI_1) Transition to MASTER STATE\nJun 15 17:01:09 vm2-devclr-v08 Keepalived_vrrp[4850]: VRRP_Instance(VI_1) Entering MASTER STATE\nJun 15 17:01:09 vm2-devclr-v08 Keepalived_vrrp[4850]: VRRP_Instance(VI_1) setting protocol VIPs.\nJun 15 17:01:09 vm2-devclr-v08 Keepalived_vrrp[4850]: Sending gratuitous ARP on eth0 for x.x.x.44\nJun 15 17:01:09 vm2-devclr-v08 Keepalived_vrrp[4850]: VRRP_Instance(VI_1) Sending/queueing gratuitous ARPs on eth0 for x.x.x.44\nJun 15 17:01:09 vm2-devclr-v08 Keepalived_vrrp[4850]: Sending gratuitous ARP on eth0 for x.x.x.44\n\n-------------------------------------------------------------------------------\n5. 状态检测\n-------------------------------------------------------------------------------\nsudo tcpdump -vvv -n -i eth0 dst 224.0.0.18 and src x.x.x.48\n')])])]),n("h2",{attrs:{id:"_6-system-table"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-system-table"}},[e._v("#")]),e._v(" 6 System Table")]),e._v(" "),n("p",[e._v("sys\ninformation_schema\nperformance_schema\nmysql")]),e._v(" "),n("h2",{attrs:{id:"_7-troubleshooting"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-troubleshooting"}},[e._v("#")]),e._v(" 7 Troubleshooting")]),e._v(" "),n("p",[e._v("vim /var/log/mysqld.log\n注意，默认时区为 UTC")]),e._v(" "),n("h3",{attrs:{id:"host-xxx-xx-xxx-xxx-is-not-allowed-to-connect-to-this-mysql-server"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#host-xxx-xx-xxx-xxx-is-not-allowed-to-connect-to-this-mysql-server"}},[e._v("#")]),e._v(" Host 'xxx.xx.xxx.xxx' is not allowed to connect to this MySQL server**")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("CREATE USER 'test'@'%' IDENTIFIED BY '123456';\nGRANT ALL PRIVILEGES ON * . * TO 'test'@'%';\nFLUSH PRIVILEGES;\n")])])]),n("h3",{attrs:{id:"mysql-workbench-the-type-initializer-for-htmlrenderer-utils-fontsutils-threw-an-exception"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mysql-workbench-the-type-initializer-for-htmlrenderer-utils-fontsutils-threw-an-exception"}},[e._v("#")]),e._v(" mysql workbench The type initializer for 'HtmlRenderer.Utils.FontsUtils' threw an exception.**")]),e._v(" "),n("p",[e._v("http://stackoverflow.com/questions/32020024/upgrading-to-windows-10-breaks-mysql-workbench\nhttps://bugs.mysql.com/bug.php?id=75344")]),e._v(" "),n("h3",{attrs:{id:"mysqldump-stored-procedure-routines-faild"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mysqldump-stored-procedure-routines-faild"}},[e._v("#")]),e._v(" mysqldump stored procedure --routines faild")]),e._v(" "),n("p",[e._v("mysqldump: test_dbuser has insufficent privileges to SHOW CREATE PROCEDURE "),n("code",[e._v("pTEST")]),e._v("!")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("最开始是出现\nERROR 1227 (42000) at line 5632: Access denied; you need (at least one of) the SUPER privilege(s) for this operation\n\n5618 --\n5619 -- Dumping routines for database 'db01'\n5620 --\n5621 /*!50003 DROP PROCEDURE IF EXISTS `pTEST1` */;\n5622 ALTER DATABASE `db01` CHARACTER SET utf8 COLLATE utf8_general_ci ;\n5623 /*!50003 SET @saved_cs_client      = @@character_set_client */ ;\n5624 /*!50003 SET @saved_cs_results     = @@character_set_results */ ;\n5625 /*!50003 SET @saved_col_connection = @@collation_connection */ ;\n5626 /*!50003 SET character_set_client  = utf8 */ ;\n5627 /*!50003 SET character_set_results = utf8 */ ;\n5628 /*!50003 SET collation_connection  = utf8_general_ci */ ;\n5629 /*!50003 SET @saved_sql_mode       = @@sql_mode */ ;\n5630 /*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;\n5631 DELIMITER ;;\n5632 CREATE DEFINER=`test_dbuser`@`%` PROCEDURE `pTEST1`(IN i_asof DATE)\n5633 BEGIN\n5634 \n5635         DECLARE EXIT HANDLER FOR SQLEXCEPTION\n5636     BEGIN\n\n可以看到 5632 CREATE DEFINER=`test_dbuser`@`%` PROCEDURE `pTEST1`(IN i_asof DATE)\n所以我就直接\nmysql> GRANT SUPER ON *.* TO 'test_dbuser'@'%';                                                                \n然后后来我想到实际上执行mysqldump的语句是\nmysqldump --login-path=cn-dev-v01 --set-gtid-purged=OFF --no-tablespaces db01 >test\ncn-dev-v01的host是localhost，不是%，可以看到CREATE DEFINER=`test_dbuser`@`%` 不是 @`localhost`\n然后我想着设置cn-dev-v01 login path host为%，但是失败，因为%无法解析，自然无法连接db，只好改回来，\n然后再试发现又有问题：\nmysqldump: test_dbuser has insufficent privileges to SHOW CREATE PROCEDURE `pTEST1`!\n查了下\nhttps://dba.stackexchange.com/questions/184724/permissions-for-mysql-show-create-procedure\nTo use either statement, you must be the user named in the routine DEFINER clause or have SELECT access to the mysql.proc table. If you do not have privileges for the routine itself, the value displayed for the Create Procedure or Create Function field will be NULL. \nhttps://dev.mysql.com/doc/refman/5.7/en/show-create-procedure.html\n要给SELECT权限，SUPER不包含SELECT权限？？\nmysql> grant SELECT ON *.* TO 'test_dbuser'@'localhost';\n就好了\n\n然后又想到，既然'%'包含'localhost'，干脆直接删掉 test_dbuser@'localhost'\nDROP USER 'test_dbuser'@'localhost';\n这次虽然没有\nmysqldump: test_dbuser has insufficent privileges to SHOW CREATE PROCEDURE `pTEST1`!\n但是另外一个db02还是有这个问题\nmysqldump: test_dbuser has insufficent privileges to SHOW CREATE PROCEDURE `pTEST2`!\n\n1994 DELIMITER ;\n1995 /*!50003 SET sql_mode              = @saved_sql_mode */ ;\n1996 /*!50003 SET character_set_client  = @saved_cs_client */ ;\n1997 /*!50003 SET character_set_results = @saved_cs_results */ ;\n1998 /*!50003 SET collation_connection  = @saved_col_connection */ ;\n1999 /*!50003 DROP PROCEDURE IF EXISTS `pTEST2` */;\n2000 /*!50003 SET @saved_cs_client      = @@character_set_client */ ;\n2001 /*!50003 SET @saved_cs_results     = @@character_set_results */ ;\n2002 /*!50003 SET @saved_col_connection = @@collation_connection */ ;\n2003 /*!50003 SET character_set_client  = utf8 */ ;\n2004 /*!50003 SET character_set_results = utf8 */ ;\n2005 /*!50003 SET collation_connection  = utf8_general_ci */ ;\n2006 /*!50003 SET @saved_sql_mode       = @@sql_mode */ ;\n2007 /*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;\n2008 DELIMITER ;;\n2009 CREATE DEFINER=`test_dbuser`@`%` PROCEDURE `pTEST2`(IN i_asof DATE)\n2010 BEGIN\n2011 \n2012         DECLARE EXIT HANDLER FOR SQLEXCEPTION\n2013     BEGIN\n\n再把SELECT加给'test_dbuser'@'%'即可\nmysql> grant SELECT ON *.* TO 'test_dbuser'@'%';\n最后revoke掉SUPER权限再试\nmysql> revoke SUPER ON *.* FROM 'test_dbuser'@'%';\n仍然成功\n")])])]),n("h3",{attrs:{id:"script-import-issue"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#script-import-issue"}},[e._v("#")]),e._v(" script import issue;")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("-- Set new delimiter '$$'\nDELIMITER $$\n-- Set default delimiter ';'\nDELIMITER ;\n")])])]),n("h3",{attrs:{id:"fixing-lock-wait-timeout-exceeded-try-restarting-transaction-for-a-stuck-mysql-table"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#fixing-lock-wait-timeout-exceeded-try-restarting-transaction-for-a-stuck-mysql-table"}},[e._v("#")]),e._v(" Fixing “Lock wait timeout exceeded; try restarting transaction” for a 'stuck\" Mysql table?")]),e._v(" "),n("p",[e._v("https://stackoverflow.com/questions/5836623/getting-lock-wait-timeout-exceeded-try-restarting-transaction-even-though-im")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("show processlist;\nkill <put_process_id_here>; 先干掉耗时长的process\n")])])]),n("h3",{attrs:{id:"upgrade-trouble-shooting"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#upgrade-trouble-shooting"}},[e._v("#")]),e._v(" upgrade trouble shooting")]),e._v(" "),n("p",[e._v("https://dev.mysql.com/doc/refman/5.7/en/upgrade-troubleshooting.html")]),e._v(" "),n("h3",{attrs:{id:"access-denied-for-user-root-localhost-using-password-no-when-trying-to-connect"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#access-denied-for-user-root-localhost-using-password-no-when-trying-to-connect"}},[e._v("#")]),e._v(" Access denied for user 'root'@'localhost' (using password: NO) when trying to connect**")]),e._v(" "),n("p",[e._v("通常是因为输入了中文字符的dash -- 或者从word文档copy出来的错误编码的参数符号--")]),e._v(" "),n("h3",{attrs:{id:"随机出现的connection-timeout"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#随机出现的connection-timeout"}},[e._v("#")]),e._v(" 随机出现的connection timeout")]),e._v(" "),n("h5",{attrs:{id:"起因是duird连接池报错"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#起因是duird连接池报错"}},[e._v("#")]),e._v(" 起因是duird连接池报错")]),e._v(" "),n("p",[e._v("我们的一个springboot程序 使用了阿里druid，之前都好好的，上到生产遇到几次比较随机的错误：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Caused by: com.alibaba.druid.pool.GetConnectionTimeoutException: wait millis 60000, active 0, maxActive 500, creating 1, createElapseMillis 120001\n\tat com.alibaba.druid.pool.DruidDataSource.getConnectionInternal(DruidDataSource.java:1682)\n\tat com.alibaba.druid.pool.DruidDataSource.getConnectionDirect(DruidDataSource.java:1395)\n\tat com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:1375)\n\tat com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:1365)\n\tat com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:109)\n\tat org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:262)\n\n针对这个问题个人分析方法及解决方案 ：\n1、代码中存在获取DataSource Connection 没有释放的情况，可查询业务代码是否存在 未释放现象。\n2、程序并发数量大或者SQL执行较慢，数据库连接配置太小，可增大maxActive参数、增大wait millis 参数。\n3、检查数据库连接数是否配置过低，Linux文件句柄数是否需要调整\n4、此问题非druid框架引发，建议从业务代码、并发量进行分析排查。如若druid版本过低可升级，也可配置强制释放连接。\n以下配置：\nspring.datasource.druid.log-abandoned=true\nspring.datasource.druid.remove-abandoned=true\n#可根据具体情况酌情配置回收时间\nspring.datasource.druid.remove-abandoned-timeout=300\n\n\n###mysql show connections\nshow processlist;\nshow variables like 'max_connections';\nselect substring_index(host,':' ,1) as client_ip,Command,Time from information_schema.processlist;\n\n### linux句柄数排错 mysql\nhttps://blog.csdn.net/qq_28423997/article/details/87880653\nhttps://blog.csdn.net/fygkchina/article/details/106537736\n\n### mysql timeout\nvi /etc/my.cnf\n wait_timeout = 28800\n interactive_timeout = 28800\n select @@wait_timeout; \n \n\n### druid VS hikari\nhttps://github.com/alibaba/druid/issues/3720\n")])])]),n("p",[e._v("核心的提示就是这个：")]),e._v(" "),n("p",[e._v("Caused by: com.alibaba.druid.pool.GetConnectionTimeoutException: wait millis 60000, active 0, maxActive 500, creating 1, createElapseMillis 120001")]),e._v(" "),n("p",[e._v("根据我目前查到的，能知道的是，抛出异常时，池子里的active Connection是0，所以不存在池子满了的情况，另外creating 1应该是代表需要创建一个connection，但是不知道因为什么原因，创建超过了我们设置的maxWait=60000也就是1分钟，createElapseMillis 120001意思应该是创建超过了两分钟")]),e._v(" "),n("p",[e._v("由于之前其他环境没有遇到过，比较倾向于是服务端问题或网络问题，总结可能的问题如下")]),e._v(" "),n("p",[e._v("1.服务端：\n1）mysql：根据log的warn，好像这个版本是经过升级的，但是没有升级完全，需要执行下mysql_upgrade，不知道是否有影响；")]),e._v(" "),n("p",[e._v("[Warning] InnoDB: Table mysql/innodb_table_stats has length mismatch in the column name table_name.  Please run mysql_upgrade")]),e._v(" "),n("p",[e._v("2）网络波动，不清楚两台机器的部署情况")]),e._v(" "),n("p",[e._v("2.配置问题：\n1）mysql connection string使用的是serverTimezone=Asia/Shanghai，服务器使用的应该是SGT Asia/Singapore，不过这个感觉应该没有影响，因为都是东八区\n2）druid配置问题，官方建议mysql不要开启maxPoolPreparedStatementPerConnectionSize，目前状态是开启了")]),e._v(" "),n("p",[e._v("3.druid本身问题：\n1）版本过低，目前使用的1.1.20是19年的版本，但是我没有看到任何新版本的release note提到了我们遇到的问题，不过有人通过升级解决了问题\n2）druid本身的缺陷，我看到duird 一些开放的issue和关闭的issue从几年前到最近都有人提到这个问题，但是官方没有给出任何回应和解决，然后有人通过放弃阿里的druid，使用其他连接池解决了")]),e._v(" "),n("p",[e._v("https://github.com/alibaba/druid/issues/3720\nhttps://github.com/alibaba/druid/issues/2130\n"),n("a",{attrs:{href:"https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8"),n("OutboundLink")],1)]),e._v(" "),n("h5",{attrs:{id:"脚本连接数据库也随机出错"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#脚本连接数据库也随机出错"}},[e._v("#")]),e._v(" 脚本连接数据库也随机出错")]),e._v(" "),n("p",[e._v("接着，同事反馈cron job也遇到过几次类似问题:")]),e._v(" "),n("p",[e._v("error 2003 (hy000) can't connect to mysql server 110")]),e._v(" "),n("p",[e._v("https://blog.csdn.net/qq1137623160/article/details/78927741")]),e._v(" "),n("p",[e._v("最后其实感觉目前缺少的是：")]),e._v(" "),n("p",[e._v("监控和load test performance test")]),e._v(" "),n("p",[e._v("https://segmentfault.com/a/1190000022336871")]),e._v(" "),n("h5",{attrs:{id:"发现端倪-aborted-connects"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#发现端倪-aborted-connects"}},[e._v("#")]),e._v(" 发现端倪 Aborted_connects")]),e._v(" "),n("p",[e._v("瞄了眼这篇文章，想到忘记认真看下连接数")]),e._v(" "),n("p",[e._v("https://www.jianshu.com/p/07c85b8a7997")]),e._v(" "),n("p",[e._v("执行 netstat -anp|grep 3306 大概三十多个，还算正常，然后")]),e._v(" "),n("p",[e._v("show global status like '%connection%';")]),e._v(" "),n("p",[e._v("结果：Connections=7772 Max_used_connections=60")]),e._v(" "),n("p",[e._v("查了下，好像是指服务器启动之后累积的，所以没有什么参考意义")]),e._v(" "),n("p",[e._v("Connections：The number of connection attempts (successful or not) to the MySQL server.\nMax_used_connections：The maximum number of connections that have been in use simultaneously since the server started.")]),e._v(" "),n("p",[e._v("show global status like '%thread%';")]),e._v(" "),n("p",[e._v("结果：Threads_cached=8\tThreads_connected=34\tThreads_created=2232\tThreads_running=1")]),e._v(" "),n("p",[e._v("Threads_created应该也是累计的，Threads_connected应该是当前的，确实跟前面netstat差不多")]),e._v(" "),n("p",[e._v("show processlist;")]),e._v(" "),n("p",[e._v("结果显示三十多个程序，大部分都是sleep状态，唯一running的是我当前查询的这个线程；")]),e._v(" "),n("p",[e._v("确认了下最大连接数")]),e._v(" "),n("p",[e._v('SHOW VARIABLES LIKE "max_connections";')]),e._v(" "),n("p",[e._v("结果是151默认值，远超34，应该没什么问题，但是总感觉这些sleep状态的threads/connections有些问题，")]),e._v(" "),n("p",[e._v("然后看到了这个")]),e._v(" "),n("p",[e._v("show global status like '%aborted%';")]),e._v(" "),n("p",[e._v("结果：Aborted_clients 1095\tAborted connections 9")]),e._v(" "),n("p",[e._v("这个有点意思：")]),e._v(" "),n("p",[e._v("Aborted_clients：The number of connections that were aborted because the client died without closing the connection properly.")]),e._v(" "),n("p",[e._v("Aborted_connects：The number of failed attempts to connect to the MySQL server.")]),e._v(" "),n("p",[e._v("然后猜测如下：\nAborted_clients=1095, big number, probably means that we have some clients(app or scripts) connected to mysql, but failed to close mysql connections properly, caused lots of sleep threads/connections in mysql processlist;\nat some point in time, it may reached the max connections limit;\nand then some new connection request coming in, mysql then start to recycle zombies, most of the time is fine, but sometimes may delayed some seconds because of recycle taking time, caused Aborted_connects=9, small number, quite random")]),e._v(" "),n("p",[e._v("根据Aborted_connects文档提示：")]),e._v(" "),n("p",[e._v("For additional connection-related information, check the   "),n("a",{attrs:{href:"https://dev.mysql.com/doc/refman/8.0/en/server-status-variables.html#statvar_Connection_errors_xxx",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("Connection_errors_*")]),e._v("xxx"),n("code",[e._v("*")]),n("OutboundLink")],1),e._v("   status variables and the "),n("a",{attrs:{href:"https://dev.mysql.com/doc/refman/8.0/en/performance-schema-host-cache-table.html",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("host_cache")]),n("OutboundLink")],1),e._v(" table.")]),e._v(" "),n("p",[e._v("show global status like '%errors%';")]),e._v(" "),n("p",[e._v("select * from performance_schema.host_cache;")]),e._v(" "),n("p",[e._v("不过并没有什么发现")]),e._v(" "),n("h3",{attrs:{id:"my-cnf-not-working"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#my-cnf-not-working"}},[e._v("#")]),e._v(" my.cnf not working")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("设置主从时，\nchange master to失败：\n\nERROR 1794 (HY000): Slave is not configured or failed to initialize properly. You must at least set --server-id to enable either a master or a slave. Additional error messages can be found in the MySQL error log.\n\n刚开始使用了  mysqld --verbose --help 来验证 my.cnf是否有效，看到输出确实是对的\n但是实际上连上数据库后执行：\nmysql> SHOW GLOBAL VARIABLES like 'server\\_id';\n+---------------+-------+\n| Variable_name | Value |\n+---------------+-------+\n| server_id     | 0     |\n+---------------+-------+\n1 row in set (0.00 sec)\n可以看到并没有生效\n\n查看了my.cnf也没有什么异常，怀疑是权限\n#ll /etc/my.cnf\n-rw-r----- 1 root root 2112 Aug  2 10:24 /etc/my.cnf\n可以看到除了root之外的用户都没有读取权限,\n虽然启动mysqld好像是通过root：service mysqld start，但是实际使用my.cnf的用户应该是：\n/etc/passwd\nmysql:x:27:27:MySQL Server:/var/lib/mysql:/bin/false\n\n更改权限，重启即可\nchmod o+r /etc/my.cnf\n\n补充：\n#service mysqld status\nRedirecting to /bin/systemctl status  mysqld.service\n● mysqld.service - MySQL Server\n   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)\n   Active: active (running) since Mon 2021-08-02 15:59:34 SGT; 58min ago\n     Docs: man:mysqld(8)\n           http://dev.mysql.com/doc/refman/en/using-systemd.html\n  Process: 15300 ExecStart=/usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid $MYSQLD_OPTS (code=exited, status=0/SUCCESS)\n  Process: 15282 ExecStartPre=/usr/bin/mysqld_pre_systemd (code=exited, status=0/SUCCESS)\n Main PID: 15303 (mysqld)\n   CGroup: /system.slice/mysqld.service\n           └─15303 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid\n查看了启动脚本/usr/lib/systemd/system/mysqld.service也没有发现什么异常\n\n找到启动脚本 /usr/lib/systemd/system/mysqld.service：\n。。。。。\n[Service]\nUser=mysql\nGroup=mysql\n。。。。\n# Start main service\nExecStart=/usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid $MYSQLD_OPTS\n。。。。。。\n\n可以看到启动mysqld真正的用户是mysql\n\n")])])]),n("h3",{attrs:{id:"replication-issues"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#replication-issues"}},[e._v("#")]),e._v(" Replication Issues")]),e._v(" "),n("h4",{attrs:{id:"replication-issues-handler-error-ha-err-key-not-found"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#replication-issues-handler-error-ha-err-key-not-found"}},[e._v("#")]),e._v(" Replication Issues::handler error HA_ERR_KEY_NOT_FOUND")]),e._v(" "),n("p",[e._v("A<->B 双主，互为主备")]),e._v(" "),n("p",[e._v("A:\nmysql> show master status;\n+------------------+-----------+--------------+------------------+---------------------------------------------------------------------------------------------+\n| File             | Position  | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set                                                                           |\n+------------------+-----------+--------------+------------------+---------------------------------------------------------------------------------------------+\n| mysql-bin.000019 | 785823599 |              |                  | 4a79ada9-5f9c-11eb-8dea-525400b19818:1-2642682,\n52a0ed6b-5f9c-11eb-b408-525400f12e4f:1-1183 |\n+------------------+-----------+--------------+------------------+---------------------------------------------------------------------------------------------+\nmysql> show slave status\\G;\nLast_SQL_Error: Could not execute Delete_rows event on table XXXX; Can't find record in 'XXXX', Error_code: 1032; handler error HA_ERR_KEY_NOT_FOUND; the event's master log mysql-bin.000006, end_log_pos 51662949")]),e._v(" "),n("p",[e._v("到该机器的master机器B上找:\nmysql> show master status;\n+------------------+-----------+--------------+------------------+---------------------------------------------------------------------------------------------+\n| File             | Position  | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set                                                                           |\n+------------------+-----------+--------------+------------------+---------------------------------------------------------------------------------------------+\n| mysql-bin.000011 | 909786110 |              |                  | 4a79ada9-5f9c-11eb-8dea-525400b19818:1-2642666,\n52a0ed6b-5f9c-11eb-b408-525400f12e4f:1-1186 |\n+------------------+-----------+--------------+------------------+---------------------------------------------------------------------------------------------+\n注意到A上52a0ed6b-5f9c-11eb-b408-525400f12e4f:1-1183，B是52a0ed6b-5f9c-11eb-b408-525400f12e4f:1-1186\nB就是52a0ed6b-5f9c-11eb-b408-525400f12e4f，\n所以在B上查找 52a0ed6b-5f9c-11eb-b408-525400f12e4f:1184\nmysqlbinlog --verbose /var/lib/mysql/mysql-bin.000006 > check-mysql-bin.000006")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("/*!50718 SET TRANSACTION ISOLATION LEVEL READ COMMITTED*//*!*/;\nSET @@SESSION.GTID_NEXT= '52a0ed6b-5f9c-11eb-b408-525400f12e4f:1184'/*!*/;\n# at 51654542\n#220110 11:54:59 server id 2  end_log_pos 51654620 CRC32 0x5ec1b3e8     Query   thread_id=16    exec_time=0     error_code=0\nSET TIMESTAMP=1641786899/*!*/;\nSET @@session.sql_mode=1436549152/*!*/;\nSET @@session.auto_increment_increment=2, @@session.auto_increment_offset=2/*!*/;\nBEGIN\n/*!*/;\n# at 51654620\n# at 51654672\n#220110 11:54:59 server id 2  end_log_pos 51654744 CRC32 0x6aeb7e9f     Table_map: `DB`.`XXXX` mapped to number 9217\n# at 51654744\n#220110 11:54:59 server id 2  end_log_pos 51662949 CRC32 0xc3f5e895     Delete_rows: table id 9217\n# at 51662949\n")])])]),n("p",[e._v("果然 52a0ed6b-5f9c-11eb-b408-525400f12e4f:1184就是delete语句\n当然也可以在A机器上查看relay binlog\nmysqlbinlog --verbose --base64-output=DECODE-ROWS /var/lib/mysql/relay-bin.000022 > check-relay-bin.000022")]),e._v(" "),n("h5",{attrs:{id:"解决方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解决方法"}},[e._v("#")]),e._v(" 解决方法：")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("方法一：reset整个master slave")])]),e._v(" "),n("li",[n("p",[e._v("方法二：skip error")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('mysql> stop slave;\nmysql> SET GLOBAL SQL_SLAVE_SKIP_COUNTER = 1;\nmysql> START SLAVE;\n\n批量处理：\n$ while true; do if [[ $(mysql -uroot -pP@ssw0rd -e "SHOW SLAVE STATUS\\G" | grep "Last_SQL_Error:" | grep -c "HA_ERR_KEY_NOT_FOUND") -gt 0 ]]; then mysql -uroot -pP@ssw0rd -e "STOP SLAVE; SET GLOBAL SQL_SLAVE_SKIP_COUNTER = 1; START SLAVE;"; else break; fi; sleep 1; done\n')])])]),n("p",[e._v("ERROR 1858 (HY000): sql_slave_skip_counter can not be set when the server is running with @@GLOBAL.GTID_MODE = ON. Instead, for each transaction that you want to skip, generate an empty transaction with the same GTID as the transaction")])]),e._v(" "),n("li",[n("p",[e._v("方法 三： fake transaction")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("在A:\nmysql> stop slave;\nmysql> SET @@SESSION.GTID_NEXT= '52a0ed6b-5f9c-11eb-b408-525400f12e4f:1184'; \n#1184是出错的地方 定位方法：\n  > 通过mysqlbinlog -v去relay log找到出错的地方\n  > 更简单的，对比Retrieved_Gtid_Set 和 Executed_Gtid_Set，Executed_Gtid_Set最后一条加1即下一条就是\nmysql> begin ; commit ;\nmysql> start slave;\nERROR 1837 (HY000): When @@SESSION.GTID_NEXT is set to a GTID, you must explicitly set it to a different value after a COMMIT or ROLLBACK. Please check GTID_NEXT variable manual page for detailed explanation. Current @@SESSION.GTID_NEXT is '878556a6-ff0e-11ea-bf92-566f18fa0008:1184'.\nmysql> SET GTID_NEXT=\"AUTOMATIC\";\n\n注意到有趣的现象：回到B上查看slave status会发现：Retrieved_Gtid_Set多了一条 XXXX:1184 也就是在A上执行的1184空语句\n\n\n")])])])]),e._v(" "),n("li",[n("p",[e._v("方法四：直接忽视（比较危险）\nmy.cnf: [mysqld] slave-skip-errors=1032")])])]),e._v(" "),n("h5",{attrs:{id:"仍然存在的疑问"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#仍然存在的疑问"}},[e._v("#")]),e._v(" 仍然存在的疑问：")]),e._v(" "),n("p",[e._v("Could not execute Delete_rows event on table XXXX; Can't find record in 'XXXX', Error_code: 1032; handler error HA_ERR_KEY_NOT_FOUND;\n说明A机器上做删除的时候某条记录不存在，那就奇怪了，因为A和B是互为主备，既然B上面删除成功了，说明这条数据在B上存在，那应该也在A上也存在才对，\n或者说如果A上的这条记录被删除了，那删除的动作也会同步到B，\n如果是刚好B上面删除的时候A上面也删除了，当B同步到A的时候，A已经删除过了所以出现错误，反过来，那B也应该有错误才对，但是B上的同步正常没有错误，\n所以怎么都无法说通，\n除非是说可能在B上发起的delete操作也是找不到记录，但是并不会产生问题，但是replication到A的时候，A作为slave会比较严格，所以将not found错误记录出来；")]),e._v(" "),n("p",[e._v("这里有点解释值得看一下：")]),e._v(" "),n("blockquote",[n("p",[e._v("If a statement produces the same error (identical error code) on both the source and the replica, the error is logged, but replication continues.\nIf a statement produces different errors on the source and the replica, the replication SQL thread terminates, and the replica writes a message to its error log and waits for the database administrator to decide what to do about the error.\nReplica Errors During Replication https://dev.mysql.com/doc/mysql-replication-excerpt/5.7/en/replication-features-slaveerrors.html")])]),e._v(" "),n("p",[e._v("跟我的猜测差不多，总之就是同样的delete语句在A和B上的报错不同，\n文档提到了两边的版本和engine，\n"),n("code",[e._v("$mysqlshow -uroot -pP@ssw0rd -i DBNAME TABLENAME;")]),e._v("\n确认了下，两边完全一致")]),e._v(" "),n("p",[e._v("进一步看了下A和B的时间，发现B比A快了2分钟，不知道是否有关")]),e._v(" "),n("p",[e._v("REFER:\nhttps://bugs.mysql.com/bug.php?id=94827\nhttps://dev.mysql.com/doc/relnotes/mysql/5.7/en/news-5-7-20.html\nhttps://dev.mysql.com/doc/mysql-errors/5.7/en/server-error-reference.html#error_er_key_not_found\nhttps://severalnines.com/blog/mysql-tutorial-troubleshooting-mysql-replication-part-2\nhttps://www.etlbi.com/blog/2018/08/11/mysql-gtid-1032-error/")]),e._v(" "),n("h4",{attrs:{id:"replication-issues-got-fatal-error-1236-from-master-when-reading-data-from-binary-log-binary-log-is-not-open"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#replication-issues-got-fatal-error-1236-from-master-when-reading-data-from-binary-log-binary-log-is-not-open"}},[e._v("#")]),e._v(" Replication Issues::Got fatal error 1236 from master when reading data from binary log: 'Binary log is not open'")]),e._v(" "),n("p",[e._v("Background: MASTER A<->MASTER B, both are master&slaves")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("ON SERVER B: \nmysql> show slave status\\G;\n*************************** 1. row ***************************\n               Slave_IO_State: \n                  Master_Host: SERVER_A_IP\n                  Master_User: replicator\n                  Master_Port: 3306\n                Connect_Retry: 60\n              Master_Log_File: mysql-bin.000012\n          Read_Master_Log_Pos: 341592308\n               Relay_Log_File: sgkc2-devclr-v06-relay-bin.000033\n                Relay_Log_Pos: 341592521\n        Relay_Master_Log_File: mysql-bin.000012\n             Slave_IO_Running: No\n            Slave_SQL_Running: Yes\n              Replicate_Do_DB: \nMaster_SSL_Verify_Server_Cert: No\n                Last_IO_Errno: 1236\n                Last_IO_Error: Got fatal error 1236 from master when reading data from binary log: 'Binary log is not open'\n               Last_SQL_Errno: 0\n               Last_SQL_Error: \n  Replicate_Ignore_Server_Ids: \n             Master_Server_Id: 1\n                  Master_UUID: db4cbf6c-d96e-11eb-872a-566f18fa0034\n             Master_Info_File: mysql.slave_master_info\n                    SQL_Delay: 0\n          SQL_Remaining_Delay: NULL\n      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates\n           Master_Retry_Count: 86400\n                  Master_Bind: \n      Last_IO_Error_Timestamp: 220303 14:43:40\n     Last_SQL_Error_Timestamp: \n               Master_SSL_Crl: \n           Master_SSL_Crlpath: \n           Retrieved_Gtid_Set: db4cbf6c-d96e-11eb-872a-566f18fa0034:1-230351\n            Executed_Gtid_Set: db4cbf6c-d96e-11eb-872a-566f18fa0034:1-230351\n                Auto_Position: 1\n         Replicate_Rewrite_DB: \n                 Channel_Name: \n           Master_TLS_Version: \n\nmysql> show master status;\n+------------------+-----------+--------------+------------------+-----------------------------------------------+\n| File             | Position  | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set                             |\n+------------------+-----------+--------------+------------------+-----------------------------------------------+\n| mysql-bin.000009 | 945084747 |              |                  | db4cbf6c-d96e-11eb-872a-566f18fa0034:1-230351 |\n+------------------+-----------+--------------+------------------+-----------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SHOW BINARY LOGS;\n+------------------+------------+\n| Log_name         | File_size  |\n+------------------+------------+\n| mysql-bin.000001 | 1075544412 |\n| mysql-bin.000002 | 1073857153 |\n| mysql-bin.000003 | 1074315226 |\n| mysql-bin.000004 | 1073856204 |\n| mysql-bin.000005 | 1075105942 |\n| mysql-bin.000006 | 1075591706 |\n| mysql-bin.000007 | 1074646766 |\n| mysql-bin.000008 | 1075091646 |\n| mysql-bin.000009 |  945084747 |\n+------------------+------------+\n9 rows in set (0.00 sec)\n\n\nON SERVER A:\nmysql> show slave status\\G;\n*************************** 1. row ***************************\n               Slave_IO_State: \n                  Master_Host: B\n                  Master_User: replicator\n                  Master_Port: 3306\n                Connect_Retry: 60\n              Master_Log_File: mysql-bin.000009\n          Read_Master_Log_Pos: 945084747\n               Relay_Log_File: sgkc2-devclr-v05-relay-bin.000021\n                Relay_Log_Pos: 367\n        Relay_Master_Log_File: mysql-bin.000009\n             Slave_IO_Running: No\n            Slave_SQL_Running: No\n  Replicate_Ignore_Server_Ids: \n             Master_Server_Id: 0\n                  Master_UUID: 435441ed-10f1-11ea-b6f4-566f18fa0032\n             Master_Info_File: mysql.slave_master_info\n                    SQL_Delay: 0\n          SQL_Remaining_Delay: NULL\n      Slave_SQL_Running_State: \n           Master_Retry_Count: 86400\n                  Master_Bind: \n      Last_IO_Error_Timestamp: \n     Last_SQL_Error_Timestamp: \n               Master_SSL_Crl: \n           Master_SSL_Crlpath: \n           Retrieved_Gtid_Set: \n            Executed_Gtid_Set: db4cbf6c-d96e-11eb-872a-566f18fa0034:1-230351\n                Auto_Position: 1\n         Replicate_Rewrite_DB: \n                 Channel_Name: \n           Master_TLS_Version:   \nmysql> show master status;\nEmpty set (0.00 sec)\nmysql> SHOW BINARY LOGS;\nERROR 1381 (HY000): You are not using binary logging\n\n提示没有开通binary logging 功能\nvim /etc/my.cnf\n#log-bin = mysql-bin                                                     #打开二进制功能,MASTER主服务器必须打开此\nsomeone has commentted out the log-bin!!!\n\n")])])]),n("p",[e._v("在 SERVER A 上继续查看日志：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("2022-03-03T06:40:04.873013Z 0 [Note] Shutting down plugin 'binlog'\n2022-03-03T06:40:06.275534Z 0 [Note] /usr/sbin/mysqld: Shutdown complete\n\n2022-03-03T06:40:22.048599Z 0 [Warning] Changed limits: max_open_files: 5000 (requested 15000)\n2022-03-03T06:40:22.048850Z 0 [Warning] Changed limits: table_open_cache: 995 (requested 2000)\n2022-03-03T06:40:22.238472Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).\n2022-03-03T06:40:22.244013Z 0 [Note] /usr/sbin/mysqld (mysqld 5.7.32) starting as process 4110 ...\n2022-03-03T06:40:22.292202Z 0 [Warning] You need to use --log-bin to make --log-slave-updates work.\n2022-03-03T06:40:22.292245Z 0 [Warning] You need to use --log-bin to make --binlog-format work.\n\n")])])]),n("p",[n("s",[e._v("可以看到有人在2022-03-03T06:40关闭了log-bin的功能")]),e._v("(误解，这是因为重启，但是确实是config里面被人关闭了binlog，有人注释掉了log-bin = mysql-bin )")]),e._v(" "),n("p",[e._v("继续查看SERVER A上的binary log：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("vim /var/lib/mysql/mysql-bin.index\n./mysql-bin.000001\n./mysql-bin.000002\n./mysql-bin.000003\n./mysql-bin.000004\n./mysql-bin.000005\n./mysql-bin.000006\n./mysql-bin.000007\n./mysql-bin.000008\n./mysql-bin.000009\n./mysql-bin.000010\n./mysql-bin.000011\n./mysql-bin.000012\n\n不过目录/var/lib/mysql/下只剩下mysql-bin.000012，经过查看history，发现是有人手动删除\n")])])]),n("h5",{attrs:{id:"reset"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#reset"}},[e._v("#")]),e._v(" Reset:")]),e._v(" "),n("p",[e._v("既然A上面的bin log已经被删除不完整了，而且已经很久没有开启bin log，中间很多操作也没有记录下来，所以只能重头重新做起")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\n\nON SERVER A:\nmysql> stop slave;  \nmysql> reset slave all //断掉A作为slave，B作为master的复制\n\nON SERVER B:\nmysql> stop slave;\n\ndump data from A TO B\n\nON SERVER A:\n> mysqldump -flush-privileges --single-transaction --flush-logs --triggers --routines --events -hex-blob --host=localhost --user=root --password --databases --set-gtid-purged=OFF DB_NAME> source_dump.sql\n\nON SERVER B:\nimport data dump：\nsource source_dump.sql;\nmysql> reset master; //由于客户端都是连A，B上并没有任何mysql操作，所以这个可以不做\nmysql> reset slave all //断掉B作为slave，A作为master的复制\n\nenable log-bin on SERVER A and restart\nmysql> show master status;\nmysql> reset master; //\n\nCHANGE MASTER ON A&B\nSTART SLAVE ON A&B\n")])])]),n("h3",{attrs:{id:"error-1049-42000-unknown-database"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#error-1049-42000-unknown-database"}},[e._v("#")]),e._v(" ERROR 1049 (42000): Unknown database")]),e._v(" "),n("p",[e._v("[Warning] 'db' entry 'xxx@%' had database in mixed case that has been forced to lowercase because lower_case_table_names is set. It will not be possible to remove this privilege using REVOKE.")]),e._v(" "),n("p",[e._v("show databases 可以看到该db比如 TEST_DB，但是 use TEST_DB提示错误找不到，\n/var/lib/mysql 查看目录下存在 TEST_DB这个数据库的文件夹，拥有者是mysql，文件权限也正确，\n最后发现原来是 my.cnf开启了 lower_case_table_names=1\n注释掉重启mysql即可！")]),e._v(" "),n("p",[e._v("https://stackoverflow.com/questions/19678769/error-1049-42000-unknown-database-mydatabasename")]),e._v(" "),n("h3",{attrs:{id:"variables-不是所见即所得"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#variables-不是所见即所得"}},[e._v("#")]),e._v(" Variables 不是所见即所得")]),e._v(" "),n("p",[e._v("比如：\n错误："),n("code",[e._v("Update mysql.user set password_lifetime=90 where user='root';")]),e._v("\n正确："),n("code",[e._v("ALTER USER ' root'@'localhost' PASSWORD EXPIRE INTERVAL 90 DAY;")])]),e._v(" "),n("disqus")],1)}),[],!1,null,null,null);t.default=a.exports}}]);