(window.webpackJsonp=window.webpackJsonp||[]).push([[253],{682:function(e,t,n){"use strict";n.r(t);var s=n(65),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[n("a",{attrs:{href:"https://github.com/DFRobot/SportsButtonESP32C3",target:"_blank",rel:"noopener noreferrer"}},[n("OutboundLink")],1)]),e._v(" "),n("h2",{attrs:{id:"basics"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#basics"}},[e._v("#")]),e._v(" Basics")]),e._v(" "),n("h3",{attrs:{id:"how-to-choose"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#how-to-choose"}},[e._v("#")]),e._v(" How to choose")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("Esp32 vs ESP8266")])]),e._v(" "),n("li",[n("p",[e._v("ESP32各个型号")])])]),e._v(" "),n("p",[e._v("AI 选 ESP32S3")]),e._v(" "),n("h3",{attrs:{id:"references"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[e._v("#")]),e._v(" references")]),e._v(" "),n("ul",[n("li",[e._v("ESP32 Architecture and Features")]),e._v(" "),n("li",[e._v("GPIOs and Pin Mapping")]),e._v(" "),n("li",[e._v("PWM (Pulse Width Modulation) and ADC (Analog to Digital Conversion)")]),e._v(" "),n("li",[e._v("Communication Protocols (e.g., I2C, SPI, UART)")]),e._v(" "),n("li",[e._v("Low Power Modes and Deep Sleep")]),e._v(" "),n("li",[e._v("Real-Time Operating Systems (RTOS) using FreeRTOS (multitasking on ESP32)")]),e._v(" "),n("li",[e._v("Low Power Consumption for battery-powered projects")]),e._v(" "),n("li",[e._v("Security Features like encryption, secure storage, and OTA updates")])]),e._v(" "),n("p",[n("a",{attrs:{href:"https://archive.org/details/kolban-ESP32/mode/2up",target:"_blank",rel:"noopener noreferrer"}},[e._v('"Mastering ESP32" by Neil Kolban'),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"https://randomnerdtutorials.com/projects-esp32/",target:"_blank",rel:"noopener noreferrer"}},[e._v("projects"),n("OutboundLink")],1)]),e._v(" "),n("h3",{attrs:{id:"esp32-devices"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#esp32-devices"}},[e._v("#")]),e._v(" ESP32 Devices")]),e._v(" "),n("p",[e._v("https://docs.espressif.com/projects/esp-idf/en/latest/esp32c3/get-started/index.html")]),e._v(" "),n("h4",{attrs:{id:"esp32-c3-devkitm-1-esp32-c3-mini-1"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#esp32-c3-devkitm-1-esp32-c3-mini-1"}},[e._v("#")]),e._v(" ESP32-C3-DevKitM-1 (ESP32-C3-MINI-1)")]),e._v(" "),n("p",[e._v("ESP32-C3-DevKitM-1 is an entry-level development board based on ESP32-C3-MINI-1, a module named for its small size. This board integrates complete Wi-Fi and Bluetooth LE functions.")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://docs.espressif.com/projects/esp-idf/en/v5.0/esp32c3/hw-reference/esp32c3/user-guide-devkitm-1.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("ESP32-C3-DevKitM-1 EN-pinout"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32c3/hw-reference/esp32c3/user-guide-devkitm-1.html?highlight=esp32%20c3%20devkitm%201%20v1%20pinout",target:"_blank",rel:"noopener noreferrer"}},[e._v("中文-管脚"),n("OutboundLink")],1)]),e._v(" "),n("h4",{attrs:{id:"esp32-c3-devkitc-02-esp32-c3-wroom-02"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#esp32-c3-devkitc-02-esp32-c3-wroom-02"}},[e._v("#")]),e._v(" ESP32-C3-DevKitC-02 (ESP32-C3-WROOM-02)")]),e._v(" "),n("p",[e._v("ESP32-C3-DevKitC-02 is an entry-level development board based on ESP32-C3-WROOM-02, a general-purpose module with 4 MB SPI flash. This board integrates complete Wi-Fi and Bluetooth LE functions.")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://docs.espressif.com/projects/esp-idf/en/v5.0/esp32c3/hw-reference/esp32c3/user-guide-devkitc-02.html?highlight=esp32%20c3%20wroom",target:"_blank",rel:"noopener noreferrer"}},[e._v("ESP32-C3-DevKitC-02 pinout"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("ESP32 With Integrated OLED (WEMOS/Lolin)\nhttps://www.instructables.com/ESP32-With-Integrated-OLED-WEMOSLolin-Getting-Star/")]),e._v(" "),n("p",[e._v("这段文字是ESP32-C3的资料。\n基础资料包括（原理图尺寸图等）：http://124.222.62.86/yd-data/YD-ESP32-C3/\n如果查看引脚功能图可以参考链接如下：\nhttps://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32c3/_images/esp32-c3-devkitm-1-v1-pinout.jpg\n如果计划使用官方的idf-C语言编程详细资料链接（例程就是的API参考）：\nhttps://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/get-started/index.html\n如果计划使用Ardiuno编程资料链接：\nhttps://docs.espressif.com/projects/arduino-esp32/en/latest/getting_started.html#about-arduino-esp32\n如果计划使用micropython语言编程资料链接如下：\nhttps://docs.micropython.org/en/latest/esp32/quickref.html\n如需要安装核心板的硬件usb转串口驱动：\nhttps://www.wch.cn/products/CH340.html?from=list\nmicropython的ESP32-C3固件注意有两个固件：https://micropython.org/download/")]),e._v(" "),n("h4",{attrs:{id:"esp32-s3-devkitc-1"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#esp32-s3-devkitc-1"}},[e._v("#")]),e._v(" ESP32-S3-DevKitC-1")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://docs.espressif.com/projects/esp-dev-kits/zh_CN/latest/esp32s3/esp32-s3-devkitc-1/user_guide.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("ESP32-S3-DevKitC-1 PINOUT"),n("OutboundLink")],1)]),e._v(" "),n("h2",{attrs:{id:"core-libs"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#core-libs"}},[e._v("#")]),e._v(" Core Libs")]),e._v(" "),n("h3",{attrs:{id:"arduino-lib"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#arduino-lib"}},[e._v("#")]),e._v(" Arduino lib")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/espressif/arduino-esp32",target:"_blank",rel:"noopener noreferrer"}},[e._v("Arduino core for the ESP32, ESP32-P4, ESP32-S2, ESP32-S3, ESP32-C3, ESP32-C6 and ESP32-H2"),n("OutboundLink")],1)]),e._v(" "),n("h3",{attrs:{id:"esp-idf-libs"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#esp-idf-libs"}},[e._v("#")]),e._v(" ESP-IDF libs")]),e._v(" "),n("p",[e._v("When using ESP-IDF (without Arduino-esp32 lib), the most common libraries you’ll use include:")]),e._v(" "),n("ul",[n("li",[e._v("GPIO Driver (driver/gpio.h) → Controls GPIO pins (replaces digitalWrite, pinMode, etc.).")]),e._v(" "),n("li",[e._v("LED Control (driver/ledc.h) → Provides PWM support for LEDs.")]),e._v(" "),n("li",[e._v("RMT (Remote Control) → Used for precise timing, including controlling NeoPixel (WS2812) RGB LEDs.")]),e._v(" "),n("li",[e._v("FreeRTOS (freertos/FreeRTOS.h) → For multitasking and delays (vTaskDelay instead of delay).")]),e._v(" "),n("li",[e._v("Log (esp_log.h) → For debugging/logging.")]),e._v(" "),n("li",[e._v("WiFi (esp_wifi.h) → To connect to WiFi.")]),e._v(" "),n("li",[e._v("I2C/SPI (driver/i2c.h, driver/spi_master.h) → For communicating with sensors/devices.")])]),e._v(" "),n("h2",{attrs:{id:"setup-dev-env-and-test"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#setup-dev-env-and-test"}},[e._v("#")]),e._v(" Setup DEV Env and Test")]),e._v(" "),n("p",[e._v("Development Environment Differences:")]),e._v(" "),n("ul",[n("li",[e._v("Arduino IDE (Beginner-Friendly)\n"),n("ul",[n("li",[e._v("Simple and easy to use.")]),e._v(" "),n("li",[e._v("Uses Arduino's framework to program ESP32.")]),e._v(" "),n("li",[e._v("Limited debugging features.")])])]),e._v(" "),n("li",[e._v("VSCode + PlatformIO (Intermediate)\n"),n("ul",[n("li",[e._v("More flexibility and support for multiple frameworks.")]),e._v(" "),n("li",[e._v("Great for large projects with library management.")]),e._v(" "),n("li",[e._v("Requires some setup but has a user-friendly interface.")])])]),e._v(" "),n("li",[e._v("VSCode + ESP-IDF (Advanced, Official Espressif SDK)\n"),n("ul",[n("li",[e._v("Best for low-level control over ESP32.")]),e._v(" "),n("li",[e._v("More complex setup, but provides full access to ESP32 features.")]),e._v(" "),n("li",[e._v("Recommended for production-level projects.")])])])]),e._v(" "),n("h3",{attrs:{id:"mixly-米思奇"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mixly-米思奇"}},[e._v("#")]),e._v(" Mixly 米思奇")]),e._v(" "),n("p",[e._v("青少年编程首选 推拽式，不过很多模块他们是用自己的lib，不是通用的lib，比如espnow，不容易移植到其他平台\nhttps://go.mixly.cn/")]),e._v(" "),n("h3",{attrs:{id:"arduino-ide"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#arduino-ide"}},[e._v("#")]),e._v(" Arduino IDE")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://docs.espressif.com/projects/arduino-esp32/en/latest/installing.html?highlight=update#how-to-update-to-the-latest-code",target:"_blank",rel:"noopener noreferrer"}},[e._v("Installing ESP32 Add-on in Arduino IDE"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("To add ESP32 Board in your Arduino IDE, follow these instructions :")]),e._v(" "),n("ol",[n("li",[e._v("Install ESP32 Board Support:\nOpen your Arduino IDE, go to File>Preferences,\nIn Additional Board Manager URLs, enter:\nhttps://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json")])]),e._v(" "),n("p",[n("s",[e._v("https://dl.espressif.com/dl/package_esp32_index.json(It may not be updated as frequently as the GitHub version.Some older tutorials may reference this, but it’s now less commonly recommended.)")]),e._v(" into the “Additional Board Manager URLs” field as shown in the figure below. Then, click the “OK” button")]),e._v(" "),n("p",[e._v("Note: if you already have another boards (i.e ESP8266 boards URL), you can separate the URLs with a comma like this:")]),e._v(" "),n("p",[e._v("https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json, http://arduino.esp8266.com/stable/package_esp8266com_index.json")]),e._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[e._v("Install ESP32 Boards:\nTools > Board > Boards Manager")])]),e._v(" "),n("p",[e._v("Search for ESP32 and install the latest esp32 by Espressif Systems.")]),e._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[e._v("Select Your Board:")])]),e._v(" "),n("p",[e._v("Tools → Board.\nexample:\nSelect ESP32C3 Dev Module (matches your ESP32-C3-DevKitM-1).\nESP32S3 Dev Module (matches your ESP32-S3-DevKitC-1 )")]),e._v(" "),n("ol",{attrs:{start:"4"}},[n("li",[e._v("Open Blink Example:")])]),e._v(" "),n("p",[e._v("Go to File → Examples → ESP32 → GPIO → BlinkRGB (don't use 01.Basics → Blink.)")]),e._v(" "),n("p",[e._v("Click Upload (ensure the correct COM port is selected under Tools → Port).")]),e._v(" "),n("p",[n("strong",[e._v("Note:")])]),e._v(" "),n("ol",[n("li",[e._v("RGB LED\nGPIO 8 is connected to an RGB LED instead of a regular LED, you should use the BlinkRGB example instead of the standard Blink example.")])]),e._v(" "),n("p",[e._v("🎨 How is an RGB LED different?\nA normal LED has just one color and turns ON/OFF with digitalWrite().\nAn RGB LED has three colors (Red, Green, Blue) in one package.\nYou control color intensity using PWM (Pulse Width Modulation) instead of just digitalWrite(HIGH/LOW).")]),e._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[e._v("predefined macro\nIn Arduino code, LED_BUILTIN is a predefined macro that represents the built-in LED pin of the board.")])]),e._v(" "),n("p",[e._v("The Blink example uses LED_BUILTIN without any #include statements because it is already defined by the Arduino Core for ESP32.\nWhen you select a board in Arduino IDE, the corresponding board definition file provides the value of LED_BUILTIN.")]),e._v(" "),n("p",[e._v("To know which pin LED_BUILTIN is assigned to, you need to check the board definition file inside the Arduino-ESP32 core.")]),e._v(" "),n("p",[e._v("🔎 Checking the definition:\nFind the ESP32 Arduino Core folder on your computer:")]),e._v(" "),n("p",[e._v("If you're on Windows, it’s usually under:\nC:\\Users<YourUser>\\AppData\\Local\\Arduino15\\packages\\esp32\\hardware\\esp32<version>\\variants/esp32c3/pins_arduino.h")]),e._v(" "),n("p",[e._v("How to modify predefined macro pin:")]),e._v(" "),n("ul",[n("li",[e._v('Method 1:\nChange the built-in LED pin "LED_BUILTIN" to 8 (ESP32-C3’s onboard LED is on GPIO 8)')]),e._v(" "),n("li",[e._v("Method 2:\noverride LED_BUILTIN\n#define LED_BUILTIN 8\nThis should be before setup(), and it will override the default value.")])]),e._v(" "),n("h3",{attrs:{id:"platformio"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#platformio"}},[e._v("#")]),e._v(" PlatformIO")]),e._v(" "),n("p",[e._v("VSCode+PlatformIO extension")]),e._v(" "),n("ol",[n("li",[e._v('Open VSCode, click on the PlatformIO Home (Alien icon in the sidebar).\n-> Click "New Project" and configure:\nName: ESP32C3-BlinkRGB\nBoard: Espressif ESP32-C3-DevKitM-1\nFramework: Arduino\nClick Finish (PlatformIO will set up your project).\n-> auto generate project with platformio.ini:')])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("[env:esp32-c3-devkitm-1]\nplatform = espressif32\nboard = esp32-c3-devkitm-1\nframework = arduino\n")])])]),n("p",[e._v("and VSCode also will auto install dependencies:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Resolving esp32-c3-devkitm-1 dependencies...\nTool Manager: Installing platformio/tool-scons @ ~4.40801.0\nDownloading 0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100%\nUnpacking 0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100%\nTool Manager: tool-scons@4.40801.0 has been installed!\nAlready up-to-date.\nUpdating metadata for the vscode IDE...\nProject has been successfully updated!\n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[e._v("run blink")])]),e._v(" "),n("p",[e._v("Copy Code from:\n.platformio\\packages\\framework-arduinoespressif32\\libraries\\ESP32\\examples\\GPIO\\BlinkRGB\\BlinkRGB.ino\nto\nsrc\\main.cpp\nbut remember add the header <Arduino.h>")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("#include <Arduino.h>\n\nvoid setup() {\n  // No need to initialize the RGB LED\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n#ifdef RGB_BUILTIN\n  digitalWrite(RGB_BUILTIN, HIGH);   // Turn the RGB LED white\n  delay(1000);\n  digitalWrite(RGB_BUILTIN, LOW);    // Turn the RGB LED off\n  delay(1000);\n\n  neopixelWrite(RGB_BUILTIN,RGB_BRIGHTNESS,0,0); // Red\n  delay(1000);\n  neopixelWrite(RGB_BUILTIN,0,RGB_BRIGHTNESS,0); // Green\n  delay(1000);\n  neopixelWrite(RGB_BUILTIN,0,0,RGB_BRIGHTNESS); // Blue\n  delay(1000);\n  neopixelWrite(RGB_BUILTIN,0,0,0); // Off / black\n  delay(1000);\n#endif\n}\n")])])]),n("p",[e._v("Click the Checkmark (✔) in the PlatformIO toolbar to compile.\nClick the Arrow (→) to upload the code to your ESP32-C3 board.\nOpen Serial Monitor (the socket icon) (PlatformIO -> Serial Monitor in VSCode) to see logs.")]),e._v(" "),n("p",[e._v("https://randomnerdtutorials.com/vs-code-platformio-ide-esp32-esp8266-arduino/")]),e._v(" "),n("p",[e._v("https://docs.platformio.org/en/latest/boards/espressif32/esp32-c3-devkitm-1.html")]),e._v(" "),n("p",[e._v("Ctrl + Shift + P\nPlatformIO: New Terminal")]),e._v(" "),n("h3",{attrs:{id:"esp-idf"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#esp-idf"}},[e._v("#")]),e._v(" ESP-IDF")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://docs.espressif.com/projects/esp-idf/en/stable/esp32c3/get-started/windows-setup.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Standard Setup of Toolchain for Windows"),n("OutboundLink")],1),e._v(" "),n("a",{attrs:{href:"https://github.com/espressif/vscode-esp-idf-extension/blob/master/README.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("VSCODE + ESP-IDF EXTENTION"),n("OutboundLink")],1)]),e._v(" "),n("ol",[n("li",[e._v("Config extension")])]),e._v(" "),n("p",[e._v('in the ESP-IDF homepage, quick action->click Config extension\nOR\nPress Ctrl + Shift + P to open the Command Palette AND Search for "ESP-IDF: Configure ESP-IDF extension" and select it.')]),e._v(" "),n("p",[e._v("Follow the on-screen setup wizard:")]),e._v(" "),n("ul",[n("li",[e._v("Select download server: Espressif better speed for China")]),e._v(" "),n("li",[e._v("Select ESP-IDF version: important, be careful the compatibility between ESP-IDF and Arduino-as-component")])]),e._v(" "),n("p",[e._v("confrim current active version:\nClick vscode ESP-IDF icon, commands->Open ESP-IDF Terminal\nrun > idf.py reconfigure")]),e._v(" "),n("blockquote",[n("p",[e._v("idf.py --version\nESP-IDF v5.4")])]),e._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[e._v("Create a New ESP-IDF Project")])]),e._v(" "),n("p",[e._v("Board:    ESP32-C3 chip (via built-in USB-JTAG) - This option allows you to flash and debug your ESP32-C3 directly using its built-in USB interface, without needing an external debugger like ESP-PROG.\nTemplate: arduino-as-component")]),e._v(" "),n("p",[n("strong",[e._v("Note:")])]),e._v(" "),n("ul",[n("li",[e._v("arduino-as-component\nAllows you to use Arduino functions (like pinMode, digitalWrite) inside ESP-IDF.\nBest choice if you're familiar with Arduino and want to transition smoothly to ESP-IDF.\nYou can still use ESP-IDF’s low-level features while writing Arduino-style code.")]),e._v(" "),n("li",[e._v("fibonacci-app\nA simple example demonstrating mathematical computations (Fibonacci sequence).\nMore useful for testing ESP-IDF performance, not for hardware projects.")]),e._v(" "),n("li",[e._v('template-app\nA basic empty ESP-IDF project.\nProvides a simple main.c file where you write your code from scratch.\nUses ESP-IDF functions instead of Arduino-style functions.\nChoose this if you want to learn "pure ESP-IDF" (without Arduino).\nExample:'),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('#include "freertos/FreeRTOS.h"\n#include "freertos/task.h"\n#include "driver/gpio.h"\n\n#define LED_PIN 8\n\nvoid app_main(void) {\n    gpio_set_direction(LED_PIN, GPIO_MODE_OUTPUT);\n\n    while (1) {\n        gpio_set_level(LED_PIN, 1); // Turn LED ON\n        vTaskDelay(pdMS_TO_TICKS(500));\n        gpio_set_level(LED_PIN, 0); // Turn LED OFF\n        vTaskDelay(pdMS_TO_TICKS(500));\n    }\n}\n')])])])]),e._v(" "),n("li",[e._v("unity-app\nA project for unit testing code using the Unity test framework.\nUsed for automated testing, not for hardware development.")])]),e._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[e._v("Code\nCMakeLists.txt:")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('idf_component_register(SRCS "src/main.cpp"\n                       INCLUDE_DIRS "."\n                       REQUIRES arduino)\n\n')])])]),n("p",[e._v("idf_component.yml:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('dependencies:\n  espressif/arduino-esp32: "^3.1.1"\n')])])]),n("p",[e._v("main.cpp:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('#include <Arduino.h>\n\nvoid setup() {\n  // No need to initialize the RGB LED\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n#ifdef RGB_BUILTIN\n  digitalWrite(RGB_BUILTIN, HIGH);   // Turn the RGB LED white\n  delay(1000);\n  digitalWrite(RGB_BUILTIN, LOW);    // Turn the RGB LED off\n  delay(1000);\n\n  neopixelWrite(RGB_BUILTIN,RGB_BRIGHTNESS,0,0); // Red\n  delay(2000);\n  neopixelWrite(RGB_BUILTIN,0,RGB_BRIGHTNESS,0); // Green\n  delay(2000);\n  neopixelWrite(RGB_BUILTIN,0,0,RGB_BRIGHTNESS); // Blue\n  delay(1000);\n  neopixelWrite(RGB_BUILTIN,0,0,0); // Off / black\n  delay(1000);\n#endif\n}\n\nextern "C" void app_main()\n{\n    initArduino();\n    setup();\n    while (true) {\n        loop();  // Manually call loop() to mimic Arduino behavior\n    }\n}\n')])])]),n("p",[n("strong",[e._v("Note:")]),e._v('\na. Why Is app_main() Used Instead of setup() and loop()?\nIn Arduino, you have setup() and loop() because the framework automatically handles initialization and looping.\nIn ESP-IDF, there’s no built-in loop mechanism like in Arduino. Instead, it requires an entry function called app_main().\nextern "C" is used to prevent function name mangling in C++.\nb. initArduino(); – Initializes the Arduino framework inside ESP-IDF.')]),e._v(" "),n("ol",{attrs:{start:"4"}},[n("li",[e._v("Build the Code (Compile)")])]),e._v(" "),n("p",[e._v('Press Ctrl + Shift + P → Select "ESP-IDF: Build your project"')]),e._v(" "),n("p",[e._v("BUT")]),e._v(" "),n("p",[e._v("If you've modified any files, reconfigure the project by running:\n"),n("code",[e._v("idf.py reconfigure")]),e._v("\nThen, build again:\n"),n("code",[e._v("idf.py build")])]),e._v(" "),n("p",[e._v("Ensure Arduino is Installed in Your ESP-IDF Environment:\n"),n("code",[e._v("idf.py list-components | grep arduino")]),e._v("\ninstall it manually:\n"),n("code",[e._v('idf.py add-dependency "espressif/arduino-esp32"')])]),e._v(" "),n("ol",{attrs:{start:"5"}},[n("li",[e._v("Downgrade ESP-IDF to Version 5.3")])]),e._v(" "),n("p",[e._v("build error:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("ERROR: Because no versions of espressif/arduino-esp32 match >3.1.1,<4.0.0\n\n   and espressif/arduino-esp32 (3.1.1) depends on idf (>=5.3,<5.4), espressif/arduino-esp32 (>=3.1.1,<4.0.0) requires idf (>=5.3,<5.4).\n\n  So, because no versions of idf match >=5.3,<5.4\n")])])]),n("p",[e._v("check compatibility:\nhttps://github.com/espressif/arduino-esp32/releases\nhttps://components.espressif.com/components/espressif/arduino-esp32/versions/3.1.1")]),e._v(" "),n("p",[e._v("auto install:")]),e._v(" "),n("p",[e._v('back to step 1 Config extension, after install the correct version, then Ctrl + Shift + P → Select "ESP-IDF: select ESP-IDF version (5.3.2)"')]),e._v(" "),n("p",[e._v("manual install:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("cd ~/esp  # Navigate to your ESP-IDF installation directory\ngit clone --branch v5.3--recursive https://github.com/espressif/esp-idf.git esp-idf-v5.3\n\ncd ~/esp/esp-idf-v5.3\n./install.sh esp32c3  # Install ESP-IDF 5.3 for ESP32-C3\n\ncd ~/esp/esp-idf-v5.3\nsource export.sh  # This sets up ESP-IDF 5.3.x\n\nidf.py --version\n")])])]),n("ol",{attrs:{start:"6"}},[n("li",[e._v("create a new project ，set target device and build\ndont use the project created undder previous ESP-IDF 5.4, otherwise will fail build, so create a new project under the downgrade ESP-IDF5.3.2 and use the code above but update:\nCMakeLists.txt\nchange REQUIRES arduino to REQUIRES arduino-esp32 (Starting from ESP-IDF 5.4, Espressif integrated Arduino-ESP32 directly into the ESP-IDF build system. Now, it is internally renamed from arduino-esp32 to just arduino.)")])]),e._v(" "),n("p",[e._v('Press Ctrl + Shift + P → Select "ESP-IDF: set Espressif device target"\nchoose ESP32C3\nthen the sdkconfig will auto add:\nCONFIG_IDF_TARGET_ESP32C3=y')]),e._v(" "),n("p",[e._v("continue, update sdkconfig\nCONFIG_FREERTOS_HZ=1000")]),e._v(" "),n("p",[e._v("then idf.py reconfig and build (important: close all the terminals first, otherwise may cause errors: Project sdkconfig  was generated for target 'esp32c3', but environment variable IDF_TARGET is set to 'esp32'. Run 'idf.py set-target esp32' to generate new sdkconfig file for target esp32.)")]),e._v(" "),n("ol",{attrs:{start:"7"}},[n("li",[e._v("Flash the Code (Upload)")])]),e._v(" "),n("p",[e._v('Press Ctrl + Shift + P → Select "ESP-IDF: Flash your project"')]),e._v(" "),n("p",[e._v("If you see an error about the serial port, find your device's port in Device Manager (Windows) or run:")]),e._v(" "),n("p",[n("code",[e._v("idf.py --port COMx flash monitor")]),e._v("\nReplace COMx with your actual serial port.")]),e._v(" "),n("ol",{attrs:{start:"8"}},[n("li",[e._v("replace Arduino-esp32 with common used ESP-IDF libs")])]),e._v(" "),n("p",[e._v('Remove "REQUIRES arduino-esp32" in CMakeLists.txt')]),e._v(" "),n("p",[e._v("idf_component:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('dependencies:\n  espressif/led_strip: "*"\n')])])]),n("p",[e._v("main.cpp")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('#include "led_strip.h"\n#include "freertos/FreeRTOS.h"\n#include "freertos/task.h"\n\n#define LED_STRIP_GPIO 8  // Built-in RGB LED on ESP32-C3\n#define LED_STRIP_LENGTH 1 // Only 1 LED on the board\n\nstatic led_strip_handle_t led_strip;\n\nvoid init_led() {\n        led_strip_config_t strip_config = {\n        .strip_gpio_num = LED_STRIP_GPIO,\n        .max_leds = LED_STRIP_LENGTH,  \n        .led_model = LED_MODEL_WS2812, \n        .flags = {\n            .invert_out = false\n        }\n    };\n\n    led_strip_rmt_config_t rmt_config = {\n        .resolution_hz = 10 * 1000 * 1000 // 10MHz\n    };\n\n    esp_err_t err = led_strip_new_rmt_device(&strip_config, &rmt_config, &led_strip);\n    if (err != ESP_OK) {\n        printf("LED Strip initialization failed!\\n");\n    }\n}\n\nextern "C" void app_main()\n{\n    init_led();\n\n    while (1) {\n        led_strip_set_pixel(led_strip, 0, 255, 0, 0);  // Red\n        led_strip_refresh(led_strip);\n        vTaskDelay(pdMS_TO_TICKS(1000));\n\n        led_strip_set_pixel(led_strip, 0, 0, 255, 0);  // Green\n        led_strip_refresh(led_strip);\n        vTaskDelay(pdMS_TO_TICKS(1000));\n\n        led_strip_set_pixel(led_strip, 0, 0, 0, 255);  // Blue\n        led_strip_refresh(led_strip);\n        vTaskDelay(pdMS_TO_TICKS(1000));\n\n        led_strip_clear(led_strip); // Turn off LED\n        vTaskDelay(pdMS_TO_TICKS(1000));\n    }\n}\n\n')])])]),n("ol",{attrs:{start:"9"}},[n("li",[e._v("debugging")])]),e._v(" "),n("p",[e._v("Set Up the USB Driver (if needed)")]),e._v(" "),n("p",[e._v("On Windows, install the USB driver from:\n👉 https://www.silabs.com/developers/usb-to-uart-bridge-vcp-drivers\nOn Linux/macOS, your system should detect it automatically.")]),e._v(" "),n("p",[e._v('Press Ctrl + Shift + P → Select "ESP-IDF: show example projects"')]),e._v(" "),n("p",[e._v("https://github.com/espressif/esp-idf/tree/v5.4/examples")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://docs.espressif.com/projects/arduino-esp32/en/latest/esp-idf_component.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Arduino as an ESP-IDF component"),n("OutboundLink")],1),e._v(" "),n("a",{attrs:{href:"https://www.electronics-lab.com/getting-started-with-espressifs-esp32-c3-devkitm-1-on-esp-idf/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Getting Started with Espressif’s ESP32-C3-DevKITM-1 on ESP-IDF"),n("OutboundLink")],1),e._v(" "),n("a",{attrs:{href:"https://www.electronics-lab.com/deep-dive-on-controlling-led-with-esp32-c3-devkitm-1-development-board-using-esp-idf/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Controlling a LED with ESP32-C3-DevKITM-1 Development Board using ESP-IDF"),n("OutboundLink")],1)]),e._v(" "),n("h2",{attrs:{id:"dev"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dev"}},[e._v("#")]),e._v(" DEV")]),e._v(" "),n("h3",{attrs:{id:"pwm"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#pwm"}},[e._v("#")]),e._v(" PWM")]),e._v(" "),n("p",[e._v("https://www.electronicwings.com/esp32/pwm-of-esp32")]),e._v(" "),n("h3",{attrs:{id:"power-options"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#power-options"}},[e._v("#")]),e._v(" Power Options")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://mp.weixin.qq.com/s/JOmDmY3TJXq7wD9f76UtPw",target:"_blank",rel:"noopener noreferrer"}},[e._v("如何给ESP32供电"),n("OutboundLink")],1),e._v("\nTo power your ESP32 dev kit, you have three options:")]),e._v(" "),n("ul",[n("li",[e._v("Via the USB port.")]),e._v(" "),n("li",[e._v("Using unregulated voltage between 5V and 12V, connected to the 5V and GND pins. This voltage is regulated on-board.")]),e._v(" "),n("li",[e._v("Using regulated 3.3V voltage, connected to the 3.3V and GND pins. Be very careful with that: do not exceed the 3.3V limit, or your ESP32 module will be damaged.")])]),e._v(" "),n("p",[e._v("Attention: be very, very careful to only use one of those options at the same time.")]),e._v(" "),n("p",[e._v("For example, do not power your ESP32 dev kit via the 5V pin using a 10V input while at the same time you have the module connected to your computer via USB. This will surely damage your module, and perhaps even your computer.")]),e._v(" "),n("p",[e._v("With this, you should have a good understanding of what the ESP32 is, and you must be eager to get hands-on with it. I totally understand 😃. Let’s proceed with the next lesson, where I’ll show you how to set up the ESP32-Arduino Core on the Arduino IDE.")]),e._v(" "),n("h2",{attrs:{id:"example"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[e._v("#")]),e._v(" Example")]),e._v(" "),n("h3",{attrs:{id:"rgb"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#rgb"}},[e._v("#")]),e._v(" RGB")]),e._v(" "),n("p",[e._v("“addressable” RGB LED,")]),e._v(" "),n("p",[e._v("ESP32-C3 Blink Test with Arduino IDE and DumbDisplay\nhttps://www.youtube.com/watch?v=BAnvHOs5Fks")]),e._v(" "),n("p",[e._v("Guide for WS2812B Addressable RGB LED Strip with Arduino https://randomnerdtutorials.com/guide-for-ws2812b-addressable-rgb-led-strip-with-arduino/")]),e._v(" "),n("p",[e._v("https://espressif-docs.readthedocs-hosted.com/projects/arduino-esp32/en/latest/api/ledc.html")]),e._v(" "),n("h3",{attrs:{id:"esp32cam"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#esp32cam"}},[e._v("#")]),e._v(" ESP32CAM")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://microcontrollerslab.com/esp32-cam-ai-thinker-pinout-gpio-pins-features-how-to-program/",target:"_blank",rel:"noopener noreferrer"}},[e._v("pinout"),n("OutboundLink")],1)]),e._v(" "),n("h4",{attrs:{id:"烧录方案"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#烧录方案"}},[e._v("#")]),e._v(" 烧录方案")]),e._v(" "),n("p",[e._v("没有usb接口，解决方案：")]),e._v(" "),n("ul",[n("li",[e._v("直接买带烧录座的")]),e._v(" "),n("li",[e._v("自行连接一个USB转TTL模块：\n确保接线正确，ESP32-CAM 的IO0接口接地即为烧录模式，不接地悬空即为运作模式\n部分设备烧录前需要按一下RST键，或重新上电重启")]),e._v(" "),n("li",[n("a",{attrs:{href:"https://www.instructables.com/Programming-ESP32-CAM-With-ESP8266/",target:"_blank",rel:"noopener noreferrer"}},[e._v("使用 ESP8266连线烧录"),n("OutboundLink")],1)])]),e._v(" "),n("h4",{attrs:{id:"sta模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sta模式"}},[e._v("#")]),e._v(" STA模式")]),e._v(" "),n("p",[e._v("测试sample ESP32->Camera->CameraWebServer, 确定对应的板子model修改：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('#define CAMERA_MODEL_AI_THINKER // Has PSRAM\nconst char *ssid = "wifi name";\nconst char *password = "password";\n\n')])])]),n("p",[e._v("打开串口监视器，波特率修改为代码里的115200，按一次esp32-cam的RST复位键，即可打印出wifi摄像头的url地址，可以看到esp32使用80端口启动一个web服务，使用81端口传输视频流：")]),e._v(" "),n("p",[e._v("web服务（参数设置、视频播放）：http://x.x.x.x\n视频流地址：http://x.x.x.x:81/stream")]),e._v(" "),n("p",[e._v("如果想单独显示视频，最简单的方法就是建个html页面，里边添加一个img即可：")]),e._v(" "),n("p",[n("code",[e._v('<img id="stream" src="http://192.168.0.102:81/stream">')]),e._v("\n也可以直接jpage压缩后发送二进制流进行显示。")]),e._v(" "),n("h4",{attrs:{id:"ap离线模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ap离线模式"}},[e._v("#")]),e._v(" AP离线模式")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('#include <DNSServer.h>\nDNSServer dnsServer;\n#define DNS_PORT 53\n\nconst char *ssid = "ESP32-CAM_AP";\nconst char *password = "123456";\n\n// Set ESP32-CAM to AP mode\nWiFi.softAP(ssid, password);\nIPAddress apIP = WiFi.softAPIP();\nSerial.println("ESP32-CAM is in AP mode");\nSerial.print("AP IP address: ");\nSerial.println(apIP);\n\n// Set up captive portal DNS server: redirect all queries to our AP IP\ndnsServer.start(DNS_PORT, "*", apIP);\n')])])]),n("p",[e._v("The IP 192.168.4.1 is the default IP address for the ESP32 in AP mode. This IP is assigned automatically when the ESP32 starts as an access point using WiFi.softAP(), can customize by:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("WiFi.softAP(ssid, password, 1, false, 1);\nIPAddress apIP(192, 168, 1, 1);\nWiFi.softAPConfig(apIP, apIP, IPAddress(255, 255, 255, 0));\n\nvoid loop() {\n  // Process DNS requests for captive portal\n  dnsServer.processNextRequest();  // 我没加这个也正常工作 This happens because DNS processing is often handled internally by the ESP32's network stack, and in some cases, the default DNS server behavior can automatically process requests without the need to call processNextRequest().However, in general practice, if you want to handle DNS requests explicitly, you would call processNextRequest() to ensure that the DNS server is running in the loop, especially if you are managing complex DNS resolutions or want more control over how requests are handled. \n}\n")])])]),n("p",[e._v("dns劫持：")]),e._v(" "),n("ul",[n("li",[e._v("DNS Query Mechanism: When a device connects to the ESP32-CAM’s Wi-Fi network, the device tries to resolve a domain name (e.g., when accessing a URL like http://example.com). The device sends a DNS request to the network's DNS server.")]),e._v(" "),n("li",[e._v("DNS Redirection: The DNS server (dnsServer.start(DNS_PORT, \"*\", apIP)) intercepts these DNS requests and responds with the ESP32-CAM's IP address (apIP). This causes the device to navigate to the ESP32-CAM's web server (even if the client tried to access a random URL).")]),e._v(" "),n("li",[e._v("Captive Portal Functionality: By intercepting DNS queries and always pointing them to 192.168.4.1, the ESP32-CAM forces the client to view the content hosted on the ESP32")])]),e._v(" "),n("h3",{attrs:{id:"esp32-12v-solenoid-lock"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#esp32-12v-solenoid-lock"}},[e._v("#")]),e._v(" ESP32 12v solenoid lock")]),e._v(" "),n("p",[e._v("清单：")]),e._v(" "),n("ul",[n("li",[e._v("5v1a 微型电磁锁 ph2.0公头")]),e._v(" "),n("li",[e._v("5v Relay开关")]),e._v(" "),n("li",[e._v("5v1a 电源适配器")]),e._v(" "),n("li",[e._v("ph2.0母头转dc母头")])]),e._v(" "),n("p",[e._v("https://www.circuito.io/app?components=9442,360217,842876")]),e._v(" "),n("p",[e._v("https://www.youtube.com/watch?v=kGkyvVwwuL8")]),e._v(" "),n("p",[e._v("https://esp32io.com/tutorials/esp32-solenoid-lock")]),e._v(" "),n("p",[e._v("https://creativepradeepthehomeofelectronics.blogspot.com/2021/07/smart-wifi-controlled-door-lock-system.html")]),e._v(" "),n("p",[e._v("https://esp32io.com/tutorials/esp32-door-lock-system-using-password")]),e._v(" "),n("p",[e._v("https://www.hackster.io/robocircuits/iot-door-lock-project-0601f5")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('//CreativePradeep//\n#include <WiFi.h>\n#include <WiFiClient.h>\n#include <BlynkSimpleEsp32.h>\n\n\nBlynkTimer timer;\n\n\nint toggleState_1 = 1;\nint pushButton1State = HIGH;\n\n\nint toggleState_2 = 1;\nint pushButton2State = HIGH;\n\n\nint wifiFlag = 0;\n\n\n#define AUTH "AUTH TOKEN"                 // You should get Auth Token in the Blynk App.  \n#define WIFI_SSID "WIFI NAME"             //Enter Wifi Name\n#define WIFI_PASS "WIFI PASSWORD"         //Enter wifi Password\n\n\n#define RELAY_PIN_1      26   //D26\n#define RELAY_PIN_2      27   //D27\n#define WIFI_LED         25   //D25\n\n\n#define PUSH_BUTTON_1    32   //D32\n#define PUSH_BUTTON_2    33   //D33\n\n\n#define VPIN_BUTTON_1    V1 \n#define VPIN_BUTTON_2    V2\n\n\nvoid relayOnOff(int relay){\n\n\n    switch(relay){\n      case 1: \n             if(toggleState_1 == 0){\n              digitalWrite(RELAY_PIN_1, HIGH); // turn on relay 1\n              toggleState_1 = 1;\n              }\n             else{\n              digitalWrite(RELAY_PIN_1, LOW); // turn off relay 1\n              toggleState_1 = 0;\n              }\n             delay(200);\n      break;\n      case 2: \n             if(toggleState_2 == 0){\n              digitalWrite(RELAY_PIN_2, HIGH); // turn on relay 2\n              toggleState_2 = 1;\n              }\n             else{\n              digitalWrite(RELAY_PIN_2, LOW); // turn off relay 2\n              toggleState_2 = 0;\n              }\n             delay(200);\n      break;\n      default : break;      \n      } \n}\n\n\nBLYNK_CONNECTED() {\n  // Request the latest state from the server\n  Blynk.syncVirtual(VPIN_BUTTON_1);\n  Blynk.syncVirtual(VPIN_BUTTON_2);\n}\n\n\n// When App button is pushed - switch the state\n\n\nBLYNK_WRITE(VPIN_BUTTON_1) {\n  toggleState_1 = param.asInt();\n  digitalWrite(RELAY_PIN_1, toggleState_1);\n}\n\n\nBLYNK_WRITE(VPIN_BUTTON_2) {\n  toggleState_2 = param.asInt();\n  digitalWrite(RELAY_PIN_2, toggleState_2);\n}\n\n\nvoid with_internet(){\n  if (digitalRead(PUSH_BUTTON_1) == LOW) {\n      relayOnOff(1);\n      // Update Button Widget\n      Blynk.virtualWrite(VPIN_BUTTON_1, toggleState_1);\n    }\n  if (digitalRead(PUSH_BUTTON_2) == LOW) {\n      relayOnOff(2);\n      // Update Button Widget\n      Blynk.virtualWrite(VPIN_BUTTON_2, toggleState_2);\n    }\n}\nvoid without_internet(){\n  if (digitalRead(PUSH_BUTTON_1) == LOW) {\n      relayOnOff(1);\n    }\n  if (digitalRead(PUSH_BUTTON_2) == LOW) {\n      relayOnOff(2);\n    }\n}\n\n\nvoid checkBlynkStatus() { // called every 3 seconds by SimpleTimer\n\n\n  bool isconnected = Blynk.connected();\n  if (isconnected == false) {\n    wifiFlag = 1;\n    digitalWrite(WIFI_LED, LOW);\n  }\n  if (isconnected == true) {\n    wifiFlag = 0;\n    digitalWrite(WIFI_LED, HIGH);\n  }\n}\n\n\nvoid setup()\n{\n  Serial.begin(9600);\n\n\n  pinMode(RELAY_PIN_1, OUTPUT);\n  pinMode(PUSH_BUTTON_1, INPUT_PULLUP);\n  digitalWrite(RELAY_PIN_1, toggleState_1);\n\n\n  pinMode(RELAY_PIN_2, OUTPUT);\n  pinMode(PUSH_BUTTON_2, INPUT_PULLUP);\n  digitalWrite(RELAY_PIN_2, toggleState_2);\n\n\n  pinMode(WIFI_LED, OUTPUT);\n\n\n  WiFi.begin(WIFI_SSID, WIFI_PASS);\n  timer.setInterval(3000L, checkBlynkStatus); // check if Blynk server is connected every 3 seconds\n  Blynk.config(AUTH);\n}\n\n\nvoid loop()\n{  \n  if (WiFi.status() != WL_CONNECTED)\n  {\n    Serial.println("Not Connected");\n  }\n  else\n  {\n    Serial.println(" Connected");\n    Blynk.run();\n  }\n\n\n  timer.run(); // Initiates SimpleTimer\n  if (wifiFlag == 0)\n    with_internet();\n  else\n    without_internet();\n}\n')])])]),n("h3",{attrs:{id:"esp32-smart-car"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#esp32-smart-car"}},[e._v("#")]),e._v(" "),n("RouterLink",{attrs:{to:"/software/hardware/kid_edu/esp32_smart_car.html"}},[e._v("ESP32 Smart Car")])],1),e._v(" "),n("h3",{attrs:{id:"esp32-robot-arm"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#esp32-robot-arm"}},[e._v("#")]),e._v(" ESP32 Robot Arm")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://www.instructables.com/ESP32-Micro-Robot-Arm/",target:"_blank",rel:"noopener noreferrer"}},[e._v("ESP32 Micro Robot Arm"),n("OutboundLink")],1)]),e._v(" "),n("h3",{attrs:{id:"esp32-ai-robot"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#esp32-ai-robot"}},[e._v("#")]),e._v(" "),n("RouterLink",{attrs:{to:"/software/hardware/kid_edu/esp32_AI.html"}},[e._v("ESP32 AI Robot")])],1),e._v(" "),n("h3",{attrs:{id:"esp32-mini-smart-farm"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#esp32-mini-smart-farm"}},[e._v("#")]),e._v(" ESP32 Mini Smart Farm")]),e._v(" "),n("p",[e._v("https://www.elec-cafe.com/esp32-mini-smart-farm-micropython/")]),e._v(" "),n("h2",{attrs:{id:"troubleshooting"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#troubleshooting"}},[e._v("#")]),e._v(" troubleshooting")]),e._v(" "),n("h3",{attrs:{id:"serial-print-in-the-setup-not-showing"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#serial-print-in-the-setup-not-showing"}},[e._v("#")]),e._v(" Serial.print in the setup() not showing")]),e._v(" "),n("p",[e._v("是因为setup执行比较快，serial monitor还开始监控setup就跑完了，可以重新插电，或者加个延迟语句")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('Serial.println("Starting setup...");\n  delay(10000);\n  Serial.println("Setup complete.");\n')])])]),n("h3",{attrs:{id:"乱码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#乱码"}},[e._v("#")]),e._v(" 乱码")]),e._v(" "),n("p",[e._v("确认代码的波特率 "),n("code",[e._v("Serial.begin(115200);")]),e._v("和监视器的波特率一致，并且 board选择正确")]),e._v(" "),n("h3",{attrs:{id:"class-wificlientsecure-has-no-member-named-setinsecure"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#class-wificlientsecure-has-no-member-named-setinsecure"}},[e._v("#")]),e._v(" class WiFiClientSecure' has no member named 'setInsecure'")]),e._v(" "),n("p",[e._v("upgrade to latest:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("[env:esp32dev]\nplatform = espressif32\nboard = esp32dev\nframework = arduino\nmonitor_speed = 115200\nboard_build.partitions = no_ota.csv\nlib_deps = h2zero/NimBLE-Arduino@^1.3.1\n\t   AugustESP32\n")])])]),n("p",[e._v("=> upgrade to latest")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("[env:esp32dev]\nplatform = https://github.com/platformio/platform-espressif32.git\nboard = esp32dev\nframework = arduino\nplatform_packages =\n    framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32#master\nmonitor_speed = 115200\nboard_build.partitions = no_ota.csv\nlib_deps = h2zero/NimBLE-Arduino@^1.3.1\n    AugustESP32\n")])])]),n("h3",{attrs:{id:"esp32cam初始化失败"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#esp32cam初始化失败"}},[e._v("#")]),e._v(" ESP32CAM初始化失败")]),e._v(" "),n("p",[e._v("选择正确的model，比如\n"),n("code",[e._v("#define CAMERA_MODEL_AI_THINKER // Has PSRAM")])]),e._v(" "),n("p",[e._v("wifi连接 2.4G，\n连接的电脑最好关掉vpn，连接同一个wifi")]),e._v(" "),n("h3",{attrs:{id:"soft-wdt-reset"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#soft-wdt-reset"}},[e._v("#")]),e._v(" Soft WDT reset")]),e._v(" "),n("p",[e._v("使用espnow遥控的时候，接收信息打印日志会报这个错误，因为串口来不及打印，不影响使用，注释掉Serial.print即可")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Soft WDT reset\nException (4):\nepc1=0x40204bc8 epc2=0x00000000 epc3=0x00000000 excvaddr=0x00000000 depc=0x00000000\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);