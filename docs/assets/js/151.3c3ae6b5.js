(window.webpackJsonp=window.webpackJsonp||[]).push([[151],{356:function(e,t,a){"use strict";a.r(t);var o=a(0),n=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[a("a",{attrs:{href:"/docs/software"}},[e._v("回目录")]),e._v("  《GIT》")]),e._v(" "),a("h2",{attrs:{id:"_1-basic"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-basic"}},[e._v("#")]),e._v(" 1.Basic")]),e._v(" "),a("h3",{attrs:{id:"_1-1-concepts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-concepts"}},[e._v("#")]),e._v(" 1.1 Concepts")]),e._v(" "),a("p",[a("img",{attrs:{src:"/docs/docs_image/software/project_manage/git/git01.png",alt:""}}),e._v("\nTracking branch\nNon-tracking branch\nUnderstanding Tracking Branches in Git  https://lornajane.net/posts/2014/understanding-tracking-branches-in-git")]),e._v(" "),a("h3",{attrs:{id:"_1-2-config"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-config"}},[e._v("#")]),e._v(" 1.2 Config")]),e._v(" "),a("p",[a("strong",[e._v("Authentication")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('git config --global user.name "***"\ngit config --global user.email "***"\n\n//如何更新用户密码：\nfor linux:\ngit config --global --unset user.password\nfor windows:\ngit config --global credential.helper wincred\n\n//Adding a new SSH key to your GitHub account\nhttps://help.github.com/en/github/authenticating-to-github/adding-a-new-ssh-key-to-your-github-account\nfor windows user .ssh is under c:/users/<username>/\n\nls -al ~/.ssh\nssh-keygen -t rsa -b 4096 -C "your_email@example.com"\n\n# start the ssh-agent in the background\n$ eval $(ssh-agent -s)\nssh-add ~/.ssh/id_rsa\n\nclip < ~/.ssh/id_rsa.pub\n')])])]),a("p",[a("strong",[e._v("Ignore")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('//首次添加\necho "**/.idea/*" >> .gitignore\ngit status\ngit add .gitignore\ngit commit -m "ignore idea subfolders"\n\t\n//Add to ignore after Commit and pushed \nhttps://stackoverflow.com/questions/7927230/remove-directory-from-remote-repository-after-adding-them-to-gitignore\ngit rm -r --cached desktop/res/\ngit commit -m "remove ignored directory /desktop/res"\ngit status\ngit add .\ngit commit -m "ignore /desktop/res"\ngit status\ngit push origin feature/desktop-magiclink\n\n')])])]),a("p",[a("strong",[e._v("display Chinese character")]),e._v("\ngit config core.quotepath false")]),e._v(" "),a("h3",{attrs:{id:"_1-3-about-repo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-about-repo"}},[e._v("#")]),e._v(" 1.3 About repo")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git remote -v\n\nChange repo url:\ngit remote set-url origin git://test.com/repo.git\n")])])]),a("h3",{attrs:{id:"_1-4-about-branch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-about-branch"}},[e._v("#")]),e._v(" 1.4 About branch")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git branch -vv\ngit branch (-r/-a)\ngit checkout (-b) master\n\n//make it tracking remote branch\ngit branch -u origin/branchname\n\n//delete local\ngit branch -d <branch_name>\n//delete remote branch\ngit push --delete <remote_name> <branch_name>\n\nPushing to a remote https://help.github.com/articles/pushing-to-a-remote/\n\n\ntag\ngit tag\ngit checkout tags/v1.0.8\n")])])]),a("h3",{attrs:{id:"_1-5-about-commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-about-commit"}},[e._v("#")]),e._v(" 1.5 About commit")]),e._v(" "),a("h4",{attrs:{id:"clean-up-reset-revert"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#clean-up-reset-revert"}},[e._v("#")]),e._v(" Clean up / reset / revert")]),e._v(" "),a("p",[e._v("http://sethrobertson.github.io/GitFixUm/fixup.html")]),e._v(" "),a("p",[a("strong",[e._v("Git reflog")]),e._v("\nList commit history")]),e._v(" "),a("p",[a("strong",[e._v("Git reset")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git reset --hard <sha-id>\tgit reset --hard origin/master\ngit reset HEAD^ (unstage)\n//un-commit last un-pushed git commit without losing the changes\ngit reset HEAD~1 --soft https://stackoverflow.com/questions/19859486/how-to-un-commit-last-un-pushed-git-commit-without-losing-the-changes/19859644\n")])])]),a("p",[a("strong",[e._v("Git revert")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("a.to revert changes made to your working copy : git checkout .\nb.to revert changes made to the index which also called as unstage (i.e., that you have added): git reset  (e.g. git reset HEAD index.html)\ngit reset did a great job of unstaging octodog.txt, but you'll notice that he's still there. He's just not staged anymore. It would be great if we could go back to how things were before octodog came around and ruined the party.\nc.to revert a change that you have committed: git revert\n\ngit clean -f (remove untracked file: new files,generated files)\ngit clean -f (to remove the untracked changes) and -fd (to also remove untracked directories) http://stackoverflow.com/questions/61212/remove-local-untracked-files-from-my-current-git-branch\n\n")])])]),a("h4",{attrs:{id:"stash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stash"}},[e._v("#")]),e._v(" Stash")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git stash\nor\ngit stash --include-untracked\n\ngit stash list\n\ngit stash apply/pop \npop和apply有区别：\n\tgit stash apply 后仍然在list中，需要 git stash drop掉\nhttps://stackoverflow.com/questions/15286075/difference-between-git-stash-pop-and-git-stash-apply\n")])])]),a("h4",{attrs:{id:"cherry-pick"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cherry-pick"}},[e._v("#")]),e._v(" Cherry pick")]),e._v(" "),a("p",[e._v("git cherry-pick 60b3ccd807343ccce957aceecb36b1da81d34a45\nhttps://www.atlassian.com/git/tutorials/cherry-pick")]),e._v(" "),a("h3",{attrs:{id:"_1-6-version-history-and-blame"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-version-history-and-blame"}},[e._v("#")]),e._v(" 1.6 Version history and blame")]),e._v(" "),a("p",[e._v("主要工具和命令：")]),e._v(" "),a("p",[e._v("tig / git blame / git log")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('-p代表path\n--follow代表是否跟踪某个文件重命名前后\n\n//所有log\ngit log --graph --oneline --decorate --all\n\n//Particular File Change History：\ngit log -p -- src/pages/basic/table/table/SeperateTable.jsx\ngit log --follow -p -- test/src/main/java/test.java\n\n//Show all of the various changes to a single line in a specified file over the entire git history\ngit log -L 292,292:src/pages/basic/table/table/SeperateTable.jsx\n\n//recent commit log\ngit log -n 1 --pretty=format:%H -- test/src/main/java/test.java\nFirst git log -p | grep "Disruptor"\nThen git log –S ‘search text’\n\n//Show what revision and author last modified each line of a file\ngit blame\n\ngit show commit-hash\ngit show REVISION:/path/to/file\ngit show 15928170ffecd7022301a***:****.java\nhttps://stackoverflow.com/questions/1057564/pretty-git-branch-graphs\n\ngit diff master..standardised-meetup-contract-xml\n')])])]),a("h2",{attrs:{id:"_2-advance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-advance"}},[e._v("#")]),e._v(" 2.Advance")]),e._v(" "),a("h3",{attrs:{id:"_2-1-about-submodule-subtree-worktree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-about-submodule-subtree-worktree"}},[e._v("#")]),e._v(" 2.1 About submodule/subtree/worktree")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("submodule\ngit submodule update --init --recursive\nhttps://kalyanchakravarthy.net/blog/git-discard-submodule-changes/\ngit submodule update --recursive\nhttps://www.youtube.com/watch?v=UQvXst5I41I")])]),e._v(" "),a("li",[a("p",[e._v("subtree\nhttps://www.youtube.com/watch?v=t3Qhon7burE")])]),e._v(" "),a("li",[a("p",[e._v("worktree")])])]),e._v(" "),a("p",[e._v("https://www.youtube.com/watch?v=h1bifLAnrXA")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tig\n git worktree add ../TestWT\n tig\n git worktree list\n git worktree remove --force TestWT\n")])])]),a("h3",{attrs:{id:"_2-2-about-fork"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-about-fork"}},[e._v("#")]),e._v(" 2.2 About fork")]),e._v(" "),a("ol",[a("li",[e._v("normal fork\nhttps://www.youtube.com/watch?v=_NrSWLQsDL4")])]),e._v(" "),a("p",[e._v("Sync with upstream\nhttps://help.github.com/articles/syncing-a-fork/\nhttps://help.github.com/articles/configuring-a-remote-for-a-fork/")]),e._v(" "),a("p",[e._v("git remote add upstream https://github.com/AlphaWallet/alpha-wallet-android.git\ngit fetch upstream\ngit checkout master\ngit merge upstream/master\ngit push\ngit checkout feature/desktop-magiclink\ngit merge master\ngit push")]),e._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[e._v("fork from other source\nhttps://gist.github.com/DavideMontersino/810ebaa170a2aa2d2cad\nhttps://stackoverflow.com/questions/6286571/are-git-forks-actually-git-clones\nExample:")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('git clone https://github.com/lyhistory/xmlsectool.git\ncd xmlsectool/\ngit remote rename origin upstream\ngit remote add origin git://git.shibboleth.net/xmlsectool\ngit remote -v\ngit pull origin master\ngit push upstream master\n\ngit add .\ngit status\ngit commit -m "add support for rfc4050"\ngit push upstream master\n')])])]),a("p",[a("img",{attrs:{src:"/docs/docs_image/software/project_manage/git/git02.png",alt:""}})]),e._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[e._v("auto sync from upstream/origin\nhttps://stackoverflow.com/questions/23793062/can-forks-be-synced-automatically-in-github")])]),e._v(" "),a("h3",{attrs:{id:"_2-3-about-workflow-wrap-up-all-the-previous-knowledge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-about-workflow-wrap-up-all-the-previous-knowledge"}},[e._v("#")]),e._v(" 2.3 About workflow - wrap up all the previous knowledge")]),e._v(" "),a("p",[e._v("shelve changes / git stack https://www.youtube.com/watch?v=Zb8k8q8n8Ao")]),e._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[e._v("git merge and git rebase\nhttps://www.atlassian.com/git/tutorials/merging-vs-rebasing")])]),e._v(" "),a("p",[e._v("Git merge")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\tGit pull origin master\n\tgit merge --abort\n\tgit checkout --theirs -- Lib/test.dll\n")])])]),a("p",[e._v("git rebase")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("branch master & develop\ncommit changes in develop branch ( don't push!)\nswitch to master and git pull\nswitch to develop git rebase master\n")])])]),a("p",[e._v("if got conflict follow instruction, manually resolve it and git add to mark it as resolved and then git rebase --continue\nnow is good to do merge")]),e._v(" "),a("p",[e._v("Basic Branching and Merging https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging\nGIT: FETCH AND MERGE, DON’T PULL http://longair.net/blog/2009/04/16/git-fetch-and-merge/")]),e._v(" "),a("p",[e._v("create merge request / pull request\nHow to Git PR From The Command Line https://hackernoon.com/how-to-git-pr-from-the-command-line-a5b204a57ab1")]),e._v(" "),a("h2",{attrs:{id:"_3-best-practice"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-best-practice"}},[e._v("#")]),e._v(" 3.Best Practice")]),e._v(" "),a("p",[e._v("The seven rules of a great git commit message:\nhttps://chris.beams.io/posts/git-commit/")]),e._v(" "),a("p",[e._v("使用ssh！")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('ssh-keygen -t rsa -b 4096 -C "lyhistory@gmail.com"\neval $(ssh-agent -s)\nssh-add ~/.ssh/id_rsa\n更改passphrase密码\nssh-keygen -p -f /path/to/ssh_key\n\nclip < ~/.ssh/id_rsa.pub\n# Copies the contents of the id_rsa.pub file to your clipboard\n\n加入到github\nhttps://docs.github.com/en/github/authenticating-to-github/adding-a-new-ssh-key-to-your-github-account\n加入到gitlab\nhttps://gitlab.com/help/ssh/README#rsa-ssh-keys\n\n')])])]),a("p",[a("strong",[e._v("Make Your Life Easier With These Git Workflows:")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("https://hackernoon.com/make-your-life-easier-with-these-git-workflows-part-i-mb243ztb\n!$ replaced with last used argument\ngit commit --amend append changes to the previous commit\ngit reset HEAD~1 undo the latest commit\n--soft keep workspace changes\n--hard discard workspace changes\n--force overwrite existing code in repository\n")])])]),a("h2",{attrs:{id:"_4-案例：set-up-git-server-fork-uptream"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-案例：set-up-git-server-fork-uptream"}},[e._v("#")]),e._v(" 4. 案例：set up git server & fork uptream")]),e._v(" "),a("p",[e._v("https://git-scm.com/book/en/v2/Git-on-the-Server-Setting-Up-the-Server")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$mkdir test.git\n$cd test.git/\n$git init --bare\nInitialized empty Git repository in /git_home/test.git/\n\n")])])]),a("p",[e._v("本地：全新提交")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# on John's computer\n$ cd myproject\n$ git init\n$ git add .\n$ git commit -m 'Initial commit'\n$ git remote add origin git@gitserver:/srv/git/project.git\n$ git push origin master\n")])])]),a("p",[e._v("本地：已有git转成空仓发布")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("https://blog.csdn.net/chenzhengfeng/article/details/81743626\n\ngit clone --bare /home/project/sw\ntouch sw/git-daemon-export-ok\n")])])]),a("p",[e._v("本地：upstream提交")]),e._v(" "),a("p",[e._v("https://blog.csdn.net/liuchaoxuan/article/details/80656145")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("初始化\n$ git remote rename origin upstream\nC:\\Workspace\\Repository\\test>git remote -v\nupstream        http://<anotherip>/test.git (fetch)\nupstream        http://<anotherip>/test.git (push)\n\n$ git remote add origin git@<ip>:/git_home/test.git\n$ git remote -v\norigin  git@<ip>:/git_home/test.git (fetch)\norigin  git@<ip>:/git_home/test.git (push)\nupstream        http://<anotherip>/test.git (fetch)\nupstream        http://<anotherip>/test.git (push)\n$ git push origin master\n\n同步upstream到origin / sync forking repo\ngit checkout master\ngit pull upstream master \ngit push origin master\nOR \nhttps://docs.github.com/en/free-pro-team@latest/github/collaborating-with-issues-and-pull-requests/syncing-a-fork\ngit fetch upstream\ngit checkout master\ngit merge upstream/main\n\n提交到upstream\n正常merge\ngit push upstream master\n\n强制同步到upstream\nhttps://github.community/t/syncing-a-fork-leaves-me-one-commit-ahead-of-upstream-master/1435\ngit checkout master\ngit reset --hard upstream/master\ngit push --force\n\n")])])]),a("h2",{attrs:{id:"_5-troubleshooting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-troubleshooting"}},[e._v("#")]),e._v(" 5.Troubleshooting")]),e._v(" "),a("p",[e._v("?#1.If you are running git under a file system that is not case sensitive (Windows or OS X) this will occur if there are two branches with the same name but different capitalisation, e.g. user_model_changes and User_model_changes as both of the remote branches will match the same tracking ref. Delete the wrong remote branch (you shouldn't have branches that differ only by case) and then git remote prune origin and everything should work")]),e._v(" "),a("p",[e._v("?#2.The remote end hung up unexpectedly while git cloning\nWith this kind of error, I usually start by raising the postBuffer size by:\ngit config --global http.postBuffer 524288000\n(some comments below report having to double the value):\ngit config --global http.postBuffer 1048576000\nhttp://stackoverflow.com/questions/6842687/the-remote-end-hung-up-unexpectedly-while-git-cloning")]),e._v(" "),a("p",[e._v("?#3.error: Your local changes to the following files would be overwritten by merge: ****** Please, commit your changes or stash them before you can merge.\na.give up all local changes, and force update with latest source from remote\ngit fetch --all git reset --hard origin/master\nb.only discard specific files which have conflicts\ngit checkout folderName/fileName.ext  (ext: git checkout <branch_name> -- "),a("paths",[e._v(')\nc.fetch and merge\nd.git stash git stash pop (By default git stash will not stash files for which there are no history. So if you have files which you have not yet added but which would be overwritten or "created" by the merge, then the merge will still block. In that situation, you can use git stash -u to stash uncommitted files)\nhttp://www.cppblog.com/deercoder/archive/2011/11/13/160007.html')])],1),e._v(" "),a("p",[e._v("--")]),e._v(" "),a("p",[e._v("Apendix:<"),a("Merging",{attrs:{and:"",Branching:"",Strategy:""}},[e._v(">\n"),a("img",{attrs:{src:"/docs/docs_image/software/project_manage/git/git03.png",alt:""}}),e._v(" "),a("img",{attrs:{src:"/docs/docs_image/software/project_manage/git/git04.png",alt:""}})])],1),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("1. introduce git flow\nBecause most of us have to deal with GIT every day, it’s necessary to level up a little bit in order to collaborate with each other more efficiently.\ngit enables people working from a remote place, streamlining the development process, maintain all the code changes history, it keeps all the states of the application at each time point of commits, so it’s easier for us to find bugs and blame the people who made the changes.\n\nLet’s first look at git flow, so we can have a basic idea of how git may help our application development.\nThis one is a relatively general git flow.\nGit flow is a well-known method to manage git branches.\n\nthe development will happen in feature branches, here we have features for future release and feature for next release, when programmer starts to develop a module or a feature, he will create a new feature branch initialled from develop branch, once done the development, feature branch owner will do the merge to develop, after develop branch has some features or reach a milestone, it will be merged to release branch, and QA will do the testing, if any issue is found, it will be fixed in release and merge back to develop, and once the release branch is fully tested, someone will create a pull request for merging to master, after reviewer or project leader reviewed the code changes, he may approve the request and do the merge, ideally master branch should be ready for product deployment at any point of time, but if any defects detected or urgent changes required, we will do it in hotfix branch, once done, it will be merged to master branch and merge back to develop branch as well.\n\n2. common scenario - git merge & git rebase\nConsider what happens when you start working on a new feature in a dedicated branch, then another team member updates the develop branch with new commits. This results in a forked history.\nAssume now you have done the development work on feature,  you want to merge it to develop branch: how many options you have: cherry-pick or merge or rebasing+merge\nbecause cherry-pick is not a structured way to do the merge, so I'm not going to discuss it.\nthis is what happens behind the scene when you git merge in command line or use GUI tool.\nit will merge between  C3&C4 and their most recent common ancestor C2 and create a new commit C5\nrebase works by going to the common ancestor of the two branches C2, getting the diff introduced by each commit of feature C4 , saving those diffs to temporary files, resetting feature branch to the same commit as develop (the branch you are rebasing onto), and finally applying each change in turn C4 prime.Now you switch to develop branch, and do git merge, it will do a fast-forward merge.\nbut what will happen if someone updated develop branch in between, I mean between you have done rebase and start to do merge on develop.\nif your purpose is to keep a linear clean commit history on an active branch, rebase can help you .\n \n3. when to use rebase\nBad practice\nrebase develop onto your feature.\nThe problem is that this only happened in your repository. All of the other developers are still working with the original develop. Since rebasing results in brand new commits, Git will think that your develop branch’s history has diverged from everybody else’s.\nGolden rule - never use it on public branch(Is anyone looking at this branch?)\nGood practice (go to previous slide)\nNow, let’s say that the new commits in develop are relevant to the feature that you’re working on.\nOne typical situation,\nwhen someone has done a hot-fix for master,\nby right, this hot-fix will be merged back to develop branch,\nand you cannot continue with your development without this hot-fix in your feature branch,\nthen you may consider using rebase to get latest from develop\nTo incorporate the new commits into your feature branch,.\nmost of the time you may work solely on one feature branch, but if more than one developer working on same feature branch\nyou want to keep updated with latest changes or you want to keep a clean graph/commit history\nconclusion:\nconflict is inevitable, by adopting appropriate merging strategy, we can mitigate the risk of getting too many conflicts.\nanother suggestion is always examine your current status, which branch you are in,is there any other people working on this branch, and are you behind remote branches or ahead of remote branches with how many commits\nhopefully you may have a better understanding of the merging strategy and understand what happens behind the scene.\nhttps://git-scm.com/book/en/v2/Git-Branching-Rebasing\n1. rebase is in local\nall changes apply onto parent's latest changes\nthen can do the merge\nquestion: 1.how abt someone push new changes to parent branch\n2.before rebase you pushed to remote, cannot do the fast-forward merge\n2. merge in remote - pull request\nlatest changes and common ancestor changes\nA forked commit history\nactive 'parent' branch\nhttps://www.atlassian.com/git/tutorials/merging-vs-rebasing/conceptual-overview\ngit rebase is good for local cleanup,\nlocal cleanup? team policy?\nhttps://www.atlassian.com/git/articles/git-team-workflows-merge-or-rebase/\ndon't commit so frequently, like writing 1 line code then commit, other people who commit later will suffer\n \nhttps://steemit.com/bitcoin/@sblue/what-is-git-github-the-3-minute-journey-through-bitcoins-github-history\nhttp://csci221.artifice.cc/lecture/collaboration-with-git.html\n\nhttp://flsilva.com/blog/git-branching-and-merging/\nhttps://longair.net/blog/2009/04/16/git-fetch-and-merge/\n\n# what’s Git\nGIT stores the state of your application at points in time known as commits. It does this in a clever way that means you don't have to store the whole state of your application, it just records a series of changes.\nIn GIT you have a master branch which (usually) stores the working, production state of your application. You can also create other branches for working on specific things such as features or bug fixes. This allows you and other developers to continue development without affecting the master branch.\nOnce testing is complete, you can merge these branches into your master/production branch. If you are developing a website using GIT, you might have the repository stored on a server somewhere. You can set up a hook in GIT that pushes your master commits to this repository, but no others.\nOne advantage this has over FTP is that GIT will just push the changes and not the files themselves, making uploading new versions a lot quicker.\nGIT, however, has a few other fantastic features. Finding the source of bugs in GIT is extremely easy. It has built in tools for finding where a piece of code stopped working.\n\n# Git vs SVN\nGit is not better than Subversion. But is also not worse. It's different.\nThe key difference is that it is decentralized. Imagine you are a developer on the road, you develop on your laptop and you want to have source control so that you can go back 3 hours.\nWith Subversion, you have a Problem: The SVN Repository may be in a location you can't reach (in your company, and you don't have internet at the moment), you cannot commit. If you want to make a copy of your code, you have to literally copy/paste it.\nWith Git, you do not have this problem. Your local copy is a repository, and you can commit to it and get all benefits of source control. When you regain connectivity to the main repository, you can commit against it.\n# bitcoin team\nTeam\nThe Bitcoin Core project has a large open source developer community with many casual contributors to the codebase. There are many more who contribute research, peer review, testing, documentation, and translation.\nMaintainers\nProject maintainers have commit access and are responsible for merging patches from contributors. They perform a janitorial role merging patches that the team agrees should be merged. They also act as a final check to ensure that patches are safe and in line with the project goals. The maintainers’ role is by agreement of project contributors.\nContributors\nEveryone is free to propose code changes and to test, review and comment on open Pull Requests. Anyone who contributes code, review, test, translation or documentation to the Bitcoin Core project is considered a contributor. The release notes for each Bitcoin Core software release contain a credits section to recognize all those who have contributed to the project over the previous release cycle. A list of code contributors for the last year can be found on Github.\n\n")])])]),a("hr"),e._v(" "),a("p",[e._v("Ref:\nCheatsheet\nhttps://illustrated-git.readthedocs.io/en/latest/\nTake your Git practice to the next level"),a("br"),e._v("\nhttps://www.youtube.com/watch?v=eZRJyduqGuQ")]),e._v(" "),a("p",[e._v("git仓库与项目源码分离")]),e._v(" "),a("p",[e._v("https://blog.csdn.net/sinat_34349564/article/details/52442526")])])}),[],!1,null,null,null);t.default=n.exports}}]);