(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{276:function(e,t,s){"use strict";s.r(t);var r=s(0),a=Object(r.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[s("a",{attrs:{href:"/docs/software"}},[e._v("回目录")]),e._v("  《分布式缓存redis》")]),e._v(" "),s("h2",{attrs:{id:"install"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#install"}},[e._v("#")]),e._v(" Install")]),e._v(" "),s("p",[e._v("https://redis.io/topics/quickstart\nwget http://download.redis.io/redis-stable.tar.gz\ntar xvzf redis-stable.tar.gz\ncd redis-stable\nmake\nmake test\nsudo cp src/redis-server /usr/local/bin/\nsudo cp src/redis-cli /usr/local/bin/")]),e._v(" "),s("blockquote",[s("p",[e._v("Installing Redis more properly\nRunning Redis from the command line is fine just to hack a bit with it or for development. However at some point you'll have some actual application to run on a real server. For this kind of usage you have two different choices:")]),e._v(" "),s("ul",[s("li",[e._v("Run Redis using screen.")]),e._v(" "),s("li",[e._v("Install Redis in your Linux box in a proper way using an init script, so that after a restart everything will start again properly.\nA proper install using an init script is strongly suggested. The following instructions can be used to perform a proper installation using the init script shipped with Redis 2.4 in a Debian or Ubuntu based distribution.")])]),e._v(" "),s("p",[e._v("We assume you already copied redis-server and redis-cli executables under /usr/local/bin.")]),e._v(" "),s("ul",[s("li",[e._v("Create a directory in which to store your Redis config files and your data:\nsudo mkdir /etc/redis\nsudo mkdir /var/redis")]),e._v(" "),s("li",[e._v("Copy the init script that you'll find in the Redis distribution under the utils directory into /etc/init.d. We suggest calling it with the name of the port where you are running this instance of Redis. For example:\nsudo cp utils/redis_init_script /etc/init.d/redis_6379")]),e._v(" "),s("li",[e._v("Edit the init script.\nsudo vi /etc/init.d/redis_6379\n...\nhttps://redis.io/topics/quickstart")])])]),e._v(" "),s("h3",{attrs:{id:"single-node"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#single-node"}},[e._v("#")]),e._v(" Single node")]),e._v(" "),s("p",[e._v("redis-server\nOr start with config\nredis-server redis.conf")]),e._v(" "),s("h3",{attrs:{id:"cluster-mode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cluster-mode"}},[e._v("#")]),e._v(" Cluster Mode")]),e._v(" "),s("p",[e._v("Redis cluster tutorial https://redis.io/topics/cluster-tutorial\nConfig:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('daemonize yes  #后台运行模式\nlogfile “redis_6379_log”\npidfile /home/web/redis/var/run/redis_6379.pid  #修改pid文件\ndir /home/web/redis/data/ #指定本地数据库存放目录\nport 6379  #端口\ndbfilename dump_6379.rdb #数据文件\nappendfilename "appendonly_6379.aof"\ncluster-enabled yes #打开注释，启动cluster模式\ncluster-config-file nodes-6379.conf #打开注释，启动cluster模式\n# Cluster node timeout is the amount of milliseconds a node must be unreachable\n# for it to be considered in failure state.\n# Most other internal time limits are multiple of the node timeout.\ncluster-node-timeout 15000 #打开注释，启动cluster模式\n')])])]),s("p",[e._v("参考最低配置：https://redis.io/topics/cluster-tutorial\n"),s("em",[e._v("Note that the minimal cluster that works as expected requires to contain at least three master nodes.")])]),e._v(" "),s("p",[e._v("redis-server conf/redis6379.conf\nredis-server conf/redis6380.conf\nredis-server conf/redis6381.conf\nredis-cli --cluster create "),s("HOSTIP1",[e._v(":6379 "),s("HOSTIP1",[e._v(":6380 "),s("HOSTIP1",[e._v(":6381 "),s("br"),e._v(" "),s("HOSTIP2",[e._v(":6379 "),s("HOSTIP2",[e._v(":6380 "),s("HOSTIP2",[e._v(":6381 "),s("br"),e._v(" "),s("HOSTIP3",[e._v(":6379 "),s("HOSTIP3",[e._v(":6380 "),s("HOSTIP3",[e._v(":6381 "),s("br"),e._v("\n--cluster-replicas 2")])],1)],1)],1)],1)],1)],1)],1)],1)],1),e._v(" "),s("p",[e._v("控制脚本：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('REDIS_HOME=/opt/redis-5.0.5\npushd ${REDIS_HOME} &>/dev/null\n\nwhile [ "${1:0:1}" == "-" ]; do\n  case $1 in\n    --start)\n      echo "Starting redis nodes..."\n      redis-server conf/redis6379.conf\n      redis-server conf/redis6380.conf\n      redis-server conf/redis6381.conf\n      ;;\n    --kill)\n      echo "Stopping redis nodes..."\n      redis-cli -p 6379 shutdown\n      redis-cli -p 6380 shutdown\n      redis-cli -p 6381 shutdown\n          ;;\n    *)\n      echo "usage: --start|--kill"\n      exit 1\n      ;;\n  esac\n  shift\ndone\n\n')])])]),s("h2",{attrs:{id:"集群管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#集群管理"}},[e._v("#")]),e._v(" 集群管理")]),e._v(" "),s("h3",{attrs:{id:"basic-cmd-gui"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#basic-cmd-gui"}},[e._v("#")]),e._v(" BASIC CMD&GUI")]),e._v(" "),s("p",[e._v("https://redis.io/topics/rediscli")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("redis-cli --cluster help\nredis-cli -c -h <HOSTIP> -p <PORT>\n\tcluster help\n\tcluster info\n\tcluster nodes\n\tcluster slots\n\treplicate NODEID\n\tcluster failover (on slave node)\n\t\tkeys * (Check empty)\n\t\tflushdb/flushall (on master nodes)\n\t\tcluster reset(soft/hard, chang slave to an empty ‘standalone’ master)\n\t\tSlaveof no one (change slave to master, cannot execute in cluster mode)\n\tSlave host port (change slave to replicate another master, cannot execute in cluster mode)\n\t\nredis-cli --cluster check <HOSTIP>:<PORT>\n\nredis-cli --cluster fix <HOSTIP>:<PORT>\nredis-cli -h <HOSTIP> -p <PORT> cluster meet <TARGETHOSTIP> <TARGETPORT>\nredis-cli cluster forget <NODEID> (cannot perform on itself or it’s slave)\nredis-cli --cluster del-node <HOSTIP>:<PORT> <NODEID>\n#add-node默认是empty master，也可以加参数指定为slave ()\nredis-cli --cluster add-node <HOSTIP>:<PORT> <ANOTHER HOSTIP>:<PORT> --cluster-slave --cluster-master-id <NODEID>\n\nredis-cli -p 7002 shutdown\nredis-cli -p 7002 debug segfault\n\nredis-cli --cluster reshard <ANYHOSTIP>:<ANYPORT> --cluster-yes\nredis-cli --cluster rebalance --cluster-threshold 1 <ANYHOSTIP>:<ANYPORT>\n\nMore:\nDatabase\nhttps://stackoverflow.com/questions/50534492/redis-how-to-get-current-database-name\nhttps://redis.io/commands/client-list\n\nclient list\nredis-cli INFO|grep db\nredis-cli INFO|grep db|wc -l\nredis-cli INFO keyspace\n\nredis implement stored procedure \nhttps://redis.io/commands/eval\n\n")])])]),s("p",[e._v("** GUI:\nuse colon as separator https://redisdesktop.com/\nDbeaver support nosql but only for enterprise edition\nOptionally we can choose fastoredis https://fastoredis.com/anonim_users_downloads")]),e._v(" "),s("h3",{attrs:{id:"理论基础-theory"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#理论基础-theory"}},[e._v("#")]),e._v(" 理论基础 Theory")]),e._v(" "),s("p",[e._v("学习redis源码过程笔记、问题记录，通过代码阅读熟悉分布式NOSQL数据库redis cluster集群功能、主从复制，节点扩容、槽位迁移、failover故障切换、一致性选举完整分析，对理解redis源码很有帮助  https://github.com/daniel416/Reading-and-comprehense-redis/")]),e._v(" "),s("p",[e._v("https://redis.io/topics/cluster-spec")]),e._v(" "),s("p",[e._v("An introduction to Redis data types and abstractions https://redis.io/topics/data-types-intro")]),e._v(" "),s("p",[e._v("**TCP PORTS:\nEvery Redis Cluster node requires two TCP connections open. The normal Redis TCP port used to serve clients, for example 6379, plus the port obtained by adding 10000 to the data port, so 16379 in the example.")]),e._v(" "),s("p",[e._v("**DATA SHARDING:\n16384 slots, hash slot ,why ? https://cloud.tencent.com/developer/article/1042654\n16384这个数字也不是作者随意指定的，Redis集群内部使用位图（bit map）来标志一个slot是否被占用，为了减少集群之间信息交换的大小，信息的大小被固定为2048字节\n2048 bytes = 2^11 * 8 bit= 2^14 bit= 16384\n14 out of 16 CRC16 output bits are used (this is why there is a modulo 16384 operation in the formula above).")]),e._v(" "),s("p",[e._v("Hash tag and multiple key operations\nthis{foo}key and another{foo}key are guaranteed to be in the same hash slot, and can be used together in a command with multiple keys as arguments")]),e._v(" "),s("p",[e._v("**ConfigEpoch and current epoch\nThis mechanism in Redis Cluster is called last failover wins.\nWhen a slave fails over its master, it obtains a configuration epoch which is guaranteed to be greater than the one of its master (and more generally greater than any other configuration epoch generated previously). For example node B, which is a slave of A, may failover B with configuration epoch of 4. It will start to send heartbeat packets (the first time mass-broadcasting cluster-wide) and because of the following second rule, receivers will update their hash slot tables")]),e._v(" "),s("p",[e._v("The same happens during reshardings. When a node importing a hash slot completes the import operation, its configuration epoch is incremented to make sure the change will be propagated throughout the cluster.")]),e._v(" "),s("blockquote",[s("p",[e._v("Practical example of configuration epoch usefulness during partitions\nThis section illustrates how the epoch concept is used to make the slave promotion process more resistant to partitions.")])]),e._v(" "),s("blockquote",[s("ul",[s("li",[e._v("A master is no longer reachable indefinitely. The master has three slaves A, B, C.")]),e._v(" "),s("li",[e._v("Slave A wins the election and is promoted to master.")]),e._v(" "),s("li",[e._v("A network partition makes A not available for the majority of the cluster.")]),e._v(" "),s("li",[e._v("Slave B wins the election and is promoted as master.")]),e._v(" "),s("li",[e._v("A partition makes B not available for the majority of the cluster.")]),e._v(" "),s("li",[e._v("The previous partition is fixed, and A is available again.\nAt this point B is down and A is available again with a role of master (actually UPDATE messages would reconfigure it promptly, but here we assume all UPDATE messages were lost). At the same time, slave C will try to get elected in order to fail over B. This is what happens:")])])]),e._v(" "),s("blockquote",[s("p",[e._v("1.C will try to get elected and will succeed, since for the majority of masters its master is actually down. It will obtain a new incremental configEpoch.\n2.A will not be able to claim to be the master for its hash slots, because the other nodes already have the same hash slots associated with a higher configuration epoch (the one of B) compared to the one published by A.\n3.So, all the nodes will upgrade their table to assign the hash slots to C, and the cluster will continue its operations.\nhttps://redis.io/topics/cluster-spec")])]),e._v(" "),s("p",[e._v("**CONSISTENCY GUARANTEE:\nRedis Cluster is not able to guarantee strong consistency. In practical terms this means that under certain conditions it is possible that Redis Cluster will lose writes that were acknowledged by the system to the client.\nTradeoff between Synchronous write and Performance")]),e._v(" "),s("p",[e._v("Redis Sentinel vs Redis Cluster:\nhttps://redislabs.com/redis-features/high-availability")]),e._v(" "),s("h3",{attrs:{id:"自动方式管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自动方式管理"}},[e._v("#")]),e._v(" 自动方式管理")]),e._v(" "),s("p",[e._v("1.Replicas migration")]),e._v(" "),s("blockquote",[s("h1",{attrs:{id:"cluster-replicas-are-able-to-migrate-to-orphaned-masters-that-are-masters"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cluster-replicas-are-able-to-migrate-to-orphaned-masters-that-are-masters"}},[e._v("#")]),e._v(" Cluster replicas are able to migrate to orphaned masters, that are masters")]),e._v(" "),s("h1",{attrs:{id:"that-are-left-without-working-replicas-this-improves-the-cluster-ability"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#that-are-left-without-working-replicas-this-improves-the-cluster-ability"}},[e._v("#")]),e._v(" that are left without working replicas. This improves the cluster ability")]),e._v(" "),s("h1",{attrs:{id:"to-resist-to-failures-as-otherwise-an-orphaned-master-can-t-be-failed-over"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#to-resist-to-failures-as-otherwise-an-orphaned-master-can-t-be-failed-over"}},[e._v("#")]),e._v(" to resist to failures as otherwise an orphaned master can't be failed over")]),e._v(" "),s("h1",{attrs:{id:"in-case-of-failure-if-it-has-no-working-replicas"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#in-case-of-failure-if-it-has-no-working-replicas"}},[e._v("#")]),e._v(" in case of failure if it has no working replicas.")]),e._v(" "),s("h1",{attrs:{id:""}},[s("a",{staticClass:"header-anchor",attrs:{href:"#"}},[e._v("#")])]),e._v(" "),s("h1",{attrs:{id:"replicas-migrate-to-orphaned-masters-only-if-there-are-still-at-least-a"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#replicas-migrate-to-orphaned-masters-only-if-there-are-still-at-least-a"}},[e._v("#")]),e._v(" Replicas migrate to orphaned masters only if there are still at least a")]),e._v(" "),s("h1",{attrs:{id:"given-number-of-other-working-replicas-for-their-old-master-this-number"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#given-number-of-other-working-replicas-for-their-old-master-this-number"}},[e._v("#")]),e._v(" given number of other working replicas for their old master. This number")]),e._v(" "),s("h1",{attrs:{id:"is-the-migration-barrier-a-migration-barrier-of-1-means-that-a-replica"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#is-the-migration-barrier-a-migration-barrier-of-1-means-that-a-replica"}},[e._v("#")]),e._v(' is the "migration barrier". A migration barrier of 1 means that a replica')]),e._v(" "),s("h1",{attrs:{id:"will-migrate-only-if-there-is-at-least-1-other-working-replica-for-its-master"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#will-migrate-only-if-there-is-at-least-1-other-working-replica-for-its-master"}},[e._v("#")]),e._v(" will migrate only if there is at least 1 other working replica for its master")]),e._v(" "),s("h1",{attrs:{id:"and-so-forth-it-usually-reflects-the-number-of-replicas-you-want-for-every"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#and-so-forth-it-usually-reflects-the-number-of-replicas-you-want-for-every"}},[e._v("#")]),e._v(" and so forth. It usually reflects the number of replicas you want for every")]),e._v(" "),s("h1",{attrs:{id:"master-in-your-cluster"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#master-in-your-cluster"}},[e._v("#")]),e._v(" master in your cluster.")]),e._v(" "),s("h1",{attrs:{id:"-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[e._v("#")])]),e._v(" "),s("h1",{attrs:{id:"default-is-1-replicas-migrate-only-if-their-masters-remain-with-at-least"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#default-is-1-replicas-migrate-only-if-their-masters-remain-with-at-least"}},[e._v("#")]),e._v(" Default is 1 (replicas migrate only if their masters remain with at least")]),e._v(" "),s("h1",{attrs:{id:"one-replica-to-disable-migration-just-set-it-to-a-very-large-value"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#one-replica-to-disable-migration-just-set-it-to-a-very-large-value"}},[e._v("#")]),e._v(" one replica). To disable migration just set it to a very large value.")]),e._v(" "),s("h1",{attrs:{id:"a-value-of-0-can-be-set-but-is-useful-only-for-debugging-and-dangerous"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#a-value-of-0-can-be-set-but-is-useful-only-for-debugging-and-dangerous"}},[e._v("#")]),e._v(" A value of 0 can be set but is useful only for debugging and dangerous")]),e._v(" "),s("h1",{attrs:{id:"in-production"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#in-production"}},[e._v("#")]),e._v(" in production.")]),e._v(" "),s("h1",{attrs:{id:"-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#-3"}},[e._v("#")])]),e._v(" "),s("h1",{attrs:{id:"cluster-migration-barrier-1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cluster-migration-barrier-1"}},[e._v("#")]),e._v(" cluster-migration-barrier 1")])]),e._v(" "),s("p",[e._v("2.consider use failover whenever make changes to master nodes")]),e._v(" "),s("ol",[s("li",[e._v("Remove master node (one option is reshard the data to the other master nodes and then remove, An alternative to remove a master node is to perform a manual failover of it over one of its slaves and remove the node after it turned into a slave of the new master.)")]),e._v(" "),s("li",[e._v("Before shutdown")]),e._v(" "),s("li",[e._v("Upgrade master node (failover to its slave node first before upgrading, upgrade when it becomes a slave node)")])]),e._v(" "),s("p",[e._v("Use failover rather than manual allocate replica using “REPLICATE "),s("NODEID",[e._v("”")])],1),e._v(" "),s("blockquote",[s("p",[e._v("1.The replica tells the master to stop processing queries from clients.\n2.The master replies to the replica with the current replication offset.\n3.The replica waits for the replication offset to match on its side, to make sure it processed all the data from the master before it continues.\n4.The replica starts a failover, obtains a new configuration epoch from the majority of the masters, and broadcasts the new configuration.\n5.The old master receives the configuration update: unblocks its clients and starts replying with redirection messages so that they'll continue the chat with the new master.\nhttps://redis.io/commands/cluster-failover")])]),e._v(" "),s("p",[e._v("3.migration between clusters\n--cluster import")]),e._v(" "),s("h3",{attrs:{id:"手动方式管理-manual-way-not-recommend"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#手动方式管理-manual-way-not-recommend"}},[e._v("#")]),e._v(" 手动方式管理 Manual way (not recommend)")]),e._v(" "),s("p",[e._v("如果主从都是在集群模式下（cluster-enable=yes），那么是无法使用非集群模式的命令，比如slaveof/replicaof\n** 1.del-node/add-node\ndel-node如果是slave十分不推荐，因为启动时依然会记得其他节点，虽然可以forget大部分节点，但是无法forget它的master，所以再add-node会有问题，所以此时只能采用meet\nDel-node如果是master，首先要将master做reshard转移到其他master nodes，然后将其对应的slave nodes全部replicate其他的master nodes，以防重启master后，slave nodes仍然记得该master node")]),e._v(" "),s("p",[e._v("redis-cli --cluster del-node "),s("HOSTIP",[e._v(":"),s("PORT",[s("NODEID",[e._v("\nRedis-server conf/redis6379.conf\nadd-node默认是master，也可以加参数指定为slave\nredis-cli --cluster add-node "),s("NEW",{attrs:{HOSTIP:""}},[e._v(":"),s("PORT",[s("ANY",{attrs:{EXIST:"",HOSTIP:""}},[e._v(":"),s("PORT",[e._v(" --cluster-slave --cluster-master-id")])],1)],1)],1)],1)],1)],1)],1),e._v(" "),s("p",[e._v("** 2.slaveof/replicaof注意再cluster集群模式下，是不可以手动分配的，可以更改slave配置，cluster-enabled=no然后再尝试\nSlaveof no one (change slave to master)\nSlave host port (change slave to replicate another master)")]),e._v(" "),s("p",[e._v("** 3.reset and meet\nAfter reset, node become a standalone master node, and then execute meet\n$redis-cli -p 6379\n127.0.0.1:6379> flushall\n127.0.0.1:6379> cluster reset\n127.0.0.1:6379> exit\nredis-cli -h "),s("HOSTIP",[e._v(" -p "),s("PORT",[e._v(" cluster meet "),s("TARGETHOSTIP",[s("TARGETPORT")],1)],1)],1)],1),e._v(" "),s("p",[e._v("** 4. Final step: reshard or rebalance\nredis-cli --cluster reshard "),s("HOSTIP",[e._v(":"),s("PORT",[e._v(" --cluster-yes\nredis-cli --cluster rebalance --cluster-threshold 1 "),s("HOSTIP",[e._v(":"),s("PORT")],1)],1)],1)],1),e._v(" "),s("p",[e._v("** 5. allocate slave for master\ncluster replicate "),s("NODEID")],1),e._v(" "),s("p",[e._v("the other failed attempt:\n~~\nredis-cli --cluster del-node "),s("HOSTIP",[e._v(":"),s("PORT",[s("NODEID",[e._v("\nredis-cli cluster forget "),s("NODEID",[e._v("\nredis-cli --cluster add-node "),s("HOSTIP",[e._v(":"),s("PORT",[s("ANY",{attrs:{EXIST:"",HOSTIP:""}},[e._v(":"),s("PORT",[e._v(" --cluster-slave --cluster-master-id "),s("MASTER",{attrs:{NODEID:""}},[e._v("\nhttps://www.jianshu.com/p/ff173ae6e478\nFailed because cannot forget itself and it’s master!\n~~")])],1)],1)],1)],1)],1)],1)],1)],1)],1),e._v(" "),s("h3",{attrs:{id:"overall-admin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#overall-admin"}},[e._v("#")]),e._v(" Overall Admin")]),e._v(" "),s("p",[e._v("Read https://redis.io/topics/admin\nhttp://antirez.com/news/96")]),e._v(" "),s("blockquote",[s("p",[e._v("Securing Redis\n1.Make sure the port Redis uses to listen for connections (by default 6379 and additionally 16379 if you run Redis in cluster mode, plus 26379 for Sentinel) is firewalled, so that it is not possible to contact Redis from the outside world.\n2.Use a configuration file where the bind directive is set in order to guarantee that Redis listens on only the network interfaces you are using. For example only the loopback interface (127.0.0.1) if you are accessing Redis just locally from the same computer, and so forth.\n3.Use the requirepass option in order to add an additional layer of security so that clients will require to authenticate using the AUTH command.\n4.Use spiped or another SSL tunneling software in order to encrypt traffic between Redis servers and Redis clients if your environment requires encryption.")])]),e._v(" "),s("blockquote",[s("p",[e._v('Disabling of specific commands\nIt is possible to disable commands in Redis or to rename them into an unguessable name, so that normal clients are limited to a specified set of commands.\nFor instance, a virtualized server provider may offer a managed Redis instance service. In this context, normal users should probably not be able to call the Redis CONFIG command to alter the configuration of the instance, but the systems that provide and remove instances should be able to do so.\nIn this case, it is possible to either rename or completely shadow commands from the command table. This feature is available as a statement that can be used inside the redis.conf configuration file. For example:\nrename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52\nIn the above example, the CONFIG command was renamed into an unguessable name. It is also possible to completely disable it (or any other command) by renaming it to the empty string, like in the following example:\nrename-command CONFIG ""\nhttps://redis.io/topics/security')])]),e._v(" "),s("p",[e._v("**Upgrade\nIf you are using Redis Sentinel or Redis Cluster, the simplest way in order to upgrade to newer versions, is to upgrade a slave after the other, then perform a manual fail-over in order to promote one of the upgraded replicas as master, and finally promote the last slave.")]),e._v(" "),s("p",[e._v("**Monitor\nredis-cli memory doctor\nredis-cli latency doctor")]),e._v(" "),s("p",[e._v("Monitor:\nhttps://redis.io/commands/MONITOR")]),e._v(" "),s("h2",{attrs:{id:"系统集成-integration"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#系统集成-integration"}},[e._v("#")]),e._v(" 系统集成 Integration")]),e._v(" "),s("p",[e._v("**StackExchange.Redis\nDriver for .net: StackExchange.Redis 1.2https://github.com/StackExchange/StackExchange.Redis\nfor partial matching\nWhere are KEYS, SCAN, FLUSHDB etc? https://github.com/StackExchange/StackExchange.Redis/blob/41f427bb5ed8c23d0992a1411d0c92667b133d8e/docs/KeysScan.md")]),e._v(" "),s("p",[e._v("**Python\npip install --trusted-host pypi.org --trusted-host files.pythonhosted.org redis-py-cluster\nfrom rediscluster import StrictRedisCluster\nrc = StrictRedisCluster(startup_nodes=redis_nodes, decode_responses=True)")]),e._v(" "),s("blockquote",[s("blockquote",[s("blockquote",[s("p",[e._v("rc.smembers(\"bitcoin:stg_testnet:1514360\")\nset([u'812853c7fe8bfa3f7d625895b3270245861f974f6ff19f8ce21317b5378be41e'])\nhttps://github.com/Grokzen/redis-py-cluster/blob/unstable/tests/test_commands.py")])])])]),e._v(" "),s("p",[e._v("**Spring boot integration\nSpring-Data-Redis 解析 https://juejin.im/post/5bac97606fb9a05cd8492e48")]),e._v(" "),s("p",[e._v("spring.redis.database=5")]),e._v(" "),s("h1",{attrs:{id:"redis服务器地址"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis服务器地址"}},[e._v("#")]),e._v(" Redis服务器地址")]),e._v(" "),s("p",[e._v("spring.redis.host=127.0.0.1")]),e._v(" "),s("h1",{attrs:{id:"redis服务器连接端口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis服务器连接端口"}},[e._v("#")]),e._v(" Redis服务器连接端口")]),e._v(" "),s("p",[e._v("spring.redis.port=6379")]),e._v(" "),s("h2",{attrs:{id:"troubleshooting"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#troubleshooting"}},[e._v("#")]),e._v(" Troubleshooting")]),e._v(" "),s("p",[e._v("1.org.springframework.data.redis.RedisSystemException: Redis exception; nested exception is io.lettuce.core.RedisException: io.lettuce.core.RedisConnectionException: DENIED Redis is running in protected mode because protected mode is enabled, no bind address was specified, no authentication password is requested to clients. In this mode connections are only accepted from the loopback interface. If you want to connect from external computers to Redis you may adopt one of the following solutions: 1) Just disable protected mode sending the command 'CONFIG SET protected-mode no' from the loopback interface by connecting to Redis from the same host the server is running, however MAKE SURE Redis is not publicly accessible from internet if you do so. Use CONFIG REWRITE to make this change permanent. 2) Alternatively you can just disable the protected mode by editing the Redis configuration file, and setting the protected mode option to 'no', and then restarting the server. 3) If you started the server manually just for testing, restart it with the '--protected-mode no' option. 4) Setup a bind address or an authentication password. NOTE: You only need to do one of the above things in order for the server to start accepting connections from the outside.")]),e._v(" "),s("p",[e._v("SOLUTION: redis-server redis.conf")]),e._v(" "),s("p",[e._v("2.\"Unable to connect to Redis; nested exception is io.lettuce.core.RedisException: Cannot retrieve initial cluster partitions from initial URIs [RedisURI [host='192.168.56.101', port=6379]]\",\ntelnet result:")]),e._v(" "),s("p",[e._v("SOLUTION:\nCONFIG SET protected-mode no\nCONFIG REWRITE")]),e._v(" "),s("p",[e._v("3.ERR Protocol error: invalid bulk length")]),e._v(" "),s("p",[e._v("https://github.com/xetorthio/jedis/issues/1034\nhttps://stackoverflow.com/questions/6752894/predis-protocol-error-invalid-bulk-length")]),e._v(" "),s("p",[e._v("4.Timeout issue\nLine 15222: 2018-05-16 18:23:43,536 [32] DEBUG LaxinoV2Plugin - [Debug      ]Exception :\nTimeout performing GET USERREPORT:SSSLZ:LZ:20658216:2bc1af86-d47c-45b8-b552-2d0b1f2078e5, inst: 1, mgr: ExecuteSelect, err: never, queue: 4750554, qu: 0, qs: 4750554, qc: 0, wr: 0, wq: 0, in: 65536, ar: 0,\nclientName: TW-SSS-UGS, serverEndpoint: 10.22.103.166:6379, keyHashSlot: 5897, IOCP: (Busy=0,Free=1000,Min=2,Max=1000), WORKER: (Busy=1,Free=32766,Min=2,Max=32767),\nLocal-CPU: 37.95% (Please take a look at this article for some common client-side issues that can cause timeouts:")]),e._v(" "),s("p",[e._v("https://github.com/StackExchange/StackExchange.Redis/tree/master/Docs/Timeouts.md")]),e._v(" "),s("p",[e._v("5.[ERR] Node XXXX:6379 is not empty. Either the node already knows other nodes (check with CLUSTER NODES) or contains some key in database 0")]),e._v(" "),s("p",[e._v("$redis-cli -p 6379\n127.0.0.1:6379> flushall\nOK\n127.0.0.1:6379> cluster reset\nOK\n127.0.0.1:6379> exit")]),e._v(" "),s("ol",{attrs:{start:"6"}},[s("li",[e._v("issue raised by above ‘cluster rest’, the node become a standalone node, forgot other nodes!!!!")])]),e._v(" "),s("p",[e._v("redis-cli --cluster help\nredis-cli --cluster add-node "),s("HOSTIP",[e._v(":"),s("PORT",[s("ANY",{attrs:{EXIST:"",HOSTIP:""}},[e._v(":"),s("PORT",[e._v(" --cluster-slave\nRedis [ERR] Nodes don’t agree about configuration!\nhttps://hzkeung.com/2018/02/25/redis-trib-check\nredis-cli --cluster check "),s("HOSTIP",[e._v(":"),s("PORT",[e._v("\nredis-cli -h "),s("ANY",{attrs:{EXIST:"",HOSTIP:""}},[e._v(" -p "),s("PORT",[e._v(" cluster meet "),s("HOSTIP",[s("PORT")],1)],1)],1)],1)],1)],1)],1)],1)],1)],1),e._v(" "),s("ol",{attrs:{start:"7"}},[s("li",[e._v("promote slave node to master")])]),e._v(" "),s("p",[e._v("simply delete it and then meet or re-add it")]),e._v(" "),s("p",[e._v("redis-cli --cluster del-node "),s("HOSTIP",[e._v(":"),s("PORT",[s("NODEID")],1)],1)],1),e._v(" "),s("blockquote",[s("blockquote",[s("blockquote",[s("p",[e._v("Removing node xxxx from cluster xxxxx:6379\nSending CLUSTER FORGET messages to the cluster...\nSHUTDOWN the node.\nredis-cli -h "),s("ANY",{attrs:{EXIST:"",HOSTIP:""}},[e._v(" -p 6379 cluster meet "),s("NEW",{attrs:{HOSTIP:""}},[s("PORT",[e._v("\nredis-cli --cluster add-node "),s("NEW",{attrs:{HOSTIP:""}},[e._v(":"),s("PORT",[s("ANY",{attrs:{EXIST:"",HOSTIP:""}},[e._v(":"),s("PORT",[e._v("\nredis-cli --cluster rebalance "),s("NEW",{attrs:{HOSTIP:""}},[e._v(":"),s("PORT")],1)],1)],1)],1)],1)],1)],1)],1)],1)])])]),e._v(" "),s("ol",{attrs:{start:"8"}},[s("li",[e._v("failed delete node")])]),e._v(" "),s("p",[e._v("Solv: meet then delete\n$redis-cli --cluster del-node "),s("HOSTIP",[e._v(":"),s("PORT",[s("NODEID")],1)],1)],1),e._v(" "),s("blockquote",[s("blockquote",[s("blockquote",[s("p",[e._v("Removing node XXXXXXX from cluster XXXXX:6379\nSending CLUSTER FORGET messages to the cluster...\nNode XXXXX:6381 replied with error:\nERR Unknown node XXXXXXXX")])])])]),e._v(" "),s("p",[e._v("redis-cli -h "),s("ANY",{attrs:{EXIST:"",HOSTIP:""}},[e._v(" -p "),s("PORT",[e._v(" cluster meet "),s("HOSTIP",[s("PORT")],1)],1)],1)],1)])}),[],!1,null,null,null);t.default=a.exports}}]);